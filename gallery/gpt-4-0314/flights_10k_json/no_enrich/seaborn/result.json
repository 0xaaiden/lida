{"summary": {"name": "flights-10k.json", "file_name": "flights-10k.json", "dataset_description": "", "fields": [{"column": "date", "properties": {"dtype": "date", "min": "2001-01-01T07:00:00", "max": "2001-03-31T21:45:00", "samples": ["2001-01-24T20:35:00", "2001-03-05T18:47:00", "2001-03-31T15:05:00"], "num_unique_values": 4148, "semantic_type": "", "description": ""}}, {"column": "delay", "properties": {"dtype": "number", "std": 25.567233106226176, "min": -38, "max": 325, "samples": [70, 49, 38], "num_unique_values": 178, "semantic_type": "", "description": ""}}, {"column": "distance", "properties": {"dtype": "number", "std": 358.2172840658196, "min": 108, "max": 2298, "samples": [229, 833, 1156], "num_unique_values": 287, "semantic_type": "", "description": ""}}, {"column": "origin", "properties": {"dtype": "category", "samples": ["RDU", "BOI", "PHX"], "num_unique_values": 59, "semantic_type": "", "description": ""}}, {"column": "destination", "properties": {"dtype": "category", "samples": ["LAX", "GEG", "SJC"], "num_unique_values": 59, "semantic_type": "", "description": ""}}, {"column": "origin_destination", "properties": {"dtype": "category", "samples": ["HOU-DAL", "RDU-BWI", "LAS-RNO"], "num_unique_values": 604, "semantic_type": "", "description": ""}}, {"column": "origin_destination_count", "properties": {"dtype": "number", "std": 12.452006750115107, "min": 1, "max": 60, "samples": [5, 6, 10], "num_unique_values": 38, "semantic_type": "", "description": ""}}], "field_names": ["date", "delay", "distance", "origin", "destination", "origin_destination", "origin_destination_count"]}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "histogram of delay", "rationale": "This visualization will help us understand the frequency of flight delays and the range of delay times."}, {"index": 1, "question": "What is the average distance of flights?", "visualization": "box plot of distance", "rationale": "This visualization will help us understand the distribution of flight distances and identify any outliers."}, {"index": 2, "question": "What is the most common origin and destination for flights?", "visualization": "bar chart of origin and destination", "rationale": "This visualization will help us identify the most popular flight routes and potentially identify any patterns or trends."}, {"index": 3, "question": "What is the relationship between delay time and distance?", "visualization": "scatter plot of delay and distance", "rationale": "This visualization will help us understand if there is a correlation between flight delay times and distance traveled."}, {"index": 4, "question": "What is the distribution of the number of flights between origin and destination?", "visualization": "histogram of origin_destination_count", "rationale": "This visualization will help us understand the frequency of flights between specific origin and destination pairs and identify any patterns or trends."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n\n    plt.figure(figsize=(10, 6))\n    sns.histplot(data=data, x='delay', bins=30, color='blue', kde=True)\n    plt.axvline(data['delay'].median(), color='red', linestyle='--', label=f\"Median: {data['delay'].median():.2f}\")\n    plt.legend()\n    plt.xlabel('Delay (minutes)')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.boxplot(data=data, y='distance')\n    avg_distance = data['distance'].mean()\n    plt.axhline(avg_distance, color='r', linestyle='--', label=f'Average Distance: {avg_distance:.2f}')\n    plt.title('What is the average distance of flights?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data_grouped = data.groupby(['origin', 'destination']).size().reset_index(name='count')\n    data_grouped = data_grouped.sort_values('count', ascending=False).head(10)\n\n    chart = sns.barplot(x='origin_destination', y='count', data=data_grouped, palette='viridis')\n    plt.title('What is the most common origin and destination for flights?', wrap=True)\n    plt.xlabel('Origin-Destination')\n    plt.ylabel('Number of Flights')\n    plt.xticks(rotation=45)\n    plt.legend(title='Origin-Destination', loc='upper right', labels=data_grouped['origin_destination'])\n\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.scatterplot(data=data, x='distance', y='delay', hue='origin', palette='viridis')\n    plt.title('What is the relationship between delay time and distance?', wrap=True)\n    plt.legend(title='Origin', bbox_to_anchor=(1.05, 1), loc='upper left')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='origin_destination_count', bins=20, kde=True)\n    plt.axvline(data['origin_destination_count'].median(), color='red', linestyle='--', label=f\"Median: {data['origin_destination_count'].median():.2f}\")\n    plt.title(\"What is the distribution of the number of flights between origin and destination?\", wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-10k.json", "chart": [[{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n\n    plt.figure(figsize=(10, 6))\n    sns.histplot(data=data, x='delay', bins=30, color='blue', kde=True)\n    plt.axvline(data['delay'].median(), color='red', linestyle='--', label=f\"Median: {data['delay'].median():.2f}\")\n    plt.legend()\n    plt.xlabel('Delay (minutes)')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.boxplot(data=data, y='distance')\n    avg_distance = data['distance'].mean()\n    plt.axhline(avg_distance, color='r', linestyle='--', label=f'Average Distance: {avg_distance:.2f}')\n    plt.title('What is the average distance of flights?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'box_aspect' and 'fig_aspect' must be positive", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2823, in draw\n    artists = self._get_draw_artists(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 236, in _get_draw_artists\n    ax.apply_aspect(pos)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 1902, in apply_aspect\n    pb1 = pb.shrunk_to_aspect(self._box_aspect, pb, fig_aspect)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 558, in shrunk_to_aspect\n    raise ValueError(\"'box_aspect' and 'fig_aspect' must be positive\")\nValueError: 'box_aspect' and 'fig_aspect' must be positive\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data_grouped = data.groupby(['origin', 'destination']).size().reset_index(name='count')\n    data_grouped = data_grouped.sort_values('count', ascending=False).head(10)\n\n    chart = sns.barplot(x='origin_destination', y='count', data=data_grouped, palette='viridis')\n    plt.title('What is the most common origin and destination for flights?', wrap=True)\n    plt.xlabel('Origin-Destination')\n    plt.ylabel('Number of Flights')\n    plt.xticks(rotation=45)\n    plt.legend(title='Origin-Destination', loc='upper right', labels=data_grouped['origin_destination'])\n\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret input 'origin_destination'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 9, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/categorical.py\", line 3182, in barplot\n    plotter = _BarPlotter(x, y, hue, data, order, hue_order,\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/categorical.py\", line 1584, in __init__\n    self.establish_variables(x, y, hue, data, orient,\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/categorical.py\", line 153, in establish_variables\n    raise ValueError(err)\nValueError: Could not interpret input 'origin_destination'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.scatterplot(data=data, x='distance', y='delay', hue='origin', palette='viridis')\n    plt.title('What is the relationship between delay time and distance?', wrap=True)\n    plt.legend(title='Origin', bbox_to_anchor=(1.05, 1), loc='upper left')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'box_aspect' and 'fig_aspect' must be positive", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2823, in draw\n    artists = self._get_draw_artists(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 236, in _get_draw_artists\n    ax.apply_aspect(pos)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 1902, in apply_aspect\n    pb1 = pb.shrunk_to_aspect(self._box_aspect, pb, fig_aspect)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 558, in shrunk_to_aspect\n    raise ValueError(\"'box_aspect' and 'fig_aspect' must be positive\")\nValueError: 'box_aspect' and 'fig_aspect' must be positive\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    sns.histplot(data=data, x='origin_destination_count', bins=20, kde=True)\n    plt.axvline(data['origin_destination_count'].median(), color='red', linestyle='--', label=f\"Median: {data['origin_destination_count'].median():.2f}\")\n    plt.title(\"What is the distribution of the number of flights between origin and destination?\", wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Singular matrix", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 2385, in axvline\n    return gca().axvline(x=x, ymin=ymin, ymax=ymax, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_axes.py\", line 805, in axvline\n    self.add_line(l)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2288, in add_line\n    self._update_line_limits(line)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2321, in _update_line_limits\n    trf_to_data = line_trf - self.transData\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 1470, in __sub__\n    return self + other.inverted()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 2452, in inverted\n    self._b.inverted(), self._a.inverted())\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 2452, in inverted\n    self._b.inverted(), self._a.inverted())\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/transforms.py\", line 1890, in inverted\n    self._inverted = Affine2D(inv(mtx), shorthand_name=shorthand_name)\n  File \"<__array_function__ internals>\", line 180, in inv\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/numpy/linalg/linalg.py\", line 545, in inv\n    ainv = _umath_linalg.inv(a, signature=signature, extobj=extobj)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/numpy/linalg/linalg.py\", line 88, in _raise_linalgerror_singular\n    raise LinAlgError(\"Singular matrix\")\nnumpy.linalg.LinAlgError: Singular matrix\n"}}]]}