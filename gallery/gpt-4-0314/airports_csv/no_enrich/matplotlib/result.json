{"summary": {"name": "airports.csv", "file_name": "airports.csv", "dataset_description": "", "fields": [{"column": "iata", "properties": {"dtype": "string", "samples": ["5W8", "4T6", "W44"], "num_unique_values": 3364, "semantic_type": "", "description": ""}}, {"column": "name", "properties": {"dtype": "string", "samples": ["Freedom", "Bluffton", "Sinton-San Patricio County"], "num_unique_values": 3227, "semantic_type": "", "description": ""}}, {"column": "city", "properties": {"dtype": "string", "samples": ["Carthage", "Coldwater", "Weaverville"], "num_unique_values": 2674, "semantic_type": "", "description": ""}}, {"column": "state", "properties": {"dtype": "category", "samples": ["AS", "GA", "NC"], "num_unique_values": 56, "semantic_type": "", "description": ""}}, {"column": "country", "properties": {"dtype": "category", "samples": ["USA"], "num_unique_values": 1, "semantic_type": "", "description": ""}}, {"column": "latitude", "properties": {"dtype": "number", "std": 8.27895762971512, "min": 13.48345, "max": 71.2854475, "samples": [41.46736111], "num_unique_values": 3363, "semantic_type": "", "description": ""}}, {"column": "longitude", "properties": {"dtype": "number", "std": 21.49095058905876, "min": -176.6460306, "max": -64.70486444, "samples": [-81.28394167], "num_unique_values": 3363, "semantic_type": "", "description": ""}}], "field_names": ["iata", "name", "city", "state", "country", "latitude", "longitude"]}, "goals": [{"index": 0, "question": "What is the distribution of airports across different states in the USA?", "visualization": "bar chart of number of airports per state", "rationale": "This helps in identifying the states with the highest and lowest number of airports and can be useful for airlines in planning their routes."}, {"index": 1, "question": "What is the distribution of airports across different cities?", "visualization": "scatter plot of latitude and longitude of airports", "rationale": "This helps in identifying the cities with the highest and lowest number of airports and can be useful for airlines in planning their routes."}, {"index": 2, "question": "What is the distribution of latitude and longitude of airports?", "visualization": "scatter plot of latitude and longitude of airports", "rationale": "This helps in identifying the geographical spread of airports and can be useful for airlines in planning their routes."}, {"index": 3, "question": "What is the distribution of airport names?", "visualization": "word cloud of airport names", "rationale": "This helps in identifying the most common airport names and can be useful for airlines in branding and marketing."}, {"index": 4, "question": "What is the distribution of airport codes?", "visualization": "histogram of airport codes", "rationale": "This helps in identifying the most common airport codes and can be useful for airlines in branding and marketing."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    state_counts = data['state'].value_counts()\n    ax = state_counts.plot(kind='bar', figsize=(15, 7), color='c')\n    ax.set_xlabel('States')\n    ax.set_ylabel('Number of Airports')\n    ax.set_title('What is the distribution of airports across different states in the USA?', wrap=True)\n    ax.legend(['Number of Airports'])\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data['longitude'], data['latitude'], c=data['state'].cat.codes, cmap='viridis', alpha=0.5)\n    ax.set_xlabel('Longitude')\n    ax.set_ylabel('Latitude')\n    plt.title('What is the distribution of airports across different cities?', wrap=True)\n    legend1 = ax.legend(*scatter.legend_elements(), title=\"States\", loc=\"upper left\", bbox_to_anchor=(1, 1))\n    ax.add_artist(legend1)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['longitude'], data['latitude'])\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    plt.title('What is the distribution of latitude and longitude of airports?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\nfrom wordcloud import WordCloud\n\ndef plot(data: pd.DataFrame):\n    text = ' '.join(data['name'])\n    wordcloud = WordCloud(background_color='white', width=800, height=800).generate(text)\n\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.title('What is the distribution of airport names?')\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['iata'], bins=50, color='blue', alpha=0.7)\n    plt.title('What is the distribution of airport codes?', wrap=True)\n    plt.xlabel('Airport Codes')\n    plt.ylabel('Frequency')\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)"]], "filename": "airports.csv", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    state_counts = data['state'].value_counts()\n    ax = state_counts.plot(kind='bar', figsize=(15, 7), color='c')\n    ax.set_xlabel('States')\n    ax.set_ylabel('Number of Airports')\n    ax.set_title('What is the distribution of airports across different states in the USA?', wrap=True)\n    ax.legend(['Number of Airports'])\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data['longitude'], data['latitude'], c=data['state'].cat.codes, cmap='viridis', alpha=0.5)\n    ax.set_xlabel('Longitude')\n    ax.set_ylabel('Latitude')\n    plt.title('What is the distribution of airports across different cities?', wrap=True)\n    legend1 = ax.legend(*scatter.legend_elements(), title=\"States\", loc=\"upper left\", bbox_to_anchor=(1, 1))\n    ax.add_artist(legend1)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "Can only use .cat accessor with a 'category' dtype", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 144, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/generic.py\", line 5575, in __getattr__\n    return object.__getattribute__(self, name)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/accessor.py\", line 182, in __get__\n    accessor_obj = self._accessor(obj)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/arrays/categorical.py\", line 2717, in __init__\n    self._validate(data)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/arrays/categorical.py\", line 2726, in _validate\n    raise AttributeError(\"Can only use .cat accessor with a 'category' dtype\")\nAttributeError: Can only use .cat accessor with a 'category' dtype\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['longitude'], data['latitude'])\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    plt.title('What is the distribution of latitude and longitude of airports?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\nfrom wordcloud import WordCloud\n\ndef plot(data: pd.DataFrame):\n    text = ' '.join(data['name'])\n    wordcloud = WordCloud(background_color='white', width=800, height=800).generate(text)\n\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.title('What is the distribution of airport names?')\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.hist(data['iata'], bins=50, color='blue', alpha=0.7)\n    plt.title('What is the distribution of airport codes?', wrap=True)\n    plt.xlabel('Airport Codes')\n    plt.ylabel('Frequency')\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}]]}