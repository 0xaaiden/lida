{"summary": {"name": "US Airports", "file_name": "airports.csv", "dataset_description": "A dataset containing information about airports in the United States.", "fields": [{"column": "iata", "properties": {"dtype": "string", "samples": ["TTD", "PGM", "U55"], "num_unique_values": 3364, "semantic_type": "iata_code", "description": "The IATA code of the airport."}}, {"column": "name", "properties": {"dtype": "string", "samples": ["May Creek", "Lebanon State", "Fall River Mills"], "num_unique_values": 3227, "semantic_type": "airport_name", "description": "The name of the airport."}}, {"column": "city", "properties": {"dtype": "string", "samples": ["Clear A.F.B.", "Black River Falls", "Manila"], "num_unique_values": 2674, "semantic_type": "city", "description": "The city where the airport is located."}}, {"column": "state", "properties": {"dtype": "category", "samples": ["AR", "WI", "DC"], "num_unique_values": 56, "semantic_type": "state", "description": "The state where the airport is located."}}, {"column": "country", "properties": {"dtype": "category", "samples": ["USA"], "num_unique_values": 1, "semantic_type": "country", "description": "The country where the airport is located."}}, {"column": "latitude", "properties": {"dtype": "number", "std": 8.27895762971512, "min": 13.48345, "max": 71.2854475, "samples": [34.09535361], "num_unique_values": 3363, "semantic_type": "latitude", "description": "The latitude of the airport."}}, {"column": "longitude", "properties": {"dtype": "number", "std": 21.49095058905876, "min": -176.6460306, "max": -64.70486444, "samples": [-97.16927778], "num_unique_values": 3363, "semantic_type": "longitude", "description": "The longitude of the airport."}}], "field_names": ["iata", "name", "city", "state", "country", "latitude", "longitude"]}, "goals": [{"index": 0, "question": "What is the distribution of airports across different states in the US?", "visualization": "choropleth map of the US with the number of airports per state", "rationale": "This visualization will help us understand which states have the highest and lowest number of airports, and identify any patterns or trends in airport distribution across the country."}, {"index": 1, "question": "What is the distribution of airports across different cities in the US?", "visualization": "bar chart of the top 10 cities with the highest number of airports", "rationale": "This visualization will help us identify which cities have the highest concentration of airports, and whether there are any cities with significantly more airports than others."}, {"index": 2, "question": "What is the distribution of latitude and longitude of airports in the US?", "visualization": "scatter plot of latitude and longitude of all airports", "rationale": "This visualization will help us identify any clusters or patterns in the distribution of airports across the US, and whether there are any regions with significantly more or fewer airports than others."}, {"index": 3, "question": "What is the distribution of airport names in the US?", "visualization": "word cloud of the most common airport names", "rationale": "This visualization will help us identify the most common names of airports in the US, and whether there are any patterns or trends in airport naming conventions."}, {"index": 4, "question": "What is the distribution of IATA codes across different airports in the US?", "visualization": "histogram of the number of airports per IATA code", "rationale": "This visualization will help us identify which IATA codes are used most frequently in the US, and whether there are any codes that are significantly more common than others."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\ndef plot(data: pd.DataFrame):\n    # Read US states shapefile\n    us_states = gpd.read_file(\"https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json\")\n\n    # Group data by state and count airports\n    state_counts = data.groupby('state').size().reset_index(name='count')\n\n    # Merge state_counts with us_states GeoDataFrame\n    merged_data = us_states.merge(state_counts, left_on='name', right_on='state')\n\n    # Create choropleth map\n    fig, ax = plt.subplots(1, 1, figsize=(15, 25))\n    divider = make_axes_locatable(ax)\n    cax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n    merged_data.plot(column='count', cmap='coolwarm', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True, cax=cax)\n\n    # Set title\n    plt.title(\"What is the distribution of airports across different states in the US?\", wrap=True)\n\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    city_airport_count = data['city'].value_counts().head(10)\n    city_airport_count.plot(kind='bar', color='blue', edgecolor='black')\n    plt.title('What is the distribution of airports across different cities in the US?', wrap=True)\n    plt.xlabel('City')\n    plt.ylabel('Number of Airports')\n    plt.xticks(rotation=45)\n    plt.legend(['Number of Airports'])\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    fig, ax = plt.subplots()\n    ax.scatter(data['longitude'], data['latitude'], alpha=0.5)\n    ax.set_xlabel('Longitude')\n    ax.set_ylabel('Latitude')\n    plt.title('What is the distribution of latitude and longitude of airports in the US?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\nfrom wordcloud import WordCloud\n\ndef plot(data: pd.DataFrame):\n    # Prepare the text for the word cloud\n    text = ' '.join(data['name'])\n\n    # Create the word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='viridis').generate(text)\n\n    # Plot the word cloud\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.title('What is the distribution of airport names in the US?', wrap=True)\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    iata_counts = data['iata'].value_counts()\n    plt.hist(iata_counts, bins=20, color='blue', alpha=0.7)\n    plt.xlabel('Number of Airports per IATA Code')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of IATA codes across different airports in the US?', wrap=True)\n    plt.legend(['IATA Code Distribution'])\n    return plt;\n\nchart = plot(data)"]], "filename": "airports.csv", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\ndef plot(data: pd.DataFrame):\n    # Read US states shapefile\n    us_states = gpd.read_file(\"https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json\")\n\n    # Group data by state and count airports\n    state_counts = data.groupby('state').size().reset_index(name='count')\n\n    # Merge state_counts with us_states GeoDataFrame\n    merged_data = us_states.merge(state_counts, left_on='name', right_on='state')\n\n    # Create choropleth map\n    fig, ax = plt.subplots(1, 1, figsize=(15, 25))\n    divider = make_axes_locatable(ax)\n    cax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n    merged_data.plot(column='count', cmap='coolwarm', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True, cax=cax)\n\n    # Set title\n    plt.title(\"What is the distribution of airports across different states in the US?\", wrap=True)\n\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    city_airport_count = data['city'].value_counts().head(10)\n    city_airport_count.plot(kind='bar', color='blue', edgecolor='black')\n    plt.title('What is the distribution of airports across different cities in the US?', wrap=True)\n    plt.xlabel('City')\n    plt.ylabel('Number of Airports')\n    plt.xticks(rotation=45)\n    plt.legend(['Number of Airports'])\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    fig, ax = plt.subplots()\n    ax.scatter(data['longitude'], data['latitude'], alpha=0.5)\n    ax.set_xlabel('Longitude')\n    ax.set_ylabel('Latitude')\n    plt.title('What is the distribution of latitude and longitude of airports in the US?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\nfrom wordcloud import WordCloud\n\ndef plot(data: pd.DataFrame):\n    # Prepare the text for the word cloud\n    text = ' '.join(data['name'])\n\n    # Create the word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='viridis').generate(text)\n\n    # Plot the word cloud\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.title('What is the distribution of airport names in the US?', wrap=True)\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    iata_counts = data['iata'].value_counts()\n    plt.hist(iata_counts, bins=20, color='blue', alpha=0.7)\n    plt.xlabel('Number of Airports per IATA Code')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of IATA codes across different airports in the US?', wrap=True)\n    plt.legend(['IATA Code Distribution'])\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}]]}