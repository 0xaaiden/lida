{"summary": {"dataset_fields": ["series", "year", "month", "count", "rate", "date"]}, "goals": [{"index": 0, "question": "What is the trend of count over time?", "visualization": "Line chart of count over time", "rationale": "This visualization helps to identify if there is an increase or decrease in the count over time."}, {"index": 1, "question": "What is the distribution of rate?", "visualization": "Histogram of rate", "rationale": "This visualization helps to identify the range of values for rate and if there are any outliers."}, {"index": 2, "question": "What is the relationship between count and rate?", "visualization": "Scatter plot of count vs rate", "rationale": "This visualization helps to identify if there is any correlation between count and rate."}, {"index": 3, "question": "What is the distribution of count by month?", "visualization": "Bar chart of count by month", "rationale": "This visualization helps to identify if there are any seasonal trends in the count."}, {"index": 4, "question": "What is the distribution of rate by year?", "visualization": "Box plot of rate by year", "rationale": "This visualization helps to identify if there are any significant differences in rate between years."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    \n    plt.plot(data['date'], data['count'])\n    plt.xlabel('Date')\n    plt.ylabel('Count')\n    plt.title('What is the trend of count over time?', wrap=True)\n    plt.xticks(rotation=45)\n    plt.legend(['Count'])\n    \n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['rate'] = pd.to_numeric(data['rate'], errors='coerce')\n    data = data[pd.notna(data['rate'])]\n    \n    plt.hist(data['rate'], bins=30, color='blue', alpha=0.7, label='Rate')\n    plt.axvline(data['rate'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['rate'].median():.2f}\")\n    plt.xlabel('Rate')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of rate?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['count'], data['rate'])\n    plt.xlabel('Count')\n    plt.ylabel('Rate')\n    plt.title('What is the relationship between count and rate?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    data['month'] = data['date'].dt.month\n\n    month_counts = data.groupby('month')['count'].sum()\n    month_counts.plot(kind='bar', color='blue', legend=True)\n\n    plt.title('What is the distribution of count by month?', wrap=True)\n    plt.xlabel('Month')\n    plt.ylabel('Count')\n    plt.xticks(range(12), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], rotation=45)\n    plt.legend(['Count'])\n\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    data['year'] = data['date'].dt.year\n\n    fig, ax = plt.subplots()\n    data.boxplot(column='rate', by='year', ax=ax)\n    ax.set_title('What is the distribution of rate by year?')\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Rate')\n    plt.suptitle('')  # Remove automatic suptitle\n    plt.xticks(rotation=45)\n    plt.legend(title='Rate by Year', loc='upper right')\n    return plt;\n\nchart = plot(data)"]], "filename": "unemployment-across-industries.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    \n    plt.plot(data['date'], data['count'])\n    plt.xlabel('Date')\n    plt.ylabel('Count')\n    plt.title('What is the trend of count over time?', wrap=True)\n    plt.xticks(rotation=45)\n    plt.legend(['Count'])\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['rate'] = pd.to_numeric(data['rate'], errors='coerce')\n    data = data[pd.notna(data['rate'])]\n    \n    plt.hist(data['rate'], bins=30, color='blue', alpha=0.7, label='Rate')\n    plt.axvline(data['rate'].median(), color='red', linestyle='dashed', linewidth=2, label=f\"Median: {data['rate'].median():.2f}\")\n    plt.xlabel('Rate')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of rate?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.scatter(data['count'], data['rate'])\n    plt.xlabel('Count')\n    plt.ylabel('Rate')\n    plt.title('What is the relationship between count and rate?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    data['month'] = data['date'].dt.month\n\n    month_counts = data.groupby('month')['count'].sum()\n    month_counts.plot(kind='bar', color='blue', legend=True)\n\n    plt.title('What is the distribution of count by month?', wrap=True)\n    plt.xlabel('Month')\n    plt.ylabel('Count')\n    plt.xticks(range(12), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], rotation=45)\n    plt.legend(['Count'])\n\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "cannot convert float NaN to integer", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 157, in execute\n    plt.savefig(buf, format=\"png\", dpi=100, pad_inches=0.2)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 979, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 3046, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/_api/deprecation.py\", line 415, in wrapper\n    return func(*inner_args, **inner_kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 540, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 436, in draw\n    self.figure.draw(self.renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 73, in draw_wrapper\n    result = draw(artist, renderer, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/figure.py\", line 2837, in draw\n    mimage._draw_list_compositing_images(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/image.py\", line 132, in _draw_list_compositing_images\n    a.draw(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/artist.py\", line 50, in draw_wrapper\n    return draw(artist, renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3055, in draw\n    self._update_title_position(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 2991, in _update_title_position\n    bb = ax.xaxis.get_tightbbox(renderer)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1103, in get_tightbbox\n    ticks_to_draw = self._update_ticks()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1045, in _update_ticks\n    major_locs = self.get_majorticklocs()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 1277, in get_majorticklocs\n    return self.major.locator()\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2115, in __call__\n    return self.tick_values(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2123, in tick_values\n    locs = self._raw_ticks(vmin, vmax)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/ticker.py\", line 2062, in _raw_ticks\n    nbins = np.clip(self.axis.get_tick_space(),\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/matplotlib/axis.py\", line 2267, in get_tick_space\n    return int(np.floor(length / size))\nValueError: cannot convert float NaN to integer\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['date'] = pd.to_datetime(data['date'], errors='coerce')\n    data = data[pd.notna(data['date'])]\n    data['year'] = data['date'].dt.year\n\n    fig, ax = plt.subplots()\n    data.boxplot(column='rate', by='year', ax=ax)\n    ax.set_title('What is the distribution of rate by year?')\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Rate')\n    plt.suptitle('')  # Remove automatic suptitle\n    plt.xticks(rotation=45)\n    plt.legend(title='Rate by Year', loc='upper right')\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}]]}