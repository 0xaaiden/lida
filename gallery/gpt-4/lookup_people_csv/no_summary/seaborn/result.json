{"summary": {"file_name": "lookup_people.csv"}, "goals": [{"index": 0, "question": "What is the distribution of ages among the people in the dataset?", "visualization": "Histogram of age field", "rationale": "This visualization will help us understand the age distribution of the people in the dataset and identify any outliers or patterns."}, {"index": 1, "question": "What is the gender distribution among the people in the dataset?", "visualization": "Bar chart of gender field", "rationale": "This visualization will help us understand the gender distribution of the people in the dataset and identify any imbalances or biases."}, {"index": 2, "question": "What is the most common occupation among the people in the dataset?", "visualization": "Bar chart of occupation field", "rationale": "This visualization will help us identify the most common occupation among the people in the dataset and understand any trends or patterns in the data."}, {"index": 3, "question": "What is the distribution of education levels among the people in the dataset?", "visualization": "Pie chart of education field", "rationale": "This visualization will help us understand the education levels of the people in the dataset and identify any imbalances or biases."}, {"index": 4, "question": "What is the relationship between age and income among the people in the dataset?", "visualization": "Scatter plot of age and income fields", "rationale": "This visualization will help us understand the relationship between age and income among the people in the dataset and identify any patterns or correlations."}], "code": [["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='age', bins=20)\n    plt.title('What is the distribution of ages among the people in the dataset?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    ax = sns.countplot(x='gender', data=data)\n    plt.title('What is the gender distribution among the people in the dataset?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    occupation_counts = data['occupation'].value_counts()\n    sns.barplot(x=occupation_counts.index, y=occupation_counts.values)\n    plt.xlabel('Occupation')\n    plt.ylabel('Count')\n    plt.title('What is the most common occupation among the people in the dataset?', wrap=True)\n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    education_counts = data['education'].value_counts()\n    plt.pie(education_counts, labels=education_counts.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of education levels among the people in the dataset?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.scatterplot(data=data, x='age', y='income')\n    plt.title('What is the relationship between age and income among the people in the dataset?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\ndata = pd.read_csv('lookup_people.csv')\nchart = plot(data)\nchart.show()"]], "filename": "lookup_people.csv", "chart": [[{"spec": null, "status": true, "raster": "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++M+u1b/C87dXzDtcDia9uARUavhdbCIKGh9++23GDRoEGJiYjBlyhTU1tbiueeeQ2xsLL755hu4D18XXngh+vTpg8zMTJjNZnz00Uf47LPP8Nxzz2Hq1KkAgOXLl+PPf/4zIiIi8Pe//x0AEBsbi0suuQTbtm3D9ddfj+uuuw7du3dHRUUFlixZgurqauzduxcJCQkAgBdffBG33HILrr32WlxyySU4c+YMvvnmG4SHh+Ppp58GAFRUVOD888+Hoii4+eabERMTg08//RQffvghnnzySUyfPh0VFRV44YUXMHv2bNxyyy0YPnw4AGDIkCHo0aOHx2Nw5swZZGdnIy8vD/v27UN0dPTP8tgTUQu14hdNExH5NXbsWBESEiKKior0tr179wqTySTqHr5OnTrV4HdzcnJEjx49PNr69OkjRo4c2WDbM2fOCJfL5dF24MABYbPZxPz58/W2q666SvTp08dvn2+88UYRHx8vfvzxR4/266+/XrRv317v69dffy0AiKVLl/rcl9PpFL/+9a+FzWYT69ev93u/RBRc+BYhEQUll8uFVatWYezYsejWrZvenp6ejpycHI9tQ0ND9f8/fvw4fvzxR4wcORL79+/H8ePHz3lfNpsNqqrq93vkyBFEREQgLS0NO3bs0Lfr0KEDDh06hK+//trrfoQQeO+993DllVdCCIEff/xR/5eTk4Pjx4977O9c5s2bh08//RSvv/46Ro4c2ejfI6LWxwKLiIJSZWUlTp8+7fX76tLS0jx+/uKLL5CdnY3w8HB06NABMTExuPfeewGgUQWWpml48sknkZqaCpvNhk6dOiEmJgbffPONx+//9a9/RUREBC688EKkpqZi6tSp+OKLLzz6XFVVhRdeeAExMTEe/yZPngwAOHz4cKMfg9deew2XXHIJfvvb3zb6d4goOHAVIRFJ7fvvv8fo0aPRu3dvPPHEE+jatSusVis++eQTPPnkk9A07Zz7eOihh3DffffhT3/6E+6//35ER0dDVVVMnz7d4/fT09ORn5+P//znP1i5ciXee+89LFq0CLNnz8a8efP0bf/whz9g4sSJXu+rX79+jR7bkSNHEB8f3+jtiSh4sMAioqAUExOD0NBQFBQUNLgtPz9f//+PPvoIdrsdH374ocdbievWrWvwe76u/v7uu+9i1KhRePnllz3aq6qq0KlTJ4+2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eNyuaZq47777RGxsrLDZbGL06NEiPz+/lXobPBQhhGjNM2hEREREbQ0/g0VERERkMBZYRERERAZjgUVERERkMBZYRERERAZjgUVERERkMBZYRERERAZjgUVERERkMBZYRERERAZjgUVERERkMBZYRERERAZjgUVERERkMBZYRPSLtHLlSgwbNgwdOnRAx44dccUVV+D777/Xb//yyy/Rv39/hISE4Pzzz8fy5cuhKAp27dqlb7Nnzx6MGTMGERERiI2NxR//+Ef8+OOPrTAaIgo2LLCI6BeppqYGM2bMwLZt27BmzRqoqoqrr74amqbhxIkTuPLKK3Heeedhx44duP/++/HXv/7V4/erqqpw8cUXY8CAAdi2bRtWrlyJiooKjBs3rpVGRETBRBFCiNbuBBFRa/vxxx8RExODb7/9Fps2bcI//vEPHDp0CCEhIQCAl156CTfffDN27tyJ/v3744EHHsB///tfrFq1St/HoUOH0LVrV+Tn56NXr16tNRQiCgI8g0VEv0gFBQW44YYb0KNHD7Rr1w7JyckAgOLiYuTn56Nfv356cQUAF154ocfv7969G+vWrUNERIT+r3fv3gDg8VYjEf0ymVu7A0REreHKK69EUlISXnzxRSQkJEDTNPTt2xcOh6NRv19dXY0rr7wSDz/8cIPb4uPjje4uEUmGBRYR/eIcOXIE+fn5ePHFFzF8+HAAwKZNm/Tb09LS8H//93+w2+2w2WwAgK+//tpjHwMHDsR7772H5ORkmM08lBKRJ75FSES/OFFRUejYsSNeeOEFFBYWYu3atZgxY4Z+++9+9ztomoZbbrkFubm5WLVqFR577DEAgKIoAICpU6fi6NGjuOGGG/D111/j+++/x6pVqzB58mS4XK5WGRcRBQ8WWET0i6OqKt566y1s374dffv2xZ133olHH31Uv71du3b46KOPsGvXLvTv3x9///vfMXv2bADQP5eVkJCAL774Ai6XC5deeinOO+88TJ8+HR06dICq8tBK9EvHVYRERI3w+uuvY/LkyTh+/DhCQ0NbuztEFOT4wQEiIi/+9a9/oUePHkhMTMTu3bvx17/+FePGjWNxRUSNwgKLiMiL8vJyzJ49G+Xl5YiPj8d1112HBx98sLW7RUSS4FuERERERAbjJzGJiIiIDMYCi4iIiMhgLLCIiIiIDMYCi4iIiMhgLLCIiIiIDMYCi4iIiMhgLLCIiIiIDMYCi4iIiMhgLLCIiIiIDMYCi4iIiMhgLLCIiIiIDMYCi4iIiMhgLLCIiIiIDMYCi4iIiMhg/w9Te7klAIgECgAAAABJRU5ErkJggg==", "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='age', bins=20)\n    plt.title('What is the distribution of ages among the people in the dataset?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    ax = sns.countplot(x='gender', data=data)\n    plt.title('What is the gender distribution among the people in the dataset?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret input 'gender'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/categorical.py\", line 3598, in countplot\n    plotter = _CountPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/categorical.py\", line 1584, in __init__\n    self.establish_variables(x, y, hue, data, orient,\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/categorical.py\", line 153, in establish_variables\n    raise ValueError(err)\nValueError: Could not interpret input 'gender'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    occupation_counts = data['occupation'].value_counts()\n    sns.barplot(x=occupation_counts.index, y=occupation_counts.values)\n    plt.xlabel('Occupation')\n    plt.ylabel('Count')\n    plt.title('What is the most common occupation among the people in the dataset?', wrap=True)\n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'occupation'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'occupation'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'occupation'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    education_counts = data['education'].value_counts()\n    plt.pie(education_counts, labels=education_counts.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of education levels among the people in the dataset?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'education'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'education'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'education'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.scatterplot(data=data, x='age', y='income')\n    plt.title('What is the relationship between age and income among the people in the dataset?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\ndata = pd.read_csv('lookup_people.csv')\nchart = plot(data)", "library": "seaborn", "error": {"message": "[Errno 2] No such file or directory: 'lookup_people.csv'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 680, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 575, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 934, in __init__\n    self._engine = self._make_engine(f, self.engine)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 1218, in _make_engine\n    self.handles = get_handle(  # type: ignore[call-overload]\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/io/common.py\", line 786, in get_handle\n    handle = open(\nFileNotFoundError: [Errno 2] No such file or directory: 'lookup_people.csv'\n"}}]]}