{"summary": {"file_name": "airports.csv"}, "goals": [{"index": 0, "question": "What is the distribution of airports by country?", "visualization": "Bar chart of number of airports by country", "rationale": "This visualization will help us understand which countries have the most and least number of airports. It can also help us identify any outliers or countries with significantly higher or lower number of airports compared to others."}, {"index": 1, "question": "What is the distribution of airports by type?", "visualization": "Pie chart of number of airports by type", "rationale": "This visualization will help us understand the proportion of different types of airports such as small, medium, large, heliport, seaplane base, etc. It can also help us identify any dominant types of airports."}, {"index": 2, "question": "What is the distribution of airports by elevation?", "visualization": "Histogram of airport elevation", "rationale": "This visualization will help us understand the range and distribution of airport elevations. It can also help us identify any outliers or airports with significantly higher or lower elevations compared to others."}, {"index": 3, "question": "What is the distribution of airports by municipality?", "visualization": "Bar chart of number of airports by municipality", "rationale": "This visualization will help us understand which municipalities have the most and least number of airports. It can also help us identify any outliers or municipalities with significantly higher or lower number of airports compared to others."}, {"index": 4, "question": "What is the distribution of airports by state?", "visualization": "Choropleth map of number of airports by state", "rationale": "This visualization will help us understand the geographic distribution of airports across different states. It can also help us identify any patterns or clusters of airports in certain regions."}], "code": [["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    country_counts = data['country'].value_counts()\n    country_counts.plot(kind='bar')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    \n    plt.title(\"What is the distribution of airports by country?\", wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    airport_types = data['type'].value_counts()\n    plt.pie(airport_types, labels=airport_types.index, autopct='%1.1f%%')\n    plt.title(\"What is the distribution of airports by type?\", wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['elevation'])\n    plt.xlabel('Elevation')\n    plt.ylabel('Number of Airports')\n    plt.title('What is the distribution of airports by elevation?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    municipality_counts = data['municipality'].value_counts()\n    municipality_counts.plot(kind='bar')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    plt.title(\"What is the distribution of airports by municipality?\", wrap=True)\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    # Load US states shapefile\n    states = gpd.read_file('https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json')\n\n    # Count airports by state\n    airport_counts = data.groupby('state').size().reset_index(name='count')\n\n    # Merge airport counts with states shapefile\n    merged_data = states.merge(airport_counts, left_on='name', right_on='state')\n\n    # Create choropleth map\n    plt.figure(figsize=(6, 6))\n    merged_data.plot(column='count', cmap='coolwarm', legend=True, edgecolor='black', linewidth=0.5)\n    plt.title('What is the distribution of airports by state?', wrap=True)\n    plt.axis('off')\n\n    return plt\n\nchart = plot(data)\nchart.show()"]], "filename": "airports.csv", "chart": [[{"spec": null, "status": true, "raster": "iVBORw0KGgoAAAANSUhEUgAAAlgAAAJYCAYAAAC+ZpjcAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAABhfElEQVR4nO3dfVxUdfr/8feZGWYAUREFlEzEm8rbTGsTK9M00ahHueZNVmplduPNz7Rya1tSu3GrrdzcbrfddEt31bZbLY10tS2xWs3Mm9zIG2oBJRUNRWBmzu8PvxwdAQU5Ss55PR8PHjXXOZy5rpnheM1nPp8zhmmapgAAAGAbV10nAAAAEG5osAAAAGxGgwUAAGAzGiwAAACb0WABAADYjAYLAADAZjRYAAAANqPBAgAAsBkNFgAAgM1osAAAAGxGgwUAAGAzGiwAAACb0WABAADYjAYLAADAZjRYsIVhGBo3blyd3f/UqVNlGMZpuY+ffvrplN7Pie7/aC1bttSoUaNO+X1v375dhmFo9uzZVmzUqFGKiYk55fddzjAMTZ069bTd38n48ssv1aNHD9WrV0+GYWjdunW1Ol5lj3s469Wrlzp27FjXaQC2oMFyuAULFsgwDL399tsVtp1//vkyDEP/+te/Kmxr0aKFevToccry2rRpk6ZOnart27efsvuoyuOPP6533nnntN/v6fLBBx/8YhuVX3JuJ1JWVqbBgwdrz549evbZZ/X6668rOTm5rtM6ZXJzczV16tRaN5Go6IUXXjhlTfWqVas0ePBgtWjRQjExMerRo4dWrlx5Su7L6WiwHO7SSy+VJH366ach8f3792vDhg3yeDz67LPPQrb98MMP+uGHH6zfPRU2bdqkadOmVbvBeuihh1RcXGzLfZ9JDdaWLVv05z//uUa/88EHH2jatGk1+p3k5GQVFxfr5ptvrtHv1dTxcisuLtZDDz10Su+/Nr7//nvt2LFD9957r8aMGaObbrpJjRo1qtUxT9fjfjJyc3M1bdo0GqxT4FQ2WDfeeKN2796te++9V4899ph++ukn9e/fX99+++0puT8n89R1AqhbSUlJSklJqdBgZWVlyTRNDR48uMK28tunssGqKY/HI4/HeS9nn893So/v9/sVDAbl9XoVGRl5Su/rROr6/k9k165dkqTY2FjbjmkYRrXqPnDggOrVq2fb/R5P+WsCvww1fe7/8Y9/6OKLL7ZuDxgwQOeee67++c9/6re//e2pSNGxGMGCLr30Un311VchI0CfffaZOnTooAEDBmj16tUhJ9TPPvtMhmHokksuqXCsd955Rx07dpTP51OHDh20ZMmSkO07duzQ3XffrXPPPVdRUVFq3LixBg8eHDJSNXv2bA0ePFiS1Lt3bxmGIcMwtGLFiiprqGx+UmZmpi699FLFxsYqJiZG5557rh588MHjPhaGYejAgQOaM2eOdb/HznEqLCzUqFGjFBsbq4YNG+qWW27RwYMHKxzrjTfeULdu3RQVFaW4uDgNGzZMP/zww3Hvv9ynn36qiy66SJGRkWrdurVefvnlSvc7dg5WWVmZpk2bprZt2yoyMlKNGzfWpZdeqszMTEmH5009//zzVq3lP9KR+T5/+MMfNHPmTLVu3Vo+n0+bNm067lygrVu3Ki0tTfXq1VNSUpKmT58u0zSt7StWrKj0+Tv2mMfLrTx27MeHX331lQYMGKAGDRooJiZGffr00erVq0P2mT17tgzD0GeffaZJkyYpPj5e9erV08CBA1VQUFD5E3CM5cuX67LLLlO9evUUGxura6+9Vps3b7a2jxo1SpdffrkkafDgwTIMQ7169aryeHv27NG9996rTp06KSYmRg0aNNCAAQP09ddfH/cxKr+vmJgYff/997rqqqtUv3593XjjjZKOzGFas2aNevTooaioKKWkpOill16qkMOuXbt02223KTExUZGRkTr//PM1Z86cSu//2NfECy+8oIsuukiSdMstt1jPVXme3333nQYNGqSmTZsqMjJSzZs317Bhw7Rv375qPd7Hy7+oqEj16tXT//t//6/C7/34449yu92aMWPGcY8fDAb1xz/+UZ06dVJkZKTi4+PVv39//ec//7H28fv9euSRR6yaW7ZsqQcffFAlJSUhx6pqbuCxf5vVfR22bNlSGzdu1MqVK63Htfy1VH6MlStX6u6771ZCQoKaN2+uf/3rX1VO9Zg3b54Mw1BWVpYkhTRX0pE3LqWlpcd9zFBzznvLjwouvfRSvf766/r888+tP+TPPvtMPXr0UI8ePbRv3z5t2LBBnTt3tradd955aty4cchxPv30U7311lu6++67Vb9+fT333HMaNGiQcnJyrH2//PJLrVq1SsOGDVPz5s21fft2vfjii+rVq5c2bdqk6Oho9ezZUxMmTNBzzz2nBx98UO3atZMk67/VsXHjRl199dXq3Lmzpk+fLp/Pp+zs7Aofdx7r9ddf1+jRo/WrX/1KY8aMkSS1bt06ZJ8hQ4YoJSVFM2bM0Nq1a/Xqq68qISFBTzzxhLXPY489pt/97ncaMmSIRo8erYKCAs2aNUs9e/bUV199ddxRjm+++Ub9+vVTfHy8pk6dKr/fr4cffliJiYknrHvq1KmaMWOGVcP+/fv1n//8R2vXrtWVV16pO+64Q7m5ucrMzNTrr79e6TFee+01HTp0SGPGjJHP51NcXFyVIxaBQED9+/dX9+7d9eSTT2rJkiV6+OGH5ff7NX369BPme7Tq5Ha0jRs36rLLLlODBg10//33KyIiQi+//LJ69eqllStXVviHZPz48WrUqJEefvhhbd++XTNnztS4ceM0f/78497Pxx9/rAEDBqhVq1aaOnWqiouLNWvWLF1yySVau3atWrZsqTvuuENnnXWWHn/8cU2YMEEXXXTRcZ+vrVu36p133tHgwYOVkpKinTt36uWXX9bll1+uTZs2KSkp6bg5+f1+paWl6dJLL9Uf/vAHRUdHW9v27t2rq666SkOGDNENN9ygBQsW6K677pLX69Wtt94q6fDHrb169VJ2drbGjRunlJQULVy4UKNGjVJhYWGF5uXY18TAgQP1888/KyMjQ2PGjNFll10mSerRo4dKS0uVlpamkpISjR8/Xk2bNtX//vc/LVq0SIWFhWrYsOFxaztR/jExMRo4cKDmz5+vZ555Rm632/rdv//97zJN02o4q3Lbbbdp9uzZGjBggEaPHi2/369///vfWr16tS688EJJ0ujRozVnzhxdf/31mjx5sj7//HPNmDFDmzdvrrSRqa4TvQ5nzpyp8ePHKyYmxhpROva1dPfddys+Pl4ZGRk6cOCAevXqpbPPPltz587VwIEDQ/adO3euWrdurdTU1Aq5BINBTZ48WT6f74SPGU6CCcfbuHGjKcl85JFHTNM0zbKyMrNevXrmnDlzTNM0zcTERPP55583TdM09+/fb7rdbvP2228POYYk0+v1mtnZ2Vbs66+/NiWZs2bNsmIHDx6scP9ZWVmmJPNvf/ubFVu4cKEpyfzXv/5VrRoefvhh8+iX87PPPmtKMgsKCqr1+0erV6+eOXLkyCrv49Zbbw2JDxw40GzcuLF1e/v27abb7TYfe+yxkP2++eYb0+PxVIgf67rrrjMjIyPNHTt2WLFNmzaZbrfbPPZPNjk5OSTX888/30xPTz/u8ceOHVvhOKZpmtu2bTMlmQ0aNDB37dpV6bbXXnvNio0cOdKUZI4fP96KBYNBMz093fR6vdZj/69//avS57KyY1aVm2kefo09/PDD1u3rrrvO9Hq95vfff2/FcnNzzfr165s9e/a0Yq+99popyezbt68ZDAat+D333GO63W6zsLCw0vsr16VLFzMhIcHcvXu3Ffv6669Nl8tljhgxwoqV17lw4cLjHs80TfPQoUNmIBAIiW3bts30+Xzm9OnTQ2JVPe6/+c1vKhz38ssvNyWZTz/9tBUrKSmxaigtLTVN0zRnzpxpSjLfeOMNa7/S0lIzNTXVjImJMffv3x9y/5W9Jr788ssKuZmmaX711VfVfhxONv+lS5eakswPP/ww5Pc7d+5sXn755ce9j+XLl5uSzAkTJlTYVv76WLdunSnJHD16dMj2e++915RkLl++3Iod+7osd+zfZk1ehx06dKi0jvJjXHrppabf7w/Z9sADD5g+ny/kOLt27TI9Hk+l+ZmmaY4ZM8Y0DMOcN29epdtRO3xECLVr106NGze25lZ9/fXXOnDggLVKsEePHtbIT1ZWlgKBQKXzr/r27Rsy2tO5c2c1aNBAW7dutWJRUVHW/5eVlWn37t1q06aNYmNjtXbtWttqKh8hevfdd22fL3LnnXeG3L7sssu0e/du7d+/X5L01ltvKRgMasiQIfrpp5+sn6ZNm6pt27aVrsosFwgEtHTpUl133XVq0aKFFW/Xrp3S0tJOmFtsbKw2btyo77777iSrkwYNGqT4+Phq73/05TnKL9dRWlqqjz/++KRzOJFAIKCPPvpI1113nVq1amXFmzVrpuHDh+vTTz+1no9yY8aMCfnI8bLLLlMgENCOHTuqvJ+8vDytW7dOo0aNUlxcnBXv3LmzrrzySn3wwQcnlb/P55PL5bJq2b17t/UxdnX/Du66665K4x6PR3fccYd12+v16o477tCuXbu0Zs0aSYcXEzRt2lQ33HCDtV9ERIQmTJigoqKiCqvKavKaKB+hWrp0aaUfnZ9IdfLv27evkpKSNHfuXGu/DRs2aP369brpppuOe/x//vOfMgxDDz/8cIVt5a+P8ud10qRJIdsnT54sSVq8eHGN6yp3Mq/DY91+++0hI3eSNGLECJWUlOjNN9+0YvPnz5ff76/0MfnLX/6iV155RU8//XTI6wD2ocGCDMNQjx49rLlWn332mRISEtSmTRtJoQ1W+X8ra7CObgjKNWrUSHv37rVuFxcXKyMjQ2effbZ8Pp+aNGmi+Ph4FRYWVnt+RnUMHTpUl1xyiUaPHq3ExEQNGzZMCxYssKXZOrbO8pVi5XV+9913Mk1Tbdu2VXx8fMjP5s2brcnQlSkoKFBxcbHatm1bYdu55557wtymT5+uwsJCnXPOOerUqZPuu+8+rV+/viblKSUlpdr7ulyukAZHks455xxJOqWX2CgoKNDBgwcrfUzatWunYDBYYb7biZ63ypT/o1fV/fz00086cOBAjfMPBoN69tln1bZt25C/g/Xr11fr78Dj8ah58+aVbktKSqow6fnY52THjh1q27at1eQdXVP59qPV5DWRkpKiSZMm6dVXX1WTJk2Ulpam559/vtp/39XJ3+Vy6cYbb9Q777xjNXFz585VZGSkNX+zKt9//72SkpJCGuZj7dixQy6XyzoHlmvatKliY2Nr1Awd62Reh8eq7Pk477zzdNFFF4U0nXPnzlX37t0r1CEdng5xzjnn6J577qn2/aJmaLAg6XDDtG/fPn3zzTfW/KtyPXr00I4dO/S///1Pn376qZKSkir8oyqpwjuqcuZRE57Hjx+vxx57TEOGDNGCBQv00UcfKTMzU40bN7Z1pCkqKkqffPKJPv74Y918881av369hg4dqiuvvFKBQKBWxz5RncFgUIZhaMmSJcrMzKzwU9WEdTv07NlT33//vf7617+qY8eOevXVV9W1a1e9+uqr1T7G0aOMdqjqArC1fR5qqjqvz9Pl8ccf16RJk9SzZ0+98cYbWrp0qTIzM9WhQ4dq/R0cPQJ2OtT0NfH0009r/fr1evDBB1VcXKwJEyaoQ4cO+vHHH23LacSIESoqKtI777wj0zQ1b948XX311Sec41UTtbl4cVWvbzteh1U9HyNGjNDKlSv1448/6vvvv9fq1aurHNHbvXu3mjVrVu37RM0xyR2SQq+H9dlnn2nixInWtm7dusnn82nFihX6/PPPddVVV530/bz55psaOXKknn76aSt26NAhFRYWhuxnx1XZXS6X+vTpoz59+uiZZ57R448/rt/+9rf617/+pb59+1b5e7W979atW8s0TaWkpFjvvKsrPj5eUVFRlX7Et2XLlmodIy4uTrfccotuueUWFRUVqWfPnpo6dapGjx4tyZ7HtlwwGNTWrVtD6vzvf/8r6fBqKOnIO/Rjn+PKRgGqm1t8fLyio6MrfUy+/fZbuVwunX322dU61vGUXyi0qvtp0qTJSV0e4c0331Tv3r31l7/8JSReWFioJk2anFyy/yc3N7fC0v1jn5Pk5GStX79ewWAwpFErvxZSdS6QeqLnqlOnTurUqZMeeughrVq1SpdccoleeuklPfroo7XOX5I6duyoCy64QHPnzlXz5s2Vk5OjWbNmnTDv1q1ba+nSpdqzZ0+Vo1jJyckKBoP67rvvQhbX7Ny5U4WFhSGPT6NGjSq8tktLS5WXl3fCXKpysn+jw4YN06RJk/T3v/9dxcXFioiI0NChQyvd94Ybbjhtl/ZwKkawIEm68MILFRkZqblz5+p///tfyAiWz+dT165d9fzzz+vAgQO1uv6V2+2u8E5t1qxZFd7tlf/hH3viqq49e/ZUiHXp0kWSKiyzPla9evVO+n4l6de//rXcbremTZtWoVbTNLV79+4qf9ftdistLU3vvPOOcnJyrPjmzZu1dOnSE973sceOiYlRmzZtQmqu7WN7rD/96U/W/5umqT/96U+KiIhQnz59JB3+x8rtduuTTz4J+b0XXnihwrGqm5vb7Va/fv307rvvhnwUuXPnTs2bN0+XXnqpGjRocJIVHdGsWTN16dJFc+bMCclpw4YN+uijj076zUZlfwcLFy7U//73v9qkK+nwCsOjR0lLS0v18ssvKz4+Xt26dZMkXXXVVcrPzw9ZQen3+zVr1izFxMRYl5w4nqqeq/3798vv94fEOnXqJJfLdcK/vermX+7mm2/WRx99pJkzZ6px48YaMGDACY8/aNAgmaZZ6QVty5+T8ud15syZIdufeeYZSVJ6eroVa926dYXX9iuvvFKrEdqTPQc1adJEAwYM0BtvvKG5c+eqf//+VTbsQ4cOrbDiEPZiBAuSDk8kveiii/Tvf/9bPp+vwomsR48e1qhTbRqsq6++Wq+//roaNmyo9u3bKysrSx9//HGFSz506dJFbrdbTzzxhPbt2yefz6crrrhCCQkJ1bqf6dOn65NPPlF6erqSk5O1a9cuvfDCC2revPkJ8+/WrZs+/vhjPfPMM9aFWI9d8n88rVu31qOPPqoHHnhA27dv13XXXaf69etr27ZtevvttzVmzBjde++9Vf7+tGnTtGTJEl122WW6++67rX/4OnTocML5VO3bt1evXr3UrVs3xcXF6T//+Y/efPPNkIno5c/thAkTlJaWJrfbrWHDhlW7vqNFRkZqyZIlGjlypC6++GJ9+OGHWrx4sR588EFrUnTDhg01ePBgzZo1S4ZhqHXr1lq0aFGlc9Fqktujjz5qXevs7rvvlsfj0csvv6ySkhI9+eSTJ1VPZZ566ikNGDBAqampuu2226zLNDRs2PCkv9bn6quv1vTp03XLLbeoR48e+uabbzR37txKP3qvqaSkJD3xxBPavn27zjnnHM2fP1/r1q3TK6+8ooiICEmHJ1q//PLLGjVqlNasWaOWLVvqzTff1GeffaaZM2eqfv36J7yf1q1bKzY2Vi+99JLq16+vevXq6eKLL9bXX3+tcePGafDgwTrnnHPk9/v1+uuvy+12a9CgQbbkX2748OG6//779fbbb+uuu+6qsL0yvXv31s0336znnntO3333nfr3769gMKh///vf6t27t8aNG6fzzz9fI0eO1CuvvKLCwkJdfvnl+uKLLzRnzhxdd9116t27t3W80aNH684779SgQYN05ZVX6uuvv9bSpUtrNRLZrVs3vfjii3r00UfVpk0bJSQk6IorrqjW744YMULXX3+9JOmRRx6pcr8+ffqoZcuWx72+IGqpLpYu4pfpgQceMCWZPXr0qLDtrbfeMiWZ9evXr7A82DQPL1UeO3ZshfixS5X37t1r3nLLLWaTJk3MmJgYMy0tzfz2228r7GeapvnnP//ZbNWqlXV5guNdsuHYyzQsW7bMvPbaa82kpCTT6/WaSUlJ5g033GD+97//PeHj8O2335o9e/Y0o6KiTElWXuX3ceylH8qXTm/bti0k/s9//tO89NJLzXr16pn16tUzzzvvPHPs2LHmli1bTpjDypUrzW7dupler9ds1aqV+dJLL1Wo0TQrPr6PPvqo+atf/cqMjY01o6KizPPOO8987LHHrOXtpmmafr/fHD9+vBkfH28ahmEds3xJ/lNPPVUhn6ouF1CvXj3z+++/N/v162dGR0ebiYmJ5sMPP1zhEgQFBQXmoEGDzOjoaLNRo0bmHXfcYW7YsKHCMavKzTQrXw6/du1aMy0tzYyJiTGjo6PN3r17m6tWrQrZp/z5+fLLL0PiVV0+ojIff/yxeckll5hRUVFmgwYNzGuuucbctGlTpcer7mUaJk+ebDZr1syMiooyL7nkEjMrK8u8/PLLQ5bnH+9xr8zll19udujQwfzPf/5jpqammpGRkWZycrL5pz/9qcK+O3futP4WvV6v2alTpwqXXDjea8I0TfPdd98127dvb3o8HivPrVu3mrfeeqvZunVrMzIy0oyLizN79+5tfvzxxyd8XGqSf7mrrrrKlFTheT8ev99vPvXUU+Z5551ner1eMz4+3hwwYIC5Zs0aa5+ysjJz2rRpZkpKihkREWGeffbZ5gMPPGAeOnQo5FiBQMCcMmWK2aRJEzM6OtpMS0szs7Ozq7xMQ3Veh/n5+WZ6erpZv359U5L1mqjqGEcrKSkxGzVqZDZs2NAsLi6ucr/k5OQTXtICtWOYZh3M8AQA2K5Xr1766aeftGHDhrpO5bQZOHCgvvnmG2VnZ9d1Kr8Ifr9fSUlJuuaaayrM8cPpxRwsAMAZKS8vT4sXL/5Ffhl2XXnnnXdUUFCgESNG1HUqjsccLADAGWXbtm367LPP9OqrryoiIiLkwqRO9fnnn2v9+vV65JFHdMEFF1RroQJOLUawAABnlJUrV+rmm2/Wtm3bNGfOHDVt2rSuU6pzL774ou666y4lJCTob3/7W12nA0nMwQIAALAZI1gAAAA2o8ECAACwGQ0WAACAzWrdYL344ovq3LmzGjRooAYNGig1NVUffvihtb1Xr14yDCPk58477ww5Rk5OjtLT0xUdHa2EhATdd999Fb5qYcWKFeratat8Pp/atGmj2bNn1zZ1AFAwGNTOnTtt/bJxAKj1ZRqaN2+u3//+92rbtq1M09ScOXN07bXX6quvvlKHDh0kSbfffrumT59u/U50dLT1/4FAQOnp6WratKlWrVqlvLw8jRgxQhEREXr88cclHV6Sm56erjvvvFNz587VsmXLNHr0aDVr1kxpaWm1LQGAg5mmqYKCglp/yTIAHO2UrCKMi4vTU089pdtuu029evVSly5dKnxpZrkPP/xQV199tXJzc5WYmChJeumllzRlyhQVFBTI6/VqypQpWrx4ccjViYcNG6bCwkItWbLE7vQBOIhpmgoGg3K5XDIMo67TARAmbJ2DFQgE9I9//EMHDhxQamqqFZ87d66aNGmijh076oEHHtDBgwetbVlZWerUqZPVXElSWlqa9u/fr40bN1r79O3bN+S+0tLSlJWVZWf6AByqrKysrlMAEGZsuZL7N998o9TUVB06dEgxMTF6++231b59e0mHv+08OTlZSUlJWr9+vaZMmaItW7borbfekiTl5+eHNFeSrNv5+fnH3Wf//v0qLi5WVFRUpXmVlJSopKQkJBYRESGv12vdNgxDLpdLwWBQRw/mnSgeCARCjlv+7reyuKQK8zuqirvdbusd9bHxmuZITdRETSeuKRAIKDs7W+eee64iIiLCoqba5k5N1ERNbmtk+2TZ0mCde+65Wrdunfbt26c333xTI0eO1MqVK9W+fXuNGTPG2q9Tp05q1qyZ+vTpo++//16tW7e24+6rNGPGDE2bNi0kNnnyZI0aNcq63ahRI5111lnKy8vT3r17rXh8fLwSExOVk5OjoqIiK56UlKS4uDht3bo1pHlLTk5W/fr1tWXLlpAnqk2bNoqIiNDmzZtD8mjXrp3KyspCvqDU5XKpffv2Kioq0o4dO6y4z+dT27ZtVVhYqNzcXCseExOjli1bqqCgQAUFBdRETdRUi5p+/PFHpaSkhFVN4fg8URM1nc6a4uLidLJOyRysvn37qnXr1nr55ZcrbDtw4IBiYmK0ZMkSpaWlKSMjQ++9957WrVtn7bNt2za1atVKa9eu1QUXXKCePXuqa9euIfO4XnvtNU2cOFH79u2rMg9GsKiJmqipOiNY//3vfxnBoiZqoqYKNdX5CNaxgsFghcamXHkj1axZM0lSamqqHnvsMe3atUsJCQmSpMzMTDVo0MD6mDE1NVUffPBByHEyMzND5nlVxufzyefzVSvnqh7EquJut/uUxQ3DqDRe0xypiZpqGndqTS6Xy7odLjWdijg1URM1VV+tR7AeeOABDRgwQC1atNDPP/+sefPm6YknntDSpUvVqlUrzZs3T1dddZUaN26s9evX65577lHz5s21cuVKSYcnxnfp0kVJSUl68sknlZ+fr5tvvlmjR48OuUxDx44dNXbsWN16661avny5JkyYoMWLF3OZBgAA8ItT6wbrtttu07Jly5SXl6eGDRuqc+fOmjJliq688kr98MMPuummm7RhwwYdOHBAZ599tgYOHKiHHnpIDRo0sI6xY8cO3XXXXVqxYoXq1aunkSNH6ve//708niMDbCtWrNA999yjTZs2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VP2aRr79o8pfnuFSkxR+z9PpqklS2J73qKlmNblcJz8OZWuDNXbsWG3YsEGffvqpnYc9aTNmzNC0adNCYpMnT9aoUaOs240aNdJZZ52lvLw87d2714rHx8crMTFROTk5KioqsuJJSUmKi4vT1q1bQ5q35ORk1a9fX1u2bAl5otq0aaOIiAht3rw5JI927dqprKxM2dnZVszlcql9+/YqKirSjh07rLjP51Pbtm1VWFio3NxcKx4TE6OWLVuqoKBABQUF1FTDmhYObWHF734/VwUH/SExSRo8P0fx0R69cE2SFTtYGtSQBT+oS9NITe9zpOnfUViqsYvydEWrGE3o3tiKr80tVsbyXRrSsaGGd4614kuzf9as1Xt0x0WNlNamvhWft75Q89bv028vj1fXpCNvHJ5bvVsfZRfp6f5NlRx75E1CxrKdWpt3SHMGNle098jJgJqoiZpOriZJYXveo6aa1VT+adzJsG0O1rhx4/Tuu+/qk08+UUpKihVfvny5+vTpo71794aMYiUnJ2vixIm65557lJGRoffee0/r1q2ztm/btk2tWrXS2rVrdcEFF6hnz57q2rWrZs6cae3z2muvaeLEidbHksdiBIuajldTx6lHFkic6e+4w3EU4XTVFOUx9LdBZ+umN39Q4aFgWNRULpyep9NZ09YZ6WF73qOmM2gEyzRNjR8/Xm+//bZWrFgR0lxJUrdu3RQREaFly5Zp0KBBkg6/M8jJyVFqaqokKTU1VY899ph27dqlhIQESVJmZqYaNGig9u3bW/t88MEHIcfOzMy0jlEZn88nn89XrTqqehCrirvd7lMWNwyj0nhNc6Sm4+dY2YTmymJBs2Zxf1DyB6sfLw2YUqBCWCVVxA/5K39PVNUEbWqqXk0lAbPSeLkzsaYTxamp6prC9bxX2zg1VV+tG6yxY8dq3rx5evfdd1W/fn1rzlTDhg0VFRWlhg0b6rbbbtOkSZMUFxenBg0aaPz48UpNTVX37t0lSf369VP79u11880368knn1R+fr4eeughjR071mqQ7rzzTv3pT3/S/fffr1tvvVXLly/XggULtHgxK8EAAMAvS61XEb744ovat2+fevXqpWbNmlk/8+fPt/Z59tlndfXVV2vQoEHq2bOnmjZtqrfeesva7na7tWjRIrndbqWmpuqmm27SiBEjNH36dGuflJQULV68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", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    country_counts = data['country'].value_counts()\n    country_counts.plot(kind='bar')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    \n    plt.title(\"What is the distribution of airports by country?\", wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    airport_types = data['type'].value_counts()\n    plt.pie(airport_types, labels=airport_types.index, autopct='%1.1f%%')\n    plt.title(\"What is the distribution of airports by type?\", wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'type'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'type'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'type'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['elevation'])\n    plt.xlabel('Elevation')\n    plt.ylabel('Number of Airports')\n    plt.title('What is the distribution of airports by elevation?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'elevation'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'elevation'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'elevation'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    municipality_counts = data['municipality'].value_counts()\n    municipality_counts.plot(kind='bar')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    plt.title(\"What is the distribution of airports by municipality?\", wrap=True)\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'municipality'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'municipality'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'municipality'\n"}}], [{"spec": null, "status": true, "raster": "iVBORw0KGgoAAAANSUhEUgAAAoAAAAHgCAYAAAA10dzkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAIyUlEQVR4nO3WMQEAIAzAMMC/5+ECjiYKenbPzCwAADLO7wAAAN4ygAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIMIABAjAEEAIgxgAAAMQYQACDGAAIAxBhAAIAYAwgAEGMAAQBiDCAAQIwBBACIMYAAADEGEAAgxgACAMQYQACAGAMIABBjAAEAYgwgAECMAQQAiDGAAAAxBhAAIMYAAgDEGEAAgBgDCAAQYwABAGIuJnkHvKensmIAAAAASUVORK5CYII=", "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    # Load US states shapefile\n    states = gpd.read_file('https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json')\n\n    # Count airports by state\n    airport_counts = data.groupby('state').size().reset_index(name='count')\n\n    # Merge airport counts with states shapefile\n    merged_data = states.merge(airport_counts, left_on='name', right_on='state')\n\n    # Create choropleth map\n    plt.figure(figsize=(6, 6))\n    merged_data.plot(column='count', cmap='coolwarm', legend=True, edgecolor='black', linewidth=0.5)\n    plt.title('What is the distribution of airports by state?', wrap=True)\n    plt.axis('off')\n\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": null}]]}