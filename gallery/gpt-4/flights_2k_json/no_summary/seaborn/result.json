{"summary": {"file_name": "flights-2k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "Histogram of departure_delay", "rationale": "This tells us how many flights are delayed and by how much time. It can help us identify patterns and trends in flight delays."}, {"index": 1, "question": "What is the relationship between departure delay and arrival delay?", "visualization": "Scatter plot of departure_delay vs arrival_delay", "rationale": "This helps us understand if there is a correlation between departure delay and arrival delay. It can help us identify if a delay in departure leads to a delay in arrival."}, {"index": 2, "question": "What is the distribution of flight distances?", "visualization": "Histogram of distance", "rationale": "This tells us how far the flights are traveling. It can help us identify if there are any outliers or if most flights are traveling similar distances."}, {"index": 3, "question": "What is the distribution of flight cancellations?", "visualization": "Bar chart of cancelled vs not cancelled flights", "rationale": "This tells us how many flights were cancelled and how many were not. It can help us identify if there are any patterns or reasons for flight cancellations."}, {"index": 4, "question": "What is the distribution of airlines in the dataset?", "visualization": "Pie chart of airline names", "rationale": "This tells us which airlines are represented in the dataset and how many flights each airline has. It can help us identify if there are any airlines that are overrepresented or underrepresented in the dataset."}], "code": [["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='departure_delay', bins=20)\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.scatterplot(data=data, x='departure_delay', y='arrival_delay')\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title('What is the relationship between departure delay and arrival delay?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='distance')\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import seaborn as sns\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    ax = sns.countplot(x='cancelled', data=data)\n    ax.set_xticklabels(['Not Cancelled', 'Cancelled'])\n    if len(plt.xticks()[0]) > 20:\n        ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    airline_counts = data['airline'].value_counts()\n    plt.pie(airline_counts, labels=airline_counts.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of airlines in the dataset?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"]], "filename": "flights-2k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='departure_delay', bins=20)\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `departure_delay` for parameter `x`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 1430, in histplot\n    p = _DistributionPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 111, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `departure_delay` for parameter `x`\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.scatterplot(data=data, x='departure_delay', y='arrival_delay')\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title('What is the relationship between departure delay and arrival delay?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `departure_delay` for parameter `x`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 808, in scatterplot\n    p = _ScatterPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 587, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `departure_delay` for parameter `x`\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='distance')\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    ax = sns.countplot(x='cancelled', data=data)\n    ax.set_xticklabels(['Not Cancelled', 'Cancelled'])\n    if len(plt.xticks()[0]) > 20:\n        ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret input 'cancelled'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/categorical.py\", line 3598, in countplot\n    plotter = _CountPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/categorical.py\", line 1584, in __init__\n    self.establish_variables(x, y, hue, data, orient,\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/categorical.py\", line 153, in establish_variables\n    raise ValueError(err)\nValueError: Could not interpret input 'cancelled'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    airline_counts = data['airline'].value_counts()\n    plt.pie(airline_counts, labels=airline_counts.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of airlines in the dataset?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'airline'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'airline'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'airline'\n"}}]]}