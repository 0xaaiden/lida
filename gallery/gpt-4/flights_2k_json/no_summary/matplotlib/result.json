{"summary": {"file_name": "flights-2k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "Histogram of departure_delay", "rationale": "This tells us how many flights are delayed and by how much time. It can help us identify patterns and trends in flight delays."}, {"index": 1, "question": "What is the relationship between departure delay and arrival delay?", "visualization": "Scatter plot of departure_delay vs arrival_delay", "rationale": "This helps us understand if there is a correlation between departure delay and arrival delay. It can help us identify if a delay in departure leads to a delay in arrival."}, {"index": 2, "question": "What is the distribution of flight distances?", "visualization": "Histogram of distance", "rationale": "This tells us how far the flights are traveling. It can help us identify if there are any outliers or if most flights are traveling similar distances."}, {"index": 3, "question": "What is the distribution of flight cancellations?", "visualization": "Bar chart of cancelled vs not cancelled flights", "rationale": "This tells us how many flights were cancelled and how many were not. It can help us identify if there are any patterns or reasons for flight cancellations."}, {"index": 4, "question": "What is the distribution of airlines in the dataset?", "visualization": "Pie chart of airline names", "rationale": "This tells us which airlines are represented in the dataset and how many flights each airline has. It can help us identify if there are any airlines that are overrepresented or underrepresented in the dataset."}], "code": [["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['departure_delay'], bins=50, edgecolor='black')\n    plt.xlabel('Departure Delay (minutes)')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight delays?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.scatter(data['departure_delay'], data['arrival_delay'])\n    plt.xlabel('Departure Delay')\n    plt.ylabel('Arrival Delay')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.title('What is the relationship between departure delay and arrival delay?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['distance'], bins=20)\n    plt.xlabel('Distance')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight distances?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    cancelled_counts = data['cancelled'].value_counts()\n    cancelled_counts.plot(kind='bar')\n    plt.xlabel('Cancelled')\n    plt.ylabel('Number of Flights')\n    plt.xticks(rotation=0)\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    airline_counts = data['airline'].value_counts()\n    plt.pie(airline_counts, labels=airline_counts.index, autopct='%1.1f%%')\n    plt.title(\"What is the distribution of airlines in the dataset?\", wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"]], "filename": "flights-2k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['departure_delay'], bins=50, edgecolor='black')\n    plt.xlabel('Departure Delay (minutes)')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight delays?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'departure_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'departure_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'departure_delay'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.scatter(data['departure_delay'], data['arrival_delay'])\n    plt.xlabel('Departure Delay')\n    plt.ylabel('Arrival Delay')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.title('What is the relationship between departure delay and arrival delay?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'departure_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'departure_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'departure_delay'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['distance'], bins=20)\n    plt.xlabel('Distance')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight distances?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    cancelled_counts = data['cancelled'].value_counts()\n    cancelled_counts.plot(kind='bar')\n    plt.xlabel('Cancelled')\n    plt.ylabel('Number of Flights')\n    plt.xticks(rotation=0)\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'cancelled'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'cancelled'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'cancelled'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    airline_counts = data['airline'].value_counts()\n    plt.pie(airline_counts, labels=airline_counts.index, autopct='%1.1f%%')\n    plt.title(\"What is the distribution of airlines in the dataset?\", wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'airline'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'airline'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'airline'\n"}}]]}