{"summary": {"file_name": "flights-20k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "Histogram of departure_delay", "rationale": "This tells us how many flights are delayed and by how much time. It can help us identify patterns and trends in flight delays."}, {"index": 1, "question": "What is the average flight time for different airlines?", "visualization": "Bar chart of airline vs. average flight time", "rationale": "This can help us compare the performance of different airlines in terms of flight duration. It can also help us identify which airlines have longer or shorter flights."}, {"index": 2, "question": "What is the busiest time of day for flights?", "visualization": "Line chart of time vs. number of flights", "rationale": "This can help us identify the peak hours for flight departures and arrivals. It can also help us plan our travel accordingly."}, {"index": 3, "question": "What is the distribution of flight distances?", "visualization": "Histogram of distance", "rationale": "This tells us how far the flights are traveling. It can help us identify which routes are more popular and which airlines are flying longer distances."}, {"index": 4, "question": "What is the relationship between flight distance and arrival delay?", "visualization": "Scatter plot of distance vs. arrival_delay", "rationale": "This can help us identify if there is a correlation between flight distance and arrival delay. It can also help us identify outliers and potential causes of delay."}], "code": [["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='departure_delay', bins=50)\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    avg_flight_time = data.groupby('airline')['flight_time'].mean().reset_index()\n    chart = sns.barplot(x='airline', y='flight_time', data=avg_flight_time)\n    plt.title('What is the average flight time for different airlines?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        chart.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['time'] = pd.to_datetime(data['time'], errors='ignore')\n    data['hour'] = data['time'].dt.hour\n    hourly_flights = data.groupby('hour').size().reset_index(name='num_flights')\n    \n    sns.lineplot(x='hour', y='num_flights', data=hourly_flights)\n    \n    plt.title('What is the busiest time of day for flights?', wrap=True)\n    plt.xticks(rotation=45)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='distance', bins=20)\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.scatterplot(data=data, x='distance', y='arrival_delay')\n    plt.title('What is the relationship between flight distance and arrival delay?', wrap=True)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"]], "filename": "flights-20k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='departure_delay', bins=50)\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `departure_delay` for parameter `x`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 1430, in histplot\n    p = _DistributionPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 111, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `departure_delay` for parameter `x`\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    avg_flight_time = data.groupby('airline')['flight_time'].mean().reset_index()\n    chart = sns.barplot(x='airline', y='flight_time', data=avg_flight_time)\n    plt.title('What is the average flight time for different airlines?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        chart.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'airline'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 7718, in groupby\n    return DataFrameGroupBy(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 882, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 882, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'airline'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['time'] = pd.to_datetime(data['time'], errors='ignore')\n    data['hour'] = data['time'].dt.hour\n    hourly_flights = data.groupby('hour').size().reset_index(name='num_flights')\n    \n    sns.lineplot(x='hour', y='num_flights', data=hourly_flights)\n    \n    plt.title('What is the busiest time of day for flights?', wrap=True)\n    plt.xticks(rotation=45)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'time'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'time'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 9, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'time'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='distance', bins=20)\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.scatterplot(data=data, x='distance', y='arrival_delay')\n    plt.title('What is the relationship between flight distance and arrival delay?', wrap=True)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `arrival_delay` for parameter `y`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 808, in scatterplot\n    p = _ScatterPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 587, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `arrival_delay` for parameter `y`\n"}}]]}