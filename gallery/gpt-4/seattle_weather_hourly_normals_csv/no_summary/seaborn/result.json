{"summary": {"file_name": "seattle-weather-hourly-normals.csv"}, "goals": [{"index": 0, "question": "What is the average temperature distribution in Seattle throughout the year?", "visualization": "Line chart of average temperature by month", "rationale": "This visualization will help us understand the seasonal temperature changes in Seattle and identify the hottest and coldest months of the year."}, {"index": 1, "question": "What is the distribution of precipitation in Seattle throughout the year?", "visualization": "Line chart of average precipitation by month", "rationale": "This visualization will help us understand the seasonal precipitation changes in Seattle and identify the wettest and driest months of the year."}, {"index": 2, "question": "What is the relationship between temperature and humidity in Seattle?", "visualization": "Scatter plot of temperature vs humidity", "rationale": "This visualization will help us understand the correlation between temperature and humidity in Seattle and identify any patterns or trends."}, {"index": 3, "question": "What is the distribution of wind speed in Seattle throughout the year?", "visualization": "Line chart of average wind speed by month", "rationale": "This visualization will help us understand the seasonal wind speed changes in Seattle and identify the windiest and calmest months of the year."}, {"index": 4, "question": "What is the distribution of cloud cover in Seattle throughout the year?", "visualization": "Line chart of average cloud cover by month", "rationale": "This visualization will help us understand the seasonal cloud cover changes in Seattle and identify the cloudiest and clearest months of the year."}], "code": [["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['date'] = pd.to_datetime(data['date'], errors='ignore')\n    data['month'] = data['date'].dt.month\n    monthly_avg_temp = data.groupby('month')['temperature'].mean()\n    \n    sns.lineplot(x=monthly_avg_temp.index, y=monthly_avg_temp.values)\n    \n    plt.xlabel('Month')\n    plt.ylabel('Average Temperature')\n    plt.title('What is the average temperature distribution in Seattle throughout the year?', wrap=True)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['DATE'] = pd.to_datetime(data['DATE'], errors='ignore')\n    data['MONTH'] = data['DATE'].dt.month\n    monthly_precipitation = data.groupby('MONTH')['PRCP'].mean()\n    \n    sns.lineplot(x=monthly_precipitation.index, y=monthly_precipitation.values)\n    \n    plt.xlabel('Month')\n    plt.ylabel('Average Precipitation')\n    plt.title('What is the distribution of precipitation in Seattle throughout the year?', wrap=True)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import seaborn as sns\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.scatterplot(x='temperature', y='humidity', data=data)\n    plt.title('What is the relationship between temperature and humidity in Seattle?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['date'] = pd.to_datetime(data['date'], errors='ignore')\n    data['month'] = data['date'].dt.month\n    monthly_wind_speed = data.groupby('month')['wind_speed'].mean()\n    \n    sns.lineplot(x=monthly_wind_speed.index, y=monthly_wind_speed.values)\n    \n    plt.xlabel('Month')\n    plt.ylabel('Average Wind Speed')\n    plt.title('What is the distribution of wind speed in Seattle throughout the year?', wrap=True)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['DATE'] = pd.to_datetime(data['DATE'], errors='ignore')\n    data['MONTH'] = data['DATE'].dt.month\n    monthly_avg_cloud_cover = data.groupby('MONTH')['CLOUD_COVER'].mean()\n    \n    sns.lineplot(x=monthly_avg_cloud_cover.index, y=monthly_avg_cloud_cover.values)\n    \n    plt.title('What is the distribution of cloud cover in Seattle throughout the year?', wrap=True)\n    plt.xlabel('Month')\n    plt.ylabel('Average Cloud Cover')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"]], "filename": "seattle-weather-hourly-normals.csv", "chart": [[{"spec": null, "status": true, "raster": "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", "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['date'] = pd.to_datetime(data['date'], errors='ignore')\n    data['month'] = data['date'].dt.month\n    monthly_avg_temp = data.groupby('month')['temperature'].mean()\n    \n    sns.lineplot(x=monthly_avg_temp.index, y=monthly_avg_temp.values)\n    \n    plt.xlabel('Month')\n    plt.ylabel('Average Temperature')\n    plt.title('What is the average temperature distribution in Seattle throughout the year?', wrap=True)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['DATE'] = pd.to_datetime(data['DATE'], errors='ignore')\n    data['MONTH'] = data['DATE'].dt.month\n    monthly_precipitation = data.groupby('MONTH')['PRCP'].mean()\n    \n    sns.lineplot(x=monthly_precipitation.index, y=monthly_precipitation.values)\n    \n    plt.xlabel('Month')\n    plt.ylabel('Average Precipitation')\n    plt.title('What is the distribution of precipitation in Seattle throughout the year?', wrap=True)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'DATE'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'DATE'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 9, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'DATE'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.scatterplot(x='temperature', y='humidity', data=data)\n    plt.title('What is the relationship between temperature and humidity in Seattle?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `humidity` for parameter `y`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 808, in scatterplot\n    p = _ScatterPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 587, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `humidity` for parameter `y`\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['date'] = pd.to_datetime(data['date'], errors='ignore')\n    data['month'] = data['date'].dt.month\n    monthly_wind_speed = data.groupby('month')['wind_speed'].mean()\n    \n    sns.lineplot(x=monthly_wind_speed.index, y=monthly_wind_speed.values)\n    \n    plt.xlabel('Month')\n    plt.ylabel('Average Wind Speed')\n    plt.title('What is the distribution of wind speed in Seattle throughout the year?', wrap=True)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'Column not found: wind_speed'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 11, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/generic.py\", line 1338, in __getitem__\n    return super().__getitem__(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/base.py\", line 250, in __getitem__\n    raise KeyError(f\"Column not found: {key}\")\nKeyError: 'Column not found: wind_speed'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['DATE'] = pd.to_datetime(data['DATE'], errors='ignore')\n    data['MONTH'] = data['DATE'].dt.month\n    monthly_avg_cloud_cover = data.groupby('MONTH')['CLOUD_COVER'].mean()\n    \n    sns.lineplot(x=monthly_avg_cloud_cover.index, y=monthly_avg_cloud_cover.values)\n    \n    plt.title('What is the distribution of cloud cover in Seattle throughout the year?', wrap=True)\n    plt.xlabel('Month')\n    plt.ylabel('Average Cloud Cover')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'DATE'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'DATE'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 9, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'DATE'\n"}}]]}