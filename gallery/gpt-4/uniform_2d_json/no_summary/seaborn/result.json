{"summary": {"file_name": "uniform-2d.json"}, "goals": [{"index": 0, "question": "What is the distribution of X and Y?", "visualization": "Scatter plot of X and Y", "rationale": "This visualization helps to identify the pattern of distribution of X and Y. It can help to identify any outliers or clusters in the data."}, {"index": 1, "question": "What is the range of values for X and Y?", "visualization": "Box plot of X and Y", "rationale": "Box plot helps to identify the range of values for X and Y. It also helps to identify any outliers in the data."}, {"index": 2, "question": "What is the correlation between X and Y?", "visualization": "Scatter plot of X and Y with a regression line", "rationale": "This visualization helps to identify the strength and direction of the correlation between X and Y. It can help to identify any linear relationship between the two variables."}, {"index": 3, "question": "What is the distribution of X?", "visualization": "Histogram of X", "rationale": "This visualization helps to identify the frequency distribution of X. It can help to identify any skewness or kurtosis in the data."}, {"index": 4, "question": "What is the distribution of Y?", "visualization": "Histogram of Y", "rationale": "This visualization helps to identify the frequency distribution of Y. It can help to identify any skewness or kurtosis in the data."}], "code": [["import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.scatterplot(data=data, x='X', y='Y')\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title('What is the distribution of X and Y?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import seaborn as sns\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.boxplot(data=data)\n    plt.title(\"What is the range of values for X and Y?\", wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.regplot(x='X', y='Y', data=data)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title('What is the correlation between X and Y?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='X')\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title('What is the distribution of X?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import seaborn as sns\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data['Y'])\n    plt.title('What is the distribution of Y?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)\nchart.show()"]], "filename": "uniform-2d.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.scatterplot(data=data, x='X', y='Y')\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title('What is the distribution of X and Y?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `X` for parameter `x`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 808, in scatterplot\n    p = _ScatterPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 587, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `X` for parameter `x`\n"}}], [{"spec": null, "status": true, "raster": "iVBORw0KGgoAAAANSUhEUgAAAlgAAAJYCAYAAAC+ZpjcAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAABSxklEQVR4nO3deZxT1f3/8fe9SSYZGLZhFVSQpQqCUOHrgrijCGqBIsrSlkXR/pRaC6Wt2oqIiha0qKVVtKhft6qg4lKoqKBflGoVQUVEUBZlcwBZBmYySe75/YETEibDepmbyX09Hw8fLWduks9Jbk7euTnnXssYYwQAAADX2F4XAAAAkGsIWAAAAC4jYAEAALiMgAUAAOAyAhYAAIDLCFgAAAAuI2ABAAC4jIAFAADgMgIWAACAywhYAAAALiNgAQAAuIyABQAA4DICFgAAgMsIWAAAAC4jYKFasSxLI0eO9Ozxb731VlmWVSWPsWnTpiP6OJAmTpyoli1bKhAIqFOnTlX2uEOHDlWLFi2q7PEO1vLly3XhhReqTp06sixLL730ktclZQ3LsnTrrbd6XQaqAQIWqsRzzz0ny7L04osvVvhbx44dZVmW5s6dW+Fvxx57rLp27XrE6vr888916623atWqVUfsMSpz55138sHloddff12/+93vdMYZZ+jRRx/VnXfe6XVJWWPIkCH69NNPdccdd+iJJ55Qly5djthjPfLII7IsS48//niFvy1YsEC2beu3v/3tEXt8t911112yLEv//ve/M/69V69eqlOnjtatW6ft27dr4sSJOvnkk1WrVi0de+yxGjVqlHbu3FnFVeOIMEAVWLt2rZFkRo0alda+bds2Y9u2CQaDZvz48Wl/W7NmjZFkxowZk2yTZK677jrX6nr++eeNJDN37twD2j4Wi5mSkhJXHrtmzZpmyJAhFdrHjh1rJJmioiJXHgeZ/f73vze2bZtoNFrljz1kyBDTvHnzKn/cA7Fr1y4jydx8881V8niO45hu3bqZBg0amE2bNiXby8rKTPv27c2xxx5riouLq6SWAyHJjB07ttK/l5WVmQ4dOpiWLVuaXbt2pf3tueeeM5LMlClTjDHGPProo6awsNCMGjXKPPzww+aaa64xlmVlHBdQ/XAEC1WiadOmOu644zR//vy09gULFsgYo/79+1f4W/m/u3XrVmV17k8wGFQkEvG6jCPGT9+cv/vuO+Xn5ysvL8/rUrJKUVGRJKlu3bqu3ee+9ivLsvTQQw9p27ZtaUeq7rnnHn322Wf661//qpo1a7pWy5EWCoU0depUrVq1SuPHj0+279ixQzfccINOO+00/fKXv5QknX766frqq690zz336KqrrtKDDz6oAQMG6Nlnn1UikfCqC3AJAQtVplu3bvr4449VUlKSbHv33Xd14oknqmfPnvrPf/4jx3HS/mZZls4444wK9/XSSy+pffv2CofDOvHEEzV79uy0v69evVrXXnutjj/+eOXn56t+/frq379/2k+Bjz32mPr37y9JOvfcc2VZlizL0rx58yrtQ6Y5WHPmzFG3bt1Ut25dFRQU6Pjjj9dNN920z+fCsizt3LlTjz/+ePJxhw4dmrbN1q1bNXToUNWtW1d16tTRsGHDtGvXrgr39eSTT6pz587Kz89XYWGhBgwYoG+++Wafj5/al88//1yDBg1SvXr1kmH2k08+0dChQ9WyZUtFIhE1adJEw4cP1+bNmzPex4oVK/Zba0lJia6//no1aNBAtWrV0k9+8hOtXbs245yWtWvXavjw4WrcuHHyNZ42bdp++yRJ8Xhc48ePV6tWrRQOh9WiRQvddNNNikajyW0sy9Kjjz6qnTt3Jp//xx57LOP9jRw5UgUFBRmf+4EDB6pJkybJD8OZM2fq4osvVtOmTRUOh9WqVSuNHz9+vx+W8+bNy7jvrVq1KmNtX3zxhS677DIVFhYqEomoS5cuevnll9O2icViGjdunNq0aaNIJKL69eurW7dumjNnTqV13HrrrWrevLkkacyYMbIsK22u2Mcff6yePXuqdu3aKigo0Pnnn6///Oc/affx2GOPybIsvf3227r22mvVqFEjHX300fvsf7t27TRmzBg99thjevvtt7Vy5Urddttt+ulPf6pLL710n7eVjsz+Go1G9Zvf/EYNGzZM7q/ffvvtfmuRlAxRkyZN0ueffy5J+uMf/6jvvvtOU6dOlW3v/ug9/vjjKwTZSCSiRCKheDx+QI+F7BX0ugD4R7du3fTEE0/o/fff1znnnCNpd4jq2rWrunbtqm3btumzzz7TSSedlPzbCSecoPr166fdz/z58/XCCy/o2muvVa1atXT//ferX79+WrNmTXLb//73v3rvvfc0YMAAHX300Vq1apX+/ve/65xzztHnn3+uGjVq6KyzztL111+v+++/XzfddJPatm0rScn/PRBLlizRJZdcopNOOkm33XabwuGwVqxYoXfffXeft3viiSd01VVX6ZRTTtHVV18tSWrVqlXaNpdffrmOO+44TZgwQQsXLtQjjzyiRo0a6e67705uc8cdd+hPf/qTLr/8cl111VUqKirSAw88oLPOOksff/zxAR2F6N+/v9q0aaM777xTxhhJu0Pj119/rWHDhqlJkyZasmSJpk6dqiVLlug///lPhZB5ILUOHTpUzz33nH7+85/rtNNO09tvv62LL764Qj0bN27UaaedllzQ0LBhQ82aNUtXXnmltm/frhtuuGGf/bnqqqv0+OOP67LLLtPo0aP1/vvva8KECVq6dGlyDuATTzyhqVOn6oMPPtAjjzwiSZXO9bviiis0ZcoUvfbaa8lALkm7du3SK6+8oqFDhyoQCEjaHS4KCgo0atQoFRQU6K233tItt9ySnGvjhiVLluiMM85Qs2bN9Ic//EE1a9bUc889pz59+mjGjBnq27evpN1hYsKECcn9bPv27frwww+1cOFCXXDBBRnv+6c//anq1q2r3/zmNxo4cKB69eqlgoKC5OOeeeaZql27tn73u98pFArpoYce0jnnnKO3335bp556atp9XXvttWrYsKFuueWWAzoy+sc//lH//Oc/dc0116h58+YKBoO6//77D+g5ORL761VXXaUnn3xSgwYNUteuXfXWW29l3F8rM2HCBL300ku65pprNHnyZE2ZMkVjxoxRhw4dKr3NBx98oGeeeUaDBw9WOBw+4MdClvL6N0r4x5IlS4yk5FyrWCxmatasaR5//HFjjDGNGzdOzk3Yvn27CQQCZsSIEWn3Icnk5eWZFStWJNsWL15sJJkHHngg2bb33AdjjFmwYIGRZP73f/832Xawc7DK50eV+8tf/nLI86X2Nwdr+PDhae19+/Y19evXT/571apVJhAImDvuuCNtu08//dQEg8EK7ZU9zsCBAyv8LdPz98wzzxhJ5p133jnoWj/66CMjydxwww1p2w0dOrTCnJYrr7zSHHXUUWnzcYwxZsCAAaZOnToZayu3aNEiI8lcddVVae2//e1vjSTz1ltvJduGDBliatasWel9lXMcxzRr1sz069cvrb18Pk3q85GptmuuucbUqFHDlJaWpj126hysuXPnZtwPV65caSSZRx99NNl2/vnnmw4dOqTdn+M4pmvXrqZNmzbJto4dO5qLL754v/3bW/ljTpw4Ma29T58+Ji8vz3z11VfJtnXr1platWqZs846K9n26KOPGkmmW7duJh6PH9Rj//vf/zaSjCQzefLkA76d2/tr+X507bXXpm03aNCg/c7BSjV9+nQjyRQWFmack5Xqs88+M4WFhaZLly5ZNecMh46fCFFl2rZtq/r16yfnVi1evFg7d+5MHjno2rVr8sjPggULlEgkMs6/6t69e9rRnpNOOkm1a9fW119/nWzLz89P/v9YLKbNmzerdevWqlu3rhYuXOhan8qPEM2cOTPt5003lM/TKHfmmWdq8+bN2r59uyTphRdekOM4uvzyy7Vp06bkf02aNFGbNm0yrso8kMeR0p+/0tJSbdq0SaeddpokZXz+9ldr+U+41157bdp2v/rVr9L+bYzRjBkzdOmll8oYk9avHj16aNu2bft8/f71r39JkkaNGpXWPnr0aEnSa6+9VultK2NZlvr3769//etfKi4uTrY/++yzatasWdo+mvq87dixQ5s2bdKZZ56pXbt26Ysvvjjox97bli1b9NZbb+nyyy9P3v+mTZu0efNm9ejRQ8uXL9fatWsl7d43lyxZouXLlx/24yYSCb3++uvq06ePWrZsmWw/6qijNGjQIM2fPz/5WpcbMWJE8sjegSosLEz+fHbhhRce8O3c3l/L96Prr78+bbv9HT3dW79+/dSrVy9t2bJFU6ZMSaszVTQaVe/evVW3bl3NmjWrWs05Q+UIWKgylmWpa9euyblW7777rho1aqTWrVtLSg9Y5f+bKWAde+yxFdrq1aun77//PvnvkpIS3XLLLTrmmGMUDofVoEEDNWzYUFu3btW2bdtc69MVV1yhM844Q1dddZUaN26sAQMG6LnnnnMlbO3dz3r16klSsp/Lly+XMUZt2rRRw4YN0/5bunSpvvvuuwN6nOOOO65C25YtW/TrX/9ajRs3Vn5+vho2bJjcLtPzt79aV69eLdu2KzxW+WtfrqioSFu3btXUqVMr9GnYsGGStM9+lT/O3vfbpEkT1a1bV6tXr670tvtyxRVXqKSkJDnPqbi4WP/617/Uv3//tJ+flixZor59+6pOnTqqXbu2GjZsqJ/97GeSMj9vB2vFihUyxuhPf/pThedn7NixkvY8P7fddpu2bt2qH/3oR+rQoYPGjBmjTz755JAet6ioSLt27dLxxx9f4W9t27aV4zgV5v1l2q/2JZFI6Oqrr1bTpk1Vt27dCuFmX47U/rr3z/aZ+r8///M//yNJ+zzVxYIFC/TVV1/p9ttvV4MGDQ76MZCdmIOFKtWtWze98sor+vTTT5Pzr8p17dpVY8aM0dq1azV//nw1bdo07dtyucq+FZsf5g9Ju4+MPProo7rhhht0+umnJ0+YOGDAAFePNOXn5+udd97R3Llz9dprr2n27Nl69tlndd555+n1118/6G/wqfbXT8dxZFmWZs2alXHb8rkzB9KHvV1++eV67733NGbMGHXq1EkFBQVyHEcXXXRRxufvQF6TA1F+3z/72c80ZMiQjNuUz9HbF7dPBnvaaaepRYsWeu655zRo0CC98sorKikp0RVXXJHcZuvWrTr77LNVu3Zt3XbbbWrVqpUikYgWLlyo3//+9/vc7yqrd+/J8eX38dvf/lY9evTIeJvycHnWWWfpq6++0syZM/X666/rkUce0V/+8hc9+OCDuuqqqw6q/4eisqM1lbnvvvv08ccf66WXXtLatWt13XXX6emnn9agQYP2e1uv9le3lE/GP+qoozx5fBwZBCxUqfIjUvPnz9e7776bdsi9c+fOCofDmjdvnt5//3316tXrkB9n+vTpGjJkiO65555kW2lpqbZu3Zq2nRsfxLZt6/zzz9f555+ve++9V3feeaduvvlmzZ07V927d6/0dof72K1atZIxRscdd5x+9KMfHdZ9pfr+++/15ptvaty4cbrllluS7YfzU1Pz5s3lOI5WrlypNm3aJNtXrFiRtl35iq1EIrHP525/j7N8+fK0xQobN27U1q1bkyvkDsXll1+u++67T9u3b9ezzz6rFi1aJH+GknavBNy8ebNeeOEFnXXWWcn2lStX7ve+y4+g7L1/7n3ErfwLRygUOqDnp7CwUMOGDdOwYcNUXFyss846S7feeutBB6yGDRuqRo0aWrZsWYW/ffHFF7JtW8ccc8xB3Weqb775RmPHjlXv3r3Vu3dvOY6jxx9/XKNGjdLFF1+sOnXqVHrbI7m/fvXVV2lHrTL13w2tWrXSddddp2bNmh2R+4c3+IkQVapLly6KRCJ66qmntHbt2rQjWOFwWCeffLKmTJminTt3Htb5rwKBQIVvow888ECFIwLlcx32/mA7UFu2bKnQVn7JldTTAmRSs2bNQ35cafeKr0AgoHHjxlXoqzGmwhL1A1X+7X7v+5w8efIh3Z+k5NGWv/3tb2ntDzzwQIXH7tevn2bMmKHPPvuswv2Un6OpMuWhfO9a7733Xkk6qFVge7viiisUjUb1+OOPa/bs2br88ssr1C6lP29lZWUV+pxJ8+bNFQgE9M4776S1733bRo0a6ZxzztFDDz2k9evXV7if1Odn79e/oKBArVu33u9+mUkgENCFF16omTNnpp3qZOPGjXr66afVrVs31a5d+6Dvt9yvfvUrGWOS+4Nt23rwwQe1adOm/Z7y5Ejsrz179pSkCqsYD+c+9+W4447TyJEjCVg5hiNYqFJ5eXn6n//5H/3f//2fwuGwOnfunPb3rl27Jo86HU7AuuSSS/TEE0+oTp06ateunRYsWKA33nijwikfOnXqpEAgoLvvvlvbtm1TOBzWeeedp0aNGh3Q49x222165513dPHFF6t58+b67rvv9Le//U1HH330fuvv3Lmz3njjDd17773JE7HuvdR9X1q1aqXbb79dN954o1atWqU+ffqoVq1aWrlypV588UVdffXVh3SJkdq1a+uss87Sn//8Z8ViMTVr1kyvv/76AR2JqUznzp3Vr18/TZ48WZs3b06epuHLL7+UlH4076677tLcuXN16qmnasSIEWrXrp22bNmihQsX6o033sgYast17NhRQ4YM0dSpU5M/2X3wwQd6/PHH1adPH5177rmH3IeTTz5ZrVu31s0336xoNJr286C0e9+tV6+ehgwZouuvv16WZemJJ544oJ+d6tSpo/79++uBBx6QZVlq1aqVXn311YzzzaZMmaJu3bqpQ4cOGjFihFq2bKmNGzdqwYIF+vbbb7V48WJJu88tdc4556hz584qLCzUhx9+qOnTpx/ytTxvv/325Dnfrr32WgWDQT300EOKRqP685//fEj3KUkvvviiZs6cqXvuuSftKNiPf/xjXXfddfrrX/+qoUOHJucy7e1I7K+dOnXSwIED9be//U3btm1T165d9eabb1Y44uqWF198UcOGDdPcuXOTp7BBDqjydYvwvRtvvNFIMl27dq3wtxdeeMFIMrVq1cq4xFuVXCqnefPmaac8+P77782wYcNMgwYNTEFBgenRo4f54osvKmxnjDEPP/ywadmypQkEAvs9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", "code": "import seaborn as sns\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.boxplot(data=data)\n    plt.title(\"What is the range of values for X and Y?\", wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.regplot(x='X', y='Y', data=data)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title('What is the correlation between X and Y?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'X'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'X'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/regression.py\", line 851, in regplot\n    plotter = _RegressionPlotter(x, y, data, x_estimator, x_bins, x_ci,\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/regression.py\", line 109, in __init__\n    self.establish_variables(data, x=x, y=y, units=units,\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/regression.py\", line 46, in establish_variables\n    vector = data[val]\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'X'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='X')\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title('What is the distribution of X?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `X` for parameter `x`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 1430, in histplot\n    p = _DistributionPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 111, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `X` for parameter `x`\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data['Y'])\n    plt.title('What is the distribution of Y?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'Y'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Y'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Y'\n"}}]]}