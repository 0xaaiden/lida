{"summary": {"file_name": "stocks.csv"}, "goals": [{"index": 0, "question": "What is the distribution of daily returns for each stock?", "visualization": "Histogram of daily returns for each stock", "rationale": "This visualization can help us understand the volatility of each stock and identify potential outliers."}, {"index": 1, "question": "How do the daily returns of each stock compare to each other?", "visualization": "Line chart of daily returns for each stock", "rationale": "This visualization can help us identify trends and patterns in the daily returns of each stock and compare their performance."}, {"index": 2, "question": "What is the correlation between the daily returns of each stock?", "visualization": "Scatter plot of daily returns for each stock", "rationale": "This visualization can help us identify any relationships or dependencies between the daily returns of each stock."}, {"index": 3, "question": "What is the distribution of trading volumes for each stock?", "visualization": "Histogram of trading volumes for each stock", "rationale": "This visualization can help us understand the liquidity of each stock and identify potential outliers."}, {"index": 4, "question": "How does the trading volume of each stock compare to each other?", "visualization": "Line chart of trading volumes for each stock", "rationale": "This visualization can help us identify trends and patterns in the trading volumes of each stock and compare their liquidity."}], "code": [["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, kde=True)\n    plt.title(\"What is the distribution of daily returns for each stock?\", wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    # Calculate daily returns\n    data['Date'] = pd.to_datetime(data['Date'], errors='ignore')\n    data = data.pivot(index='Date', columns='Stock', values='Price')\n    daily_returns = data.pct_change().dropna()\n    \n    # Plot daily returns\n    sns.lineplot(data=daily_returns)\n    \n    # Rotate x-axis labels and set max ticks\n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.title('How do the daily returns of each stock compare to each other?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    # Calculate daily returns\n    daily_returns = data.pct_change().dropna()\n    \n    # Create a scatter plot\n    sns.scatterplot(data=daily_returns)\n    \n    # Set title and axis labels\n    plt.title(\"What is the correlation between the daily returns of each stock?\", wrap=True)\n    \n    # Rotate x axis labels if necessary\n    if len(plt.xticks()[0]) > 20:\n        plt.xticks(rotation=45)\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='Volume', hue='Stock', multiple='stack')\n    plt.title('What is the distribution of trading volumes for each stock?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['date'] = pd.to_datetime(data['date'], errors='ignore')\n    sns.lineplot(x='date', y='volume', hue='stock', data=data)\n    \n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.title('How does the trading volume of each stock compare to each other?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"]], "filename": "stocks.csv", "chart": [[{"spec": null, "status": true, "raster": "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KK4A+ctcW1tbr8YbTYbeYYYoN336dLz88stYu3at/wfGZ599hmnTpmHatGmoq6vDd999h8MOO8z/2IQJE5CWlhbwPJ9++ilef/11XHPNNUhISMATTzyB8847D7t37/Zvu27dOnz++ee48MILMWLECOzatQvPPPMMTjrpJGzevBlxcXGYMWMGbrjhBjzxxBO44447MHHiRADw/90bmzZtwplnnonDDjsMS5YsgcPhwPbt2zud7uzo5ZdfxuWXX46jjz4aV155JQBgzJgxAdtccMEFyM/Px4MPPogvv/wSf/7zn5GRkYGHHnrIv83999+PO++8ExdccAEuv/xyVFVV4cknn8SMGTPw1VdfHfQ34G+//Rannnoq0tPTcc8998Dj8eDuu+9GZmZmj+O+55578OCDD/rHUF9fj/Xr1+PLL7/EKaecgquuugplZWVYsWIFXn755S6fY+nSpWhpacGVV14Jh8OB1NTULv/jBwCv14vTTjsNxx57LB5++GEsX74cd999NzweD5YsWdJjf9vrTd/a27RpE0444QQkJibi1ltvhc1mw3PPPYeTTjoJH3/8MY455piA7a+//nqkpKTg7rvvxq5du/D444/juuuuw6uvvnrQ1/nggw9w+umnY/To0bjnnnvQ3NyMJ598Escffzy+/PJL5OXl4aqrrsLw4cPxwAMP4IYbbsBRRx110P1VXl6Ok08+GR6PB7fddhucTif++Mc/IjY2ttO2L774IuLj43HTTTchPj4eK1euxF133YX6+no88sgjPebkc9JJJ2HkyJFYtmwZzjnnnIDHli1bhjFjxuC4447r8XmuueYapKen46677kJjYyMA832zYMECzJkzBw899BCamprwzDPP+H9582XUl/17MB6PB3PmzMH06dPx29/+FnFxcf7HevNz6Oc//zn++c9/4rrrrkNhYSGqq6vx6aefoqioCEcccUSXr3mwfdybOdLe+eefj7Fjx+KBBx4I+GWko6amJpx44onYu3cvrrrqKowaNQqff/45br/9duzbtw+PP/64f9vf//73+NGPfoT58+ejra0Nf//733H++efjnXfewdy5c/3bLV68GPfccw+mTZuGJUuWwG63Y+3atVi5ciVOPfVU/3bbt2/Hj3/8Y1x22WVYsGABXnjhBSxcuBBTp07FpEmTuu3zihUrcNFFF2HWrFn+n4lFRUX47LPPcOONN/b48/2ee+7B4sWLMXv2bFx99dUoLi7GM888g3Xr1uGzzz7zH6ldsWIFzjzzTGRnZ+PGG29EVlYWioqK8M477+DGG2/ssm/r1q3DnDlzcOSRR+Ktt97q8v1WXV2N+++/H+PGjYuqszS9JiiqbNq0SQAQ9957rxBCCLfbLZxOp3jppZeEEEJkZmaKp59+WgghRH19vbBYLOKKK64IeA4Awm63i+3bt/vbvv76awFAPPnkk/62pqamTq+/evVqAUD85S9/8be99tprAoBYtWpVr8Zw9913i/ZT67HHHhMARFVVVa++vz2n0ykWLFjQ7Wv87Gc/C2g/55xzRFpamv/rXbt2CYvFIu6///6A7b799lthtVo7tXc0b948ERMTI0pLS/1tmzdvFhaLRXR8++Tm5gb0dfLkyWLu3LkHff5rr7220/MIIURJSYkAIBITE0VlZWWXjy1dutTftmDBAgFAXH/99f42wzDE3Llzhd1u92e/atWqLvdlV8/ZXd+EMOfY3Xff7f963rx5wm63ix07dvjbysrKREJCgpgxY4a/benSpQKAmD17tjAMw9/+i1/8QlgsFlFbW9vl6/lMmTJFZGRkiOrqan/b119/LXRdF5dccom/zTfO11577aDPJ4QQixYtEgDE2rVr/W2VlZUiKSlJABAlJSX+9q7eM1dddZWIi4sTLS0t/rYFCxaI3NzcgO06Znb77bcLh8MRMObKykphtVoDtuuKL8fp06cLj8fjb29oaBDJycmdfiaUl5eLpKSkgPbu9m9f5ohv3t12222dnqe3P4eSkpLEtddee9DxdqW7fdzbOeL7GXLRRRf16vXuvfde4XQ6xdatWwPab7vtNmGxWMTu3bv9bR3nSVtbmzjkkEPEzJkz/W3btm0Tuq6Lc845R3i93oDt2783cnNzBQDxySef+NsqKyuFw+EQN99880H7fOONN4rExMSAOdJRdz/fKysrhd1uF6eeempA/5566ikBQLzwwgtCCCE8Ho/Iz88Xubm5oqampttxLFiwQDidTiGEEJ9++qlITEwUc+fODXjftNfQ0CCmTp0qUlNTxaZNmw46zmjFU4RRZuLEiUhLS/NfW/X111+jsbHRv0pw2rRp/iM/q1evhtfr7bKynz17dsDRnsMOOwyJiYnYuXOnv639bwxutxvV1dUoKChAcnLyQQ/P95XvCNFbb73V7dGX/vr5z38e8PUJJ5yA6upq1NfXAwBef/11GIaBCy64APv37/f/ycrKwtixY7tclenj9Xrx3nvvYd68eRg1apS/feLEiZgzZ06PfUtOTsamTZuwbdu2fo4OOO+885Cent7r7dvfnsN3iqatrQ0ffPBBv/vQE6/Xi/fffx/z5s3D6NGj/e3Z2dn4yU9+gk8//dS/P3yuvPLKgFOOJ5xwArxeL0pLS7t9nX379mHjxo1YuHAhUlNT/e2HHXYYTjnlFPz3v//tV///+9//4thjj8XRRx/tb0tPT/ef6mqv/XumoaEB+/fvxwknnICmpiZs2bKlT697ySWXoLW1NeDU0auvvgqPx4Of/vSnvXqOK664AhaLxf/1ihUrUFtbi4suuihgvlssFhxzzDEHne8DcfXVV3fZ3pufQ8nJyVi7di3KysoG3I/+zJGOP0O689prr+GEE05ASkpKQLazZ8+G1+vFJ5984t+2/TypqalBXV0dTjjhhICfq2+++SYMw8Bdd90FXQ/8r7jjJRaFhYU44YQT/F+np6dj/PjxATl2JTk5GY2Njf7LEvrigw8+QFtbGxYtWhTQvyuuuAKJiYn4z3/+A8C8NKCkpASLFi3qdDagq9v1rFq1CnPmzMGsWbPw+uuvd3vt6tVXX43vvvsO77zzDgoLC/vc/2jAAivKaJqGadOm+a+1+uyzz5CRkYGCggIAgQWW7++uCqz2BYFPSkoKampq/F83Nzfjrrvu8l9PMGzYMKSnp6O2thZ1dXVBG9P//d//4fjjj8fll1+OzMxMXHjhhfjHP/4RlGKr4zh9q4h849y2bRuEEBg7dizS09MD/hQVFfkvlO1KVVUVmpubMXbs2E6PjR8/vse+LVmyBLW1tRg3bhwOPfRQ3HLLLfjmm2/6Mjzk5+f3eltd1wMKHAAYN24cAIR0hVBVVRWampq6zGTixIkwDKPT9W497beu+Iqv7l5n//79/tNkfVFaWtrrfbxp0yacc845SEpKQmJiItLT0/3FUF/fMxMmTMBRRx2FZcuW+duWLVuGY4891v9+70nH+eEr5mfOnNlpvr///vsHne/9ZbVaA67/aq83P4cefvhhfPfddxg5ciSOPvpo3HPPPT0WDt3pzxzp7Xts27ZtWL58eadcZ8+eDQAB2b7zzjs49thjERMTg9TUVKSnp+OZZ54JmCM7duyAruu9Kh56k2NXrrnmGowbNw6nn346RowYgZ/97GedroHrTndZ2u12jB492v/4jh07AACHHHJIj8/Z0tKCuXPn4vDDD8c//vEP2O32Lrdzu9149dVXsWDBgl6dKo9WvAYrCk2fPh3//ve/8e233/qvv/KZNm0abrnlFuzduxeffvopcnJyOv2nCiDgt9r2RLtrDK6//nosXboUixYtwnHHHYekpCRomoYLL7wwqEeaYmNj8cknn2DVqlX4z3/+g+XLl+PVV1/FzJkz8f7773fb197oaZyGYUDTNLz77rtdbhvKG9/NmDEDO3bswFtvvYX3338ff/7zn/HYY4/h2WefxeWXX96r5+jquoSB6O4GsB0v0g613szPaFNbW4sTTzwRiYmJWLJkCcaMGYOYmBh8+eWX+NWvftWv98wll1yCG2+8EXv27EFrayvWrFmDp556qtff33F++Prw8ssvIysrq9P2vVnd29c54nA4Oh2B8enNfr7gggtwwgkn4I033sD777+PRx55BA899BBef/11nH766T32d6B6+x4zDAOnnHIKbr311i4f9/0y87///Q8/+tGPMGPGDPzhD39AdnY2bDYbli5dildeeaVffezv+yUjIwMbN27Ee++9h3fffRfvvvsuli5diksuuQQvvfRSv/oyEA6HA2eccQbeeustLF++vNsbqNbX18PtdiM7OzvMPQwuFlhRqP39sD777DMsWrTI/9jUqVPhcDjw0Ucf+Vdt9Nc///lPLFiwAL/73e/8bS0tLZ1WiATjruy6rmPWrFmYNWsWHn30UTzwwAP49a9/jVWrVvl/A+zKQF97zJgxEEIgPz/f/wOwt9LT0xEbG9vlKb7e3uMoNTUVl156KS699FK4XC7MmDED99xzj7/ACuYd7w3DwM6dOwPGuXXrVgDwX9jrO1LUcR93dWqut31LT09HXFxcl5ls2bIFuq5j5MiRvXqug/HdRLK71xk2bFi/ltjn5ub2ah9/9NFHqK6uxuuvv44ZM2b420tKSvr8mj4XXnghbrrpJvztb39Dc3MzbDYb/u///q/fz+c7HZeRkXHQ9xXQ/f7tyxwJluzsbFxzzTW45pprUFlZiSOOOAL3339/nwusUM0RwMzW5XL1mOu//vUvxMTE4L333gs4/bV06dJOz2cYBjZv3owpU6b0q0+9YbfbcdZZZ+Gs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", "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, kde=True)\n    plt.title(\"What is the distribution of daily returns for each stock?\", wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    # Calculate daily returns\n    data['Date'] = pd.to_datetime(data['Date'], errors='ignore')\n    data = data.pivot(index='Date', columns='Stock', values='Price')\n    daily_returns = data.pct_change().dropna()\n    \n    # Plot daily returns\n    sns.lineplot(data=daily_returns)\n    \n    # Rotate x-axis labels and set max ticks\n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.title('How do the daily returns of each stock compare to each other?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'Date'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Date'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 10, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Date'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    # Calculate daily returns\n    daily_returns = data.pct_change().dropna()\n    \n    # Create a scatter plot\n    sns.scatterplot(data=daily_returns)\n    \n    # Set title and axis labels\n    plt.title(\"What is the correlation between the daily returns of each stock?\", wrap=True)\n    \n    # Rotate x axis labels if necessary\n    if len(plt.xticks()[0]) > 20:\n        plt.xticks(rotation=45)\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "unsupported operand type(s) for /: 'str' and 'str'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/ops/array_ops.py\", line 163, in _na_arithmetic_op\n    result = func(left, right)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/computation/expressions.py\", line 239, in evaluate\n    return _evaluate(op, op_str, a, b)  # type: ignore[misc]\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/computation/expressions.py\", line 128, in _evaluate_numexpr\n    result = _evaluate_standard(op, op_str, a, b)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/computation/expressions.py\", line 69, in _evaluate_standard\n    return op(a, b)\nTypeError: unsupported operand type(s) for /: 'str' and 'float'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 10, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/generic.py\", line 10368, in pct_change\n    rs = data / shifted - 1  # type: ignore[operator]\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/ops/common.py\", line 70, in new_method\n    return method(self, other)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/arraylike.py\", line 124, in __truediv__\n    return self._arith_method(other, operator.truediv)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 6952, in _arith_method\n    new_data = self._dispatch_frame_op(other, op, axis=axis)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 6991, in _dispatch_frame_op\n    bm = self._mgr.operate_blockwise(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 1409, in operate_blockwise\n    return operate_blockwise(self, other, array_op)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/internals/ops.py\", line 63, in operate_blockwise\n    res_values = array_op(lvals, rvals)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/ops/array_ops.py\", line 222, in arithmetic_op\n    res_values = _na_arithmetic_op(left, right, op)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/ops/array_ops.py\", line 170, in _na_arithmetic_op\n    result = _masked_arith_op(left, right, op)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/ops/array_ops.py\", line 108, in _masked_arith_op\n    result[mask] = op(xrav[mask], yrav[mask])\nTypeError: unsupported operand type(s) for /: 'str' and 'str'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    sns.histplot(data=data, x='Volume', hue='Stock', multiple='stack')\n    plt.title('What is the distribution of trading volumes for each stock?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `Volume` for parameter `x`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 1430, in histplot\n    p = _DistributionPlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/distributions.py\", line 111, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `Volume` for parameter `x`\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    data['date'] = pd.to_datetime(data['date'], errors='ignore')\n    sns.lineplot(x='date', y='volume', hue='stock', data=data)\n    \n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.title('How does the trading volume of each stock compare to each other?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `volume` for parameter `y`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 10, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 692, in lineplot\n    p = _LinePlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 367, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `volume` for parameter `y`\n"}}]]}