{"summary": {"file_name": "flights-5k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight durations?", "visualization": "Histogram of flight durations", "rationale": "This visualization will help us understand the spread of flight durations and identify any outliers."}, {"index": 1, "question": "What is the average delay time for flights?", "visualization": "Bar chart of average delay time by airline", "rationale": "This visualization will help us identify which airlines have the highest average delay times and potentially investigate the reasons behind it."}, {"index": 2, "question": "What is the relationship between departure delay and arrival delay?", "visualization": "Scatter plot of departure delay vs arrival delay", "rationale": "This visualization will help us understand if there is a correlation between departure delay and arrival delay, and potentially identify any patterns or trends."}, {"index": 3, "question": "What is the distribution of flight distances?", "visualization": "Histogram of flight distances", "rationale": "This visualization will help us understand the spread of flight distances and identify any outliers."}, {"index": 4, "question": "What is the most common reason for flight cancellations?", "visualization": "Bar chart of cancellation reasons", "rationale": "This visualization will help us identify the most common reasons for flight cancellations and potentially investigate any patterns or trends."}], "code": [["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['duration'])\n    plt.xlabel('Flight Duration')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight durations?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    avg_delay_by_airline = data.groupby('airline')['delay_time'].mean()\n    avg_delay_by_airline.plot(kind='bar')\n    \n    plt.xlabel('Airline')\n    plt.ylabel('Average Delay Time')\n    plt.title('What is the average delay time for flights?', wrap=True)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.scatter(data['departure_delay'], data['arrival_delay'])\n    plt.xlabel('Departure Delay')\n    plt.ylabel('Arrival Delay')\n    plt.title('What is the relationship between departure delay and arrival delay?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['distance'], bins=20)\n    plt.xlabel('Flight Distance')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight distances?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)\nchart.show()"], ["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    cancellation_reasons = data['cancellation_reason'].value_counts()\n    cancellation_reasons.plot(kind='bar')\n    \n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.title(\"What is the most common reason for flight cancellations?\", wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()"]], "filename": "flights-5k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['duration'])\n    plt.xlabel('Flight Duration')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight durations?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'duration'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'duration'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'duration'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    avg_delay_by_airline = data.groupby('airline')['delay_time'].mean()\n    avg_delay_by_airline.plot(kind='bar')\n    \n    plt.xlabel('Airline')\n    plt.ylabel('Average Delay Time')\n    plt.title('What is the average delay time for flights?', wrap=True)\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'airline'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 7718, in groupby\n    return DataFrameGroupBy(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 882, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 882, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'airline'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.scatter(data['departure_delay'], data['arrival_delay'])\n    plt.xlabel('Departure Delay')\n    plt.ylabel('Arrival Delay')\n    plt.title('What is the relationship between departure delay and arrival delay?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'departure_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'departure_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'departure_delay'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['distance'], bins=20)\n    plt.xlabel('Flight Distance')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of flight distances?')\n    \n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.xticks(rotation=45)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    \n    cancellation_reasons = data['cancellation_reason'].value_counts()\n    cancellation_reasons.plot(kind='bar')\n    \n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    \n    plt.title(\"What is the most common reason for flight cancellations?\", wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'cancellation_reason'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'cancellation_reason'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 132, in execute\n    exec(code, None, ex_locals)\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'cancellation_reason'\n"}}]]}