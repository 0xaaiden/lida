{"summary": {"file_name": "flights-5k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight durations?", "visualization": "Histogram of flight durations", "rationale": "This visualization will help us understand the spread of flight durations and identify any outliers."}, {"index": 1, "question": "What is the average delay time for flights?", "visualization": "Bar chart of average delay time by airline", "rationale": "This visualization will help us identify which airlines have the highest average delay times and potentially investigate the reasons behind it."}, {"index": 2, "question": "What is the relationship between departure delay and arrival delay?", "visualization": "Scatter plot of departure delay vs arrival delay", "rationale": "This visualization will help us understand if there is a correlation between departure delay and arrival delay, and potentially identify any patterns or trends."}, {"index": 3, "question": "What is the distribution of flight distances?", "visualization": "Histogram of flight distances", "rationale": "This visualization will help us understand the spread of flight distances and identify any outliers."}, {"index": 4, "question": "What is the most common reason for flight cancellations?", "visualization": "Bar chart of cancellation reasons", "rationale": "This visualization will help us identify the most common reasons for flight cancellations and potentially investigate any patterns or trends."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['duration'] = pd.to_datetime(data['duration'], format='%H:%M:%S', errors='coerce').dt.hour\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.hist(data['duration'], bins=20, color='blue', alpha=0.5)\n    ax.axvline(data['duration'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['duration'].mean():.2f}\")\n    ax.axvline(data['duration'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['duration'].median():.2f}\")\n    ax.set_xlabel('Duration (hours)')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['delay_time'] = data['arr_delay'] - data['dep_delay']\n    avg_delay_time_by_airline = data.groupby('carrier')['delay_time'].mean().sort_values(ascending=False)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(avg_delay_time_by_airline.index, avg_delay_time_by_airline.values, color='blue')\n    ax.axhline(avg_delay_time_by_airline.mean(), color='red', linestyle='--', label=f\"Average delay time: {avg_delay_time_by_airline.mean():.2f}\")\n    ax.set_xlabel('Airline')\n    ax.set_ylabel('Average delay time (minutes)')\n    ax.set_title('What is the average delay time for flights?')\n    ax.legend()\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'] = pd.to_datetime(data['DEPARTURE_DELAY'], format='%H:%M:%S', errors='coerce').dt.time\n    data['ARRIVAL_DELAY'] = pd.to_datetime(data['ARRIVAL_DELAY'], format='%H:%M:%S', errors='coerce').dt.time\n    plt.scatter(data['DEPARTURE_DELAY'], data['ARRIVAL_DELAY'], alpha=0.5)\n    plt.xlabel('Departure Delay')\n    plt.ylabel('Arrival Delay')\n    plt.title('What is the relationship between departure delay and arrival delay?')\n    return plt\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    plt.hist(data['distance'], bins=50, color='blue', edgecolor='black')\n    plt.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['distance'].mean():0.2f}\")\n    plt.axvline(data['distance'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['distance'].median():0.2f}\")\n    plt.legend()\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['CancellationCode'] = data['CancellationCode'].fillna('Not Cancelled')\n    cancellation_reasons = data['CancellationCode'].value_counts()\n    fig, ax = plt.subplots()\n    ax.bar(cancellation_reasons.index, cancellation_reasons.values)\n    ax.set_title('What is the most common reason for flight cancellations?')\n    ax.set_xlabel('Cancellation Reason')\n    ax.set_ylabel('Number of Flights')\n    return plt\n\nchart = plot(data)"]], "filename": "flights-5k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['duration'] = pd.to_datetime(data['duration'], format='%H:%M:%S', errors='coerce').dt.hour\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.hist(data['duration'], bins=20, color='blue', alpha=0.5)\n    ax.axvline(data['duration'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['duration'].mean():.2f}\")\n    ax.axvline(data['duration'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['duration'].median():.2f}\")\n    ax.set_xlabel('Duration (hours)')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'duration'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'duration'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'duration'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['delay_time'] = data['arr_delay'] - data['dep_delay']\n    avg_delay_time_by_airline = data.groupby('carrier')['delay_time'].mean().sort_values(ascending=False)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(avg_delay_time_by_airline.index, avg_delay_time_by_airline.values, color='blue')\n    ax.axhline(avg_delay_time_by_airline.mean(), color='red', linestyle='--', label=f\"Average delay time: {avg_delay_time_by_airline.mean():.2f}\")\n    ax.set_xlabel('Airline')\n    ax.set_ylabel('Average delay time (minutes)')\n    ax.set_title('What is the average delay time for flights?')\n    ax.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'arr_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'arr_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'arr_delay'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'] = pd.to_datetime(data['DEPARTURE_DELAY'], format='%H:%M:%S', errors='coerce').dt.time\n    data['ARRIVAL_DELAY'] = pd.to_datetime(data['ARRIVAL_DELAY'], format='%H:%M:%S', errors='coerce').dt.time\n    plt.scatter(data['DEPARTURE_DELAY'], data['ARRIVAL_DELAY'], alpha=0.5)\n    plt.xlabel('Departure Delay')\n    plt.ylabel('Arrival Delay')\n    plt.title('What is the relationship between departure delay and arrival delay?')\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'DEPARTURE_DELAY'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'DEPARTURE_DELAY'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'DEPARTURE_DELAY'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    plt.hist(data['distance'], bins=50, color='blue', edgecolor='black')\n    plt.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['distance'].mean():0.2f}\")\n    plt.axvline(data['distance'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['distance'].median():0.2f}\")\n    plt.legend()\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['CancellationCode'] = data['CancellationCode'].fillna('Not Cancelled')\n    cancellation_reasons = data['CancellationCode'].value_counts()\n    fig, ax = plt.subplots()\n    ax.bar(cancellation_reasons.index, cancellation_reasons.values)\n    ax.set_title('What is the most common reason for flight cancellations?')\n    ax.set_xlabel('Cancellation Reason')\n    ax.set_ylabel('Number of Flights')\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'CancellationCode'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'CancellationCode'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'CancellationCode'\n"}}]]}