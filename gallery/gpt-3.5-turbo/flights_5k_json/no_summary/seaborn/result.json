{"summary": {"file_name": "flights-5k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight durations?", "visualization": "Histogram of flight durations", "rationale": "This visualization will help us understand the spread of flight durations and identify any outliers or patterns in the data."}, {"index": 1, "question": "What is the average delay time for each airline?", "visualization": "Bar chart of average delay time by airline", "rationale": "This visualization will help us compare the performance of different airlines in terms of delay time and identify any trends or patterns."}, {"index": 2, "question": "What is the relationship between departure delay and arrival delay?", "visualization": "Scatter plot of departure delay vs arrival delay", "rationale": "This visualization will help us understand the correlation between departure delay and arrival delay and identify any patterns or outliers."}, {"index": 3, "question": "What is the distribution of flight distances?", "visualization": "Histogram of flight distances", "rationale": "This visualization will help us understand the spread of flight distances and identify any outliers or patterns in the data."}, {"index": 4, "question": "What is the distribution of flight cancellations by airline?", "visualization": "Bar chart of flight cancellations by airline", "rationale": "This visualization will help us compare the performance of different airlines in terms of flight cancellations and identify any trends or patterns."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['duration'] = pd.to_datetime(data['duration'], format='%H:%M:%S', errors='coerce').dt.hour\n    sns.histplot(data=data, x='duration', kde=True, color='blue')\n    plt.axvline(data['duration'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean')\n    plt.legend()\n    plt.title('What is the distribution of flight durations?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['delay_time'] = data['arr_delay'] - data['dep_delay']\n    avg_delay = data.groupby('carrier')['delay_time'].mean().reset_index()\n    chart = sns.barplot(x='carrier', y='delay_time', data=avg_delay)\n    chart.set(title='What is the average delay time for each airline?')\n    chart.axhline(avg_delay['delay_time'].mean(), color='red', label='Average delay time: {:.2f}'.format(avg_delay['delay_time'].mean()))\n    chart.legend()\n    return chart\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['dep_delay'] = pd.to_numeric(data['dep_delay'], errors='coerce')\n    data['arr_delay'] = pd.to_numeric(data['arr_delay'], errors='coerce')\n    chart = sns.scatterplot(x='dep_delay', y='arr_delay', data=data)\n    plt.title('What is the relationship between departure delay and arrival delay?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    sns.histplot(data=data, x='distance', kde=True, color='blue')\n    plt.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean Distance: {:.2f}'.format(data['distance'].mean()))\n    plt.legend()\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data = data.groupby('AIRLINE')['CANCELLED'].sum().reset_index()\n    sns.barplot(x='AIRLINE', y='CANCELLED', data=data)\n    plt.title('What is the distribution of flight cancellations by airline?', wrap=True)\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-5k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['duration'] = pd.to_datetime(data['duration'], format='%H:%M:%S', errors='coerce').dt.hour\n    sns.histplot(data=data, x='duration', kde=True, color='blue')\n    plt.axvline(data['duration'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean')\n    plt.legend()\n    plt.title('What is the distribution of flight durations?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'duration'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'duration'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'duration'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['delay_time'] = data['arr_delay'] - data['dep_delay']\n    avg_delay = data.groupby('carrier')['delay_time'].mean().reset_index()\n    chart = sns.barplot(x='carrier', y='delay_time', data=avg_delay)\n    chart.set(title='What is the average delay time for each airline?')\n    chart.axhline(avg_delay['delay_time'].mean(), color='red', label='Average delay time: {:.2f}'.format(avg_delay['delay_time'].mean()))\n    chart.legend()\n    return chart\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'arr_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'arr_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'arr_delay'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['dep_delay'] = pd.to_numeric(data['dep_delay'], errors='coerce')\n    data['arr_delay'] = pd.to_numeric(data['arr_delay'], errors='coerce')\n    chart = sns.scatterplot(x='dep_delay', y='arr_delay', data=data)\n    plt.title('What is the relationship between departure delay and arrival delay?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'dep_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'dep_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'dep_delay'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    sns.histplot(data=data, x='distance', kde=True, color='blue')\n    plt.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean Distance: {:.2f}'.format(data['distance'].mean()))\n    plt.legend()\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data = data.groupby('AIRLINE')['CANCELLED'].sum().reset_index()\n    sns.barplot(x='AIRLINE', y='CANCELLED', data=data)\n    plt.title('What is the distribution of flight cancellations by airline?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'AIRLINE'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 7718, in groupby\n    return DataFrameGroupBy(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 882, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 882, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'AIRLINE'\n"}}]]}