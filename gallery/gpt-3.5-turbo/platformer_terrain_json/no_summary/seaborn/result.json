{"summary": {"file_name": "platformer-terrain.json"}, "goals": [{"index": 0, "question": "What is the distribution of terrain types in the platformer game?", "visualization": "Bar chart of terrain types", "rationale": "This visualization will help us understand the frequency of different terrain types in the game and identify any patterns or imbalances."}, {"index": 1, "question": "What is the average length of a level in the platformer game?", "visualization": "Histogram of level lengths", "rationale": "This visualization will help us understand the distribution of level lengths and identify any outliers or trends."}, {"index": 2, "question": "What is the correlation between the difficulty of a level and the number of enemies?", "visualization": "Scatter plot of difficulty and number of enemies", "rationale": "This visualization will help us understand if there is a relationship between the difficulty of a level and the number of enemies, which can inform level design decisions."}, {"index": 3, "question": "What is the distribution of power-ups in the platformer game?", "visualization": "Pie chart of power-up types", "rationale": "This visualization will help us understand the frequency of different power-up types in the game and identify any imbalances or opportunities for improvement."}, {"index": 4, "question": "What is the average completion time for a level in the platformer game?", "visualization": "Box plot of completion times", "rationale": "This visualization will help us understand the distribution of completion times and identify any outliers or trends, which can inform level design decisions and player expectations."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data = data.groupby('terrain_type').size().reset_index(name='counts')\n    chart = sns.barplot(x='terrain_type', y='counts', data=data)\n    chart.set_title('What is the distribution of terrain types in the platformer game?', wrap=True)\n    return chart\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['level_length'] = data['end'] - data['start']\n    sns.histplot(data=data, x='level_length', kde=True, color='blue')\n    plt.axvline(data['level_length'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['level_length'].mean():.2f}\")\n    plt.legend()\n    plt.title(\"What is the average length of a level in the platformer game?\", wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data = data.astype({'difficulty': 'float64', 'enemies': 'float64'})\n    sns.scatterplot(data=data, x='difficulty', y='enemies')\n    plt.title('What is the correlation between the difficulty of a level and the number of enemies?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    power_ups = data['power_up_type'].value_counts()\n    plt.pie(power_ups, labels=power_ups.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of power-ups in the platformer game?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['completion_time'] = pd.to_datetime(data['completion_time'], format='%M:%S', errors='coerce')\n    sns.boxplot(x=data['completion_time'].dt.total_seconds()/60)\n    plt.axvline(x=data['completion_time'].dt.total_seconds().mean()/60, color='r', label=f\"Mean: {data['completion_time'].dt.total_seconds().mean()/60:.2f} minutes\")\n    plt.legend()\n    plt.title(\"What is the average completion time for a level in the platformer game?\", wrap=True)\n    return plt;\n\nchart = plot(data)"]], "filename": "platformer-terrain.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data = data.groupby('terrain_type').size().reset_index(name='counts')\n    chart = sns.barplot(x='terrain_type', y='counts', data=data)\n    chart.set_title('What is the distribution of terrain types in the platformer game?', wrap=True)\n    return chart\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'terrain_type'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 7718, in groupby\n    return DataFrameGroupBy(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 882, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 882, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'terrain_type'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['level_length'] = data['end'] - data['start']\n    sns.histplot(data=data, x='level_length', kde=True, color='blue')\n    plt.axvline(data['level_length'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['level_length'].mean():.2f}\")\n    plt.legend()\n    plt.title(\"What is the average length of a level in the platformer game?\", wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'end'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'end'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'end'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data = data.astype({'difficulty': 'float64', 'enemies': 'float64'})\n    sns.scatterplot(data=data, x='difficulty', y='enemies')\n    plt.title('What is the correlation between the difficulty of a level and the number of enemies?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "\"Only a column name can be used for the key in a dtype mappings argument. 'difficulty' not found in columns.\"", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/generic.py\", line 5879, in astype\n    raise KeyError(\nKeyError: \"Only a column name can be used for the key in a dtype mappings argument. 'difficulty' not found in columns.\"\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    power_ups = data['power_up_type'].value_counts()\n    plt.pie(power_ups, labels=power_ups.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of power-ups in the platformer game?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'power_up_type'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'power_up_type'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'power_up_type'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['completion_time'] = pd.to_datetime(data['completion_time'], format='%M:%S', errors='coerce')\n    sns.boxplot(x=data['completion_time'].dt.total_seconds()/60)\n    plt.axvline(x=data['completion_time'].dt.total_seconds().mean()/60, color='r', label=f\"Mean: {data['completion_time'].dt.total_seconds().mean()/60:.2f} minutes\")\n    plt.legend()\n    plt.title(\"What is the average completion time for a level in the platformer game?\", wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'completion_time'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'completion_time'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'completion_time'\n"}}]]}