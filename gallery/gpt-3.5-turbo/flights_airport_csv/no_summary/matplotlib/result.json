{"summary": {"file_name": "flights-airport.csv"}, "goals": [{"index": 0, "question": "What is the distribution of departure delays?", "visualization": "Histogram of departure delays", "rationale": "This tells us how frequently flights are delayed and by how much, which can help identify patterns and potential causes of delays."}, {"index": 1, "question": "What is the relationship between departure delays and arrival delays?", "visualization": "Scatter plot of departure delays vs arrival delays", "rationale": "This can help us understand if there is a correlation between the two variables and if so, how strong it is. It can also help identify outliers and potential causes of delays."}, {"index": 2, "question": "What is the distribution of flight distances?", "visualization": "Histogram of flight distances", "rationale": "This tells us how far most flights are traveling and can help identify potential factors that affect flight distance, such as airline or destination."}, {"index": 3, "question": "What is the distribution of flight cancellations?", "visualization": "Bar chart of flight cancellations by airline", "rationale": "This tells us which airlines have the highest number of cancellations and can help identify potential factors that affect cancellations, such as weather or mechanical issues."}, {"index": 4, "question": "What is the distribution of flight delays by airline?", "visualization": "Box plot of flight delays by airline", "rationale": "This tells us how each airline performs in terms of delays and can help identify potential factors that affect delays, such as airline policies or airport congestion."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'].hist(bins=50, color='blue', alpha=0.5)\n    plt.axvline(data['DEPARTURE_DELAY'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['DEPARTURE_DELAY'].mean():0.2f}\")\n    plt.axvline(data['DEPARTURE_DELAY'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['DEPARTURE_DELAY'].median():0.2f}\")\n    plt.legend()\n    plt.title('What is the distribution of departure delays?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'] = pd.to_numeric(data['DEPARTURE_DELAY'], errors='coerce')\n    data['ARRIVAL_DELAY'] = pd.to_numeric(data['ARRIVAL_DELAY'], errors='coerce')\n    data = data.dropna(subset=['DEPARTURE_DELAY', 'ARRIVAL_DELAY'])\n    fig, ax = plt.subplots()\n    ax.scatter(data['DEPARTURE_DELAY'], data['ARRIVAL_DELAY'], alpha=0.5)\n    ax.set_xlabel('Departure Delay (minutes)')\n    ax.set_ylabel('Arrival Delay (minutes)')\n    ax.axhline(y=data['ARRIVAL_DELAY'].median(), color='r', linestyle='--', label='Median Arrival Delay')\n    ax.axvline(x=data['DEPARTURE_DELAY'].median(), color='g', linestyle='--', label='Median Departure Delay')\n    ax.legend()\n    return plt\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    plt.hist(data['distance'], bins=50, color='blue', alpha=0.5)\n    plt.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['distance'].mean():0.2f}\")\n    plt.axvline(data['distance'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['distance'].median():0.2f}\")\n    plt.legend(loc='upper right')\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['Cancelled'] = data['Cancelled'].astype(int)\n    cancelled_by_airline = data.groupby('UniqueCarrier')['Cancelled'].sum().sort_values(ascending=False)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(cancelled_by_airline.index, cancelled_by_airline.values, color='blue')\n    ax.set_xlabel('Airline')\n    ax.set_ylabel('Number of cancellations')\n    ax.set_title('What is the distribution of flight cancellations?')\n    for i, v in enumerate(cancelled_by_airline.values):\n        ax.text(i, v, str(v), color='black', ha='center')\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'] = pd.to_numeric(data['DEPARTURE_DELAY'], errors='coerce')\n    data = data.dropna(subset=['DEPARTURE_DELAY'])\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.boxplot(data.groupby('AIRLINE')['DEPARTURE_DELAY'].apply(list), showfliers=False)\n    ax.set_xticklabels(data['AIRLINE'].unique())\n    ax.set_xlabel('Airline')\n    ax.set_ylabel('Departure Delay (minutes)')\n    plt.title('What is the distribution of flight delays by airline?', wrap=True)\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-airport.csv", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'].hist(bins=50, color='blue', alpha=0.5)\n    plt.axvline(data['DEPARTURE_DELAY'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['DEPARTURE_DELAY'].mean():0.2f}\")\n    plt.axvline(data['DEPARTURE_DELAY'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['DEPARTURE_DELAY'].median():0.2f}\")\n    plt.legend()\n    plt.title('What is the distribution of departure delays?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'DEPARTURE_DELAY'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'DEPARTURE_DELAY'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'DEPARTURE_DELAY'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'] = pd.to_numeric(data['DEPARTURE_DELAY'], errors='coerce')\n    data['ARRIVAL_DELAY'] = pd.to_numeric(data['ARRIVAL_DELAY'], errors='coerce')\n    data = data.dropna(subset=['DEPARTURE_DELAY', 'ARRIVAL_DELAY'])\n    fig, ax = plt.subplots()\n    ax.scatter(data['DEPARTURE_DELAY'], data['ARRIVAL_DELAY'], alpha=0.5)\n    ax.set_xlabel('Departure Delay (minutes)')\n    ax.set_ylabel('Arrival Delay (minutes)')\n    ax.axhline(y=data['ARRIVAL_DELAY'].median(), color='r', linestyle='--', label='Median Arrival Delay')\n    ax.axvline(x=data['DEPARTURE_DELAY'].median(), color='g', linestyle='--', label='Median Departure Delay')\n    ax.legend()\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'DEPARTURE_DELAY'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'DEPARTURE_DELAY'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'DEPARTURE_DELAY'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    plt.hist(data['distance'], bins=50, color='blue', alpha=0.5)\n    plt.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['distance'].mean():0.2f}\")\n    plt.axvline(data['distance'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['distance'].median():0.2f}\")\n    plt.legend(loc='upper right')\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['Cancelled'] = data['Cancelled'].astype(int)\n    cancelled_by_airline = data.groupby('UniqueCarrier')['Cancelled'].sum().sort_values(ascending=False)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(cancelled_by_airline.index, cancelled_by_airline.values, color='blue')\n    ax.set_xlabel('Airline')\n    ax.set_ylabel('Number of cancellations')\n    ax.set_title('What is the distribution of flight cancellations?')\n    for i, v in enumerate(cancelled_by_airline.values):\n        ax.text(i, v, str(v), color='black', ha='center')\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'Cancelled'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Cancelled'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Cancelled'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'] = pd.to_numeric(data['DEPARTURE_DELAY'], errors='coerce')\n    data = data.dropna(subset=['DEPARTURE_DELAY'])\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.boxplot(data.groupby('AIRLINE')['DEPARTURE_DELAY'].apply(list), showfliers=False)\n    ax.set_xticklabels(data['AIRLINE'].unique())\n    ax.set_xlabel('Airline')\n    ax.set_ylabel('Departure Delay (minutes)')\n    plt.title('What is the distribution of flight delays by airline?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'DEPARTURE_DELAY'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'DEPARTURE_DELAY'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'DEPARTURE_DELAY'\n"}}]]}