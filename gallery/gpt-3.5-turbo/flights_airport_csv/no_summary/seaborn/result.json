{"summary": {"file_name": "flights-airport.csv"}, "goals": [{"index": 0, "question": "What is the distribution of departure delays?", "visualization": "Histogram of departure delays", "rationale": "This tells us how many flights are delayed and by how much time on average. It can help identify patterns and potential causes of delays."}, {"index": 1, "question": "What is the relationship between departure delays and arrival delays?", "visualization": "Scatter plot of departure delays vs arrival delays", "rationale": "This can help us understand if there is a correlation between departure and arrival delays. It can also help identify outliers and potential causes of delays."}, {"index": 2, "question": "What is the distribution of flight distances?", "visualization": "Histogram of flight distances", "rationale": "This tells us how far most flights travel. It can help identify potential routes that are more popular or profitable."}, {"index": 3, "question": "What is the distribution of flight cancellations?", "visualization": "Bar chart of flight cancellations by airline", "rationale": "This tells us which airlines have the most cancellations. It can help identify potential issues with specific airlines or routes."}, {"index": 4, "question": "What is the distribution of flight delays by airline?", "visualization": "Box plot of flight delays by airline", "rationale": "This tells us how each airline performs in terms of delays. It can help identify potential issues with specific airlines or routes."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['DepDelay'] = pd.to_numeric(data['DepDelay'], errors='coerce')\n    sns.histplot(data=data, x='DepDelay', kde=True, color='blue')\n    plt.axvline(data['DepDelay'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean Delay: {:.2f}'.format(data['DepDelay'].mean()))\n    plt.legend()\n    plt.title('What is the distribution of departure delays?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'] = pd.to_numeric(data['DEPARTURE_DELAY'], errors='coerce')\n    data['ARRIVAL_DELAY'] = pd.to_numeric(data['ARRIVAL_DELAY'], errors='coerce')\n    chart = sns.scatterplot(x='DEPARTURE_DELAY', y='ARRIVAL_DELAY', data=data)\n    plt.title('What is the relationship between departure delays and arrival delays?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    sns.histplot(data=data, x='distance', kde=True, color='blue')\n    plt.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean Distance: {:.2f}'.format(data['distance'].mean()))\n    plt.legend()\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['Cancelled'] = data['Cancelled'].astype(int)\n    cancelled_flights = data.groupby('UniqueCarrier')['Cancelled'].sum().reset_index()\n    cancelled_flights = cancelled_flights.sort_values(by='Cancelled', ascending=False)\n    plt.figure(figsize=(12,6))\n    sns.barplot(x='UniqueCarrier', y='Cancelled', data=cancelled_flights, palette='Blues_d')\n    plt.title('What is the distribution of flight cancellations?')\n    plt.xlabel('Airline')\n    plt.ylabel('Number of cancellations')\n    for i, v in enumerate(cancelled_flights['Cancelled']):\n        plt.text(i, v+1000, str(v), ha='center')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'] = pd.to_numeric(data['DEPARTURE_DELAY'], errors='coerce')\n    sns.boxplot(x='AIRLINE', y='DEPARTURE_DELAY', data=data)\n    plt.title('What is the distribution of flight delays by airline?', wrap=True)\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-airport.csv", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['DepDelay'] = pd.to_numeric(data['DepDelay'], errors='coerce')\n    sns.histplot(data=data, x='DepDelay', kde=True, color='blue')\n    plt.axvline(data['DepDelay'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean Delay: {:.2f}'.format(data['DepDelay'].mean()))\n    plt.legend()\n    plt.title('What is the distribution of departure delays?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'DepDelay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'DepDelay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'DepDelay'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'] = pd.to_numeric(data['DEPARTURE_DELAY'], errors='coerce')\n    data['ARRIVAL_DELAY'] = pd.to_numeric(data['ARRIVAL_DELAY'], errors='coerce')\n    chart = sns.scatterplot(x='DEPARTURE_DELAY', y='ARRIVAL_DELAY', data=data)\n    plt.title('What is the relationship between departure delays and arrival delays?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'DEPARTURE_DELAY'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'DEPARTURE_DELAY'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'DEPARTURE_DELAY'\n"}}], [{"spec": null, "status": true, "raster": "iVBORw0KGgoAAAANSUhEUgAAAoAAAAHgCAYAAAA10dzkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAACzPElEQVR4nOydeXgUVdaHf13VW9Lpzr4ASYCwhLCZsG8CIosg4w6uoDOKOgjKqKOo6OjIgOPngoI6iIiO6AwwqKggKIqyiKAIooJsYQkBQsieTjrpqq7vj0t1es9Wne5Kzvs8/XR3LeeeuufWrVN3OVcjSZIEgiAIgiAIos3AhVoBgiAIgiAIomUhB5AgCIIgCKKNQQ4gQRAEQRBEG4McQIIgCIIgiDYGOYAEQRAEQRBtDHIACYIgCIIg2hjkABIEQRAEQbQxyAEkCIIgCIJoY5ADSBAEQRAE0cYgB5AgCIIgCKKNQQ4gQRAEQRBEG4McQIIgCIIgiDYGOYAEQRAEQRBtDHIACYIgCIIg2hjkABIEQRAEQbQxyAEkCIIgCIJoY5ADSBAEQRAE0cYgB5Bo02RmZuLvf/97yNJfvHgxMjMzWySN4uLioKZTX/qujBkzBnPnzg162qdPn0ZmZiY+/PBD57a5c+ciJycn6GnLZGZmYvHixS2WXlPYv38/brrpJmRnZyMzMxMHDx70e+yJEyfwpz/9Cf3790dmZiY2b96MDz/8EJmZmTh9+rTzuGnTpmHatGlN0mfatGmYPHlyk85tCqEsowQRKsgBJFTJhg0bkJmZiS+//NJr31VXXYXMzEx8//33XvtGjx6Nm266KWh6HT16FIsXL3Z7ELYU//rXv7B58+YWT7el+Pbbb8PWkQpn3erDbrdjzpw5KC0txWOPPYbnn38e7du393v83LlzcfjwYfzlL3/B888/j969e7egtu4UFBRg8eLFAR3WlkTN5aA+Tp8+jfnz52PChAm45JJLMHHiRPznP/8JtVpEM9CGWgGCaAr9+/cHAOzZswfjxo1zbq+srMSRI0eg1Wrx008/YciQIc59Z8+exdmzZzFp0qSg6XX06FEsWbIEgwYNQmpqar3H//nPf8bdd9+tSNpLly7FhAkTMHbsWEXkBZONGzdCo9E06pxvv/0W77//PmbPnt3gczp06ID9+/dDqw1uVRdIt/3794Pn+aCm3xxOnTqF/Px8zJ8/H1OmTAl4rM1mw969e3HvvffitttuC3js8uXLlVTTJ+fPn8eSJUvQoUMHZGVlKSq7pcqoWliyZAn27duHq6++GvHx8di0aROefvppGAwGXHfddaFWj2gC5AASqiQ5ORmpqanYs2eP2/a9e/dCkiRcccUVXvvk/7LzGA5otdqgOyfhiF6vD6p8QRDgcDig1+thMBiCmlZ9hDr9+pCHBpjN5gYfa7FY6j022DYONmrXX2luvfVW/OMf/3C+zFx//fUYO3YsPv30U3IAVQp1AROqpX///jh48CBsNptz208//YRu3brh0ksvxc8//wyHw+G2T6PRoF+/fl6yNm/ejMmTJ6N379648sorsXXrVrf9+fn5ePrppzFhwgT07dsXgwcPxv333+/W1fvhhx/igQceAABMnz4dmZmZyMzMxK5du/xeg6+xRzt27MDNN9+MAQMGICcnBxMmTMBLL70UMC8yMzNRVVWFjz76yJmu5/iliooKzJ07FwMGDED//v3x2GOPobq62kvWunXrcN1116Fv374YNGgQ/vKXv+Ds2bMB05f58ccfcf3116NPnz4YO3Ys/vvf//o8znN8ld1ux5IlSzB+/Hj06dMHgwcPxs0334wdO3YAYN2O77//vvNa5Q9QN85v+fLleOeddzB27Fj06dMHx44d8zkGUCYvLw933nknsrOzMWLECCxZsgSSJDn379q1y6f9PGUG0k3e5tkteODAAdx1113o168fcnJycPvtt2Pfvn1ux8jj6vbs2YOFCxdiyJAhyM7Oxn333dfg8Zw7d+7ELbfcguzsbAwYMAB//vOfcezYMef+uXPnOlvyHnjgAWRmZvodt7d48WJcdtllAIDnn38emZmZGDNmjN+0fY0BzM/Px7333ovs7GwMHToUCxYswLZt2/zeJ0ePHsW0adNwySWX4NJLL8WyZcuc+3bt2oUbbrgBAPDYY485892XrV0JRRkFWIvoTTfdhMGDB6Nv37647rrrsHHjRq905XHJ9dVJAOsCf/zxxzFixAj07t0bY8aMwd/+9jfU1tY6jykvL8c//vEPjBo1Cr1798a4cePw5ptvutWNALB+/Xpcd911yMnJQb9+/fCHP/wB7777rnN/nz593Fqy5ZdXu90eML+J8KXtNT0QrYb+/ftj3bp1+PnnnzF48GAAzMmTK7CKigocPnwYPXr0cO7LyMhAbGysm5w9e/bgiy++wC233AKTyYT33nsP999/P7Zs2eI89pdffsHevXtx5ZVXIiUlBfn5+fjPf/6D6dOnY/369YiIiMDAgQMxbdo0vPfee7j33nuRkZEBAOjSpUuDr+nIkSO45557kJmZifvvvx96vR4nT57ETz/9FPC8559/HvPmzUPfvn0xdepUAEB6errbMXPmzEFqaioefPBBHDhwAGvWrEFcXBz++te/Oo9544038Morr2DixIm44YYbUFxcjJUrV+LWW2/Fxx9/HLDl59ChQ7jzzjsRFxeH2bNnQxAELF68GPHx8fVe95IlS7B06VJMmTIFffv2RWVlJX799Vf89ttvGD58OG688UacP38eO3bswPPPP+9TxocffoiamhpMnToVer0e0dHRXg85GVEUcdddd+GSSy7BX//6V2zbtg2LFy+GKIpOJ76hNEQ3V44cOYJbb70VJpMJd911F7RaLVatWoVp06Zh5cqVuOSSS9yOnz9/PiwWC2bNmoX8/Hy8++67+Pvf/45FixYFTOe7777DjBkzkJqailmzZsFms2HlypW4+eab8eGHHyI1NRU33ngjkpOT8a9//QvTpk1Dnz59kJCQ4FPeuHHjYDabsXDhQkyePBkjR46EyWRqcD5VVVXh9ttvR2FhIaZPn46EhAR89tlnfl+QysrKcNddd2HcuHGYOHEiNm3ahBdeeAHdu3fHqFGj0KVLF9x///149dVXceONNzpb9n294MmEsoz++9//xpgxY/CHP/wBdrsd69evxwMPPIClS5di9OjRbsc2pE4qKCjADTfcgIqKCkydOhUZGRkoKCjApk2bYLPZoNfrUV1djdtuuw0FBQW46aab0K5dO+zduxcvvfQSCgsL8cQTTwBgL50PPvgghg4diocffhgAkJubi59++gm33367z/x47733kJeXh/vuu6/evCPCFIkgVMqRI0ek7t27S6+99pokSZJkt9ul7Oxs6aOPPpIkSZKGDRsmrVy5UpIkSaqoqJCysrKkefPmucno3r271KtXL+nkyZPObQcPHpS6d+8uvffee85t1dXVXunv3btX6t69uzM9SZKkzz//XOrevbv0/fffN+gaXn31Val79+7O/ytWrJC6d+8uFRUVNeh8V7Kzs6VHH33UbxqPPfaY2/b77rtPGjRokPP/6dOnpaysLOmNN95wO+7QoUNSz549vbZ7MnPmTKlPnz5Sfn6+c9vRo0elrKwst2uUJEm67LLL3HS96qqrpLvvvjug/GeeecZLjiRJUl5entS9e3epX79+Xvkm71u7dq1z26OPPip1795devbZZ53bHA6HdPfdd0u9evVyyvj+++992tKXTH+6SRIrY6+++qrz/8yZM6VevXpJp06dcm4rKCiQcnJypFtvvdW5be3atVL37t2lO+64Q3I4HM7tCxYskLKysqTy8nLfGXWRq6++Who6dKhUUlLi3Hbw4EGpR48e0iOPPOLcJl/n559/HlCe67W/9dZbbttlXfPy8pzbbrvtNum2225z/n/77bel7t27S19++aVzm81mk6644gqvfL7tttu87q2amhpp+PDh0uzZs53b9u/f72WLQISqjEqSdx1SW1srTZ48WZo+fbrb9obWSY888ojUo0cPaf/+/V5pyeXltddek7Kzs6Xjx4+77X/hhRekrKws6cyZM5IkSdL8+fOlfv36SYIgBLw+mXXr1kmZmZnSU0891aDjifCEuoAJ1dKlSxfExMQ4x/b9/vvvqKqqcob4yMnJcbac7du3D6Io+hz/N2zYMLfWsh49eiAqKgp5eXnObUaj0fnbbrejpKQE6enpsFgsOHDggGLXJLewffXVV35br5qK5+znAQMGoLS0FJWVlQCAL7/8Eg6HAxMnTkRxcbHzk5CQgI4dOwbsyhZFEdu3b8fYsWPdZpB26dIFI0aMqFc3i8WCI0eO4MSJE027OADjx49HXFxcg4+/9dZbnb81Gg1uvfVW2O127Ny5s8k61IcoitixYwfGjh2LtLQ05/akpCRMnjwZe/bscdpDZurUqW6TEQYMGABRFJGfn+83nfPnz+PgwYO49tprERMT49zeo0cPDBs2DN9++61yF9VAtm3bhuTkZFx++eXObQaDwdli7UlkZCSuvvpq53+9Xo8+ffq43ZeNIdRl1LUOKSsrQ0VFBfr37++z/qivTnI4HNi8eTMuu+wy9OnTx+t8ubxs3LgR/fv3h8Vicbunhw0bBlEU8cMPPzivrbq62tmdHYhjx47h8ccfx+WXX46//e1vjcsEIqygLmBCtWg0GuTk5ODHH3+Ew+HATz/9hPj4eHTs2BEAcwDlMTmyI+jLAWzXrp3XtujoaJSXlzv/22w2LF26FB9++CEKCgrcxopVVFQodk2T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999/HxUVFcjLy8NLL72Enj17urX6hi0REUCvXkEJBM1xnFsLJxH+tDabhSJgQEunqSabqaoLuG/fvtiwYQPefPNNSJKEDh06YMqUKbjzzjudTbEDBgzA4sWLsWjRIvzvf/9D+/btMX/+fEycONFN1rx582AymfDiiy/CarWiX79+WLFiRdBWAWmNREREYMyYMVi/fj1Gjx6Nzz77DDk5OUhLS/M6dsmSJYiOjsaKFSucb0b9+vXD5ZdfjjVr1uDmm2+GIAiYO3eu88YRRRHDhw/H0KFDsWnTJmfQboC12K5cudI5UDciIgLTp0/Hzz//7NXN11BSUlIAwGtwucz+/fuRmZmJe+65x7lNfvEA4Bzc27FjR6/u0oULFzp/i6KInJwcjBw5Et9//z1GjBjh3FdRUYGPP/7YOW6qqqoKjz32GM6dO4eUlBTs2LED33zzDV588UW3llbX3y+++CJ69+6NJUuWOJ2z7t27Y/Lkyfj2228xatQoAKyiakjQ4zFjxqBv375o37498vLy8K9//Qu33HILPvzwQ7Rr1w5arRZmsxl33XUXBg4cCIPBgO+//x5vv/02cnNzsXTpUgAs2LrdbseyZcswcOBALFmyBMXFxfi///s/zJ492y14e1MZMGAAlixZgoceegh///vfATC7vPXWW+oI8HzyJPDss8CTTwIdOyoqura2FoWFhUhMTAzYJUaED63NZhwHrF0L+KliFSchAfBYBTboqMlmqnIA7777btx99931Hnf55Zc7u+P8odfr8eijj+LRRx9VSr3mcfYs+7gSGwt07gzYbICvVim5RePQIcBqdd/XqRMQFwcUFgIeM/hgNgPdugGiCJw/DzRj+avJkyfjoYcegs1mw4YNGzBt2jSfx+3YsQOTJk1yzlAF2KDenj17OrtuRVHEr7/+isWLF+PAgQNurX6eswWTkpLcZsnJE4A8Z581hvq6CHv27IkPPvgACxcuxLhx43DJJZc0eEDut99+izfeeANHjhxxm4B04sQJNwewR48eboPm5euSHcCdO3ciIiICV155pc90qqur8dNPP+GRRx5xm/3XqVMntGvXDr/88ovTAXz33XcbpPu8efOcvwcMGIDhw4dj4sSJePvttzF37lxotVr07NnTbeLL0KFDkZSUhL///e/Yv38/+vbt6xzcbTKZsGTJErfB6H/84x+xc+dODB06tEE6+UO+9qlTp2L06NEoLS3F66+/jrvvvhsffPBBwHE3YUFREbB8OTBzpuIOoCiKKCkp8ZqUQYQvrdFmFy54P+paE2qymaocwFbN0qXAM8+4b7v1VmDlSuD0aaB/f+9zZIfljjuA77933/fee8BttwGrVwOzZrnvGz8e2LSJOY1LlwJPP91ktUeMGAGdTodXXnkFp0+f9mpplSkpKcG7777r0+mQnaizZ8/irrvuQu/evfHMM88gKSkJOp0O99xzj1fIAc8ZUrKMQOFl6kN2Hj1ni8lcd911sFqtWL16Nd555x2YzWZcc801ePjhhwM6Fvv378fMmTNx+eWXY8aMGYiPj4dGo8HUqVMbfV2lpaVITEz0O+6uvLwcoihi4cKFbq2OMr7CuTSWpKQk9O/f329XuczEiRPx97//Hb/++iv69u0Li8UCjUaDfv36ub0ZDxo0CDzP4+jRo812AOfPn48hQ4a4jYnMzs7G6NGjsW7dOrdWZIIgiLYMOYDhwj33AFdd5b5Nnl6emgrs2eP/3Hfe8d0CCABTpwKeD1W5m9tkYuk2A51Oh/Hjx+Odd97B0KFD/c6ajY6OxqhRo3DLLbd47ZPDLuzYsQNVVVVYsmSJ0xGSp9S3BNu2bYNer3fGC/OE4zjcfvvtuP3221FQUID169fjxRdfRGxsLO677z6/cjdv3oyoqCgsWrTI2b3tGR+qocTExKCwsBCSJPl0As1mMzQaDe655x637mkZz5AFLUlERAQ6dOjgd39znHeZY8eOebX+p6SkIDY21msyDUEQRFuGHMBwoV07/12xRmNdd68vMjP970tMZB9f8Hyzun9lpkyZgqKiIkydOtXvMUOHDsWRI0fQs2dPn2Ox5ADBGo3Gbar/559/7jVRIhhs3boVX375JaZMmdKg9ZqTk5Pxpz/9CZ999pkzzJC/VkibzQadTufmsH366adN0nPYsGFYtmwZPv/8c5+TbSIjI5GdnY3c3Fy/4ViaS0FBAfbs2YOrPF9YPFi/fj0AuOlx2WWXYePGjaipqXGOBf3+++8hiqJfx7sxtG/f3qtlMj8/HyUlJQGdT4IgiLYGOYBEs+nbty9ef/31gMfcf//9uOGGG3DnnXdi6tSpSEhIwIULF7B7924MGDAAkyZNcnb/PfbYY7jppptw5MgRrFixwqtbtLmcPXsW+/btgyAIKCwsxLZt27Bu3TpccsklAceEPvXUU7BYLMjOzobFYsFPP/2E33//HTfffDMA1nVssViwfv16Z1iizMxMDB8+HO+++y6effZZjBs3Dnv37sW6deuapPuwYcMwatQoPP744zh16hQuueQSlJaWYtOmTVi0aBEA4JFHHsHtt9+OOXPm4Morr4TFYsG5c+fw3Xff4brrrsPgwYMBALfffjvOnDmDL7/80m96n332GbZs2YJRo0YhKSkJeXl5ePPNN8HzPP74xz86nfWHH34YHTt2RM+ePZ2TQN555x2MHTvWzQG88847sW7dOsycORPTp09HcXExXnzxRfTv398tnuS4cePQvn17tyEDu3fvRnFxMY4ePQqAOY75+fno0KGDM42bbroJCxYswPz58zFmzBiUlpbijTfeQHx8vN/hCWFFcjIwdy77VhitVouEhISA8eiI8IJspj7UZLPw15BoFXTs2BFr1qzBokWL8Mwzz6CqqgqJiYkYOHCgc7meXr16YeHChViyZAnuueceZGVl4ZVXXsGcOXMU1eW9997De++957YU3DPPPINrrrkm4E2bk5OD1atXY82aNaiurkZaWhoee+wxTJkyBQDrIl64cCFeeuklZ3ibr776CqNGjcLDDz+MlStX4sMPP0S/fv2wdOlSTJgwoUn6L168GEuWLMGqVauwZMkSxMfHY/jw4c79/fr1wwcffIDFixfjscceg91uR0pKCoYMGYKOLhMLHA6H1zJRnqSmpuL8+fNYsGABKioqYDabMWTIENx///1IT093HtetWzd8+umnePvtt2G329GhQwfce++9XpO22rVrh3//+99YsGABZs+ejYiICFx++eWYO3euWwupKIpeKwIsXrwYu3fvdv5/4YUXAADXXnstnnvuOQDA9OnTodfr8Z///Adr166FyWRCdnY2Fi1aFNLu7wbToQPgY+ymEuh0OudMdzXhcLDZo609TV+o1WZtGTXZTCOpIjqq+rHZbDh+/Dg6d+4c/jMRQ4C8eLZnXDkifGlNNgub+7Oigo337d+/bqyuQoiiiOrqakRERKgjJI4LrT10iD/UbDN/LF3acrOA27Vr9jD3RqMmm1ELIBEWSJKE2traRq8sQYQOslkQOHIEuOwy5gQqHLi6trYWJ06ccC5kryZae+gQf6jZZm0VNdksDBq5CYIgCIIgiJaEHECCIJoMtfwR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", "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    sns.histplot(data=data, x='distance', kde=True, color='blue')\n    plt.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean Distance: {:.2f}'.format(data['distance'].mean()))\n    plt.legend()\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['Cancelled'] = data['Cancelled'].astype(int)\n    cancelled_flights = data.groupby('UniqueCarrier')['Cancelled'].sum().reset_index()\n    cancelled_flights = cancelled_flights.sort_values(by='Cancelled', ascending=False)\n    plt.figure(figsize=(12,6))\n    sns.barplot(x='UniqueCarrier', y='Cancelled', data=cancelled_flights, palette='Blues_d')\n    plt.title('What is the distribution of flight cancellations?')\n    plt.xlabel('Airline')\n    plt.ylabel('Number of cancellations')\n    for i, v in enumerate(cancelled_flights['Cancelled']):\n        plt.text(i, v+1000, str(v), ha='center')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'Cancelled'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Cancelled'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Cancelled'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['DEPARTURE_DELAY'] = pd.to_numeric(data['DEPARTURE_DELAY'], errors='coerce')\n    sns.boxplot(x='AIRLINE', y='DEPARTURE_DELAY', data=data)\n    plt.title('What is the distribution of flight delays by airline?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'DEPARTURE_DELAY'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'DEPARTURE_DELAY'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'DEPARTURE_DELAY'\n"}}]]}