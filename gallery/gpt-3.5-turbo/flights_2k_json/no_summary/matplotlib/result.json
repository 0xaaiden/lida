{"summary": {"file_name": "flights-2k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "Histogram of departure_delay", "rationale": "This tells us how many flights are delayed and by how much time. It can help us identify patterns and trends in flight delays."}, {"index": 1, "question": "What is the relationship between departure delay and arrival delay?", "visualization": "Scatter plot of departure_delay vs arrival_delay", "rationale": "This helps us understand if there is a correlation between departure delay and arrival delay. It can help us identify if a delay in departure leads to a delay in arrival."}, {"index": 2, "question": "What is the distribution of flight distances?", "visualization": "Histogram of distance", "rationale": "This tells us how far the flights are traveling. It can help us identify if there are any outliers or if most flights are traveling similar distances."}, {"index": 3, "question": "What is the distribution of flight cancellations?", "visualization": "Bar chart of cancelled vs not cancelled flights", "rationale": "This tells us how many flights were cancelled and how many were not. It can help us identify if there are any patterns or reasons for flight cancellations."}, {"index": 4, "question": "What is the distribution of flight carriers?", "visualization": "Pie chart of carrier", "rationale": "This tells us which airlines are operating the most flights. It can help us identify if there are any dominant airlines in the dataset."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['departure_delay'] = pd.to_numeric(data['departure_delay'], errors='coerce')\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.hist(data['departure_delay'], bins=50, color='blue', alpha=0.5)\n    ax.axvline(data['departure_delay'].median(), color='red', linestyle='dashed', linewidth=2, label=f'Median: {data[\"departure_delay\"].median():.2f}')\n    ax.axvline(data['departure_delay'].mean(), color='green', linestyle='dashed', linewidth=2, label=f'Mean: {data[\"departure_delay\"].mean():.2f}')\n    ax.set_xlabel('Departure Delay (minutes)')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['departure_delay'] = pd.to_datetime(data['departure_delay'], format='%Y-%m-%d %H:%M:%S', errors='coerce')\n    data['arrival_delay'] = pd.to_datetime(data['arrival_delay'], format='%Y-%m-%d %H:%M:%S', errors='coerce')\n    plt.scatter(data['departure_delay'], data['arrival_delay'], alpha=0.5)\n    plt.xlabel('Departure Delay')\n    plt.ylabel('Arrival Delay')\n    plt.title('What is the relationship between departure delay and arrival delay?')\n    return plt\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.hist(data['distance'], bins=50, color='blue', alpha=0.5)\n    ax.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['distance'].mean():0.2f}\")\n    ax.axvline(data['distance'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['distance'].median():0.2f}\")\n    ax.set_xlabel('Distance')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    cancelled = data['cancelled'].value_counts()\n    fig, ax = plt.subplots()\n    ax.bar(cancelled.index.astype(str), cancelled.values)\n    ax.set_xlabel('Cancelled')\n    ax.set_ylabel('Count')\n    ax.set_title('What is the distribution of flight cancellations?')\n    ax.axhline(cancelled[1], color='red', label=f\"Cancelled: {cancelled[1]:0.2f}\")\n    ax.axhline(cancelled[0], color='green', label=f\"Not Cancelled: {cancelled[0]:0.2f}\")\n    ax.legend()\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    carrier_counts = data['carrier'].value_counts()\n    fig, ax = plt.subplots()\n    ax.pie(carrier_counts, labels=carrier_counts.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of flight carriers?', wrap=True)\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-2k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['departure_delay'] = pd.to_numeric(data['departure_delay'], errors='coerce')\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.hist(data['departure_delay'], bins=50, color='blue', alpha=0.5)\n    ax.axvline(data['departure_delay'].median(), color='red', linestyle='dashed', linewidth=2, label=f'Median: {data[\"departure_delay\"].median():.2f}')\n    ax.axvline(data['departure_delay'].mean(), color='green', linestyle='dashed', linewidth=2, label=f'Mean: {data[\"departure_delay\"].mean():.2f}')\n    ax.set_xlabel('Departure Delay (minutes)')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'departure_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'departure_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'departure_delay'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['departure_delay'] = pd.to_datetime(data['departure_delay'], format='%Y-%m-%d %H:%M:%S', errors='coerce')\n    data['arrival_delay'] = pd.to_datetime(data['arrival_delay'], format='%Y-%m-%d %H:%M:%S', errors='coerce')\n    plt.scatter(data['departure_delay'], data['arrival_delay'], alpha=0.5)\n    plt.xlabel('Departure Delay')\n    plt.ylabel('Arrival Delay')\n    plt.title('What is the relationship between departure delay and arrival delay?')\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'departure_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'departure_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'departure_delay'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.hist(data['distance'], bins=50, color='blue', alpha=0.5)\n    ax.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['distance'].mean():0.2f}\")\n    ax.axvline(data['distance'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['distance'].median():0.2f}\")\n    ax.set_xlabel('Distance')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    cancelled = data['cancelled'].value_counts()\n    fig, ax = plt.subplots()\n    ax.bar(cancelled.index.astype(str), cancelled.values)\n    ax.set_xlabel('Cancelled')\n    ax.set_ylabel('Count')\n    ax.set_title('What is the distribution of flight cancellations?')\n    ax.axhline(cancelled[1], color='red', label=f\"Cancelled: {cancelled[1]:0.2f}\")\n    ax.axhline(cancelled[0], color='green', label=f\"Not Cancelled: {cancelled[0]:0.2f}\")\n    ax.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'cancelled'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'cancelled'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'cancelled'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    carrier_counts = data['carrier'].value_counts()\n    fig, ax = plt.subplots()\n    ax.pie(carrier_counts, labels=carrier_counts.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of flight carriers?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'carrier'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'carrier'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 10, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'carrier'\n"}}]]}