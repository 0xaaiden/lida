{"summary": {"file_name": "flights-200k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "Histogram of departure_delay field", "rationale": "This tells us how many flights were delayed and by how much time. It can help us identify patterns and trends in flight delays."}, {"index": 1, "question": "What is the average flight time for different airlines?", "visualization": "Bar chart of airline vs. average flight time", "rationale": "This can help us compare the performance of different airlines in terms of flight duration. It can also help us identify which airlines have longer or shorter flights."}, {"index": 2, "question": "What is the busiest time of day for flights?", "visualization": "Line chart of time vs. number of flights", "rationale": "This can help us identify the peak hours for flights and plan accordingly. It can also help us identify any patterns or trends in flight schedules."}, {"index": 3, "question": "What is the distribution of flight distances?", "visualization": "Histogram of distance field", "rationale": "This tells us how far the flights are traveling. It can help us identify which routes are more popular and which airlines are flying longer distances."}, {"index": 4, "question": "What is the relationship between flight distance and arrival delay?", "visualization": "Scatter plot of distance vs. arrival_delay", "rationale": "This can help us identify if there is any correlation between flight distance and arrival delay. It can also help us identify any outliers or patterns in the data."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['departure_delay'].hist(bins=50, color='blue', alpha=0.5)\n    plt.axvline(data['departure_delay'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['departure_delay'].mean():0.2f}\")\n    plt.axvline(data['departure_delay'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['departure_delay'].median():0.2f}\")\n    plt.legend()\n    plt.title(\"What is the distribution of flight delays?\", wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['flight_time'] = pd.to_datetime(data['flight_time'], format='%H:%M:%S', errors='coerce')\n    data['flight_time'] = data['flight_time'].dt.hour + data['flight_time'].dt.minute/60\n    avg_flight_time = data.groupby('airline')['flight_time'].mean().reset_index()\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(avg_flight_time['airline'], avg_flight_time['flight_time'], color='blue')\n    ax.set_xlabel('Airline')\n    ax.set_ylabel('Average Flight Time (hours)')\n    ax.set_title('What is the average flight time for different airlines?')\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['time'] = pd.to_datetime(data['time'], format='%H:%M:%S', errors='coerce')\n    data['hour'] = data['time'].dt.hour\n    hour_counts = data.groupby('hour').size().reset_index(name='counts')\n    plt.plot(hour_counts['hour'], hour_counts['counts'])\n    plt.axvline(hour_counts['hour'].iloc[hour_counts['counts'].idxmax()], color='r', linestyle='--', label=f\"Busiest hour: {hour_counts['hour'].iloc[hour_counts['counts'].idxmax()]:.2f}\")\n    plt.legend()\n    plt.title('What is the busiest time of day for flights?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.hist(data['distance'], bins=50, color='blue', alpha=0.5)\n    ax.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['distance'].mean():0.2f}\")\n    ax.axvline(data['distance'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['distance'].median():0.2f}\")\n    ax.set_xlabel('Distance')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['arrival_delay'] = pd.to_numeric(data['arrival_delay'], errors='coerce')\n    data['distance'] = pd.to_numeric(data['distance'], errors='coerce')\n    data = data.dropna(subset=['arrival_delay', 'distance'])\n    fig, ax = plt.subplots()\n    ax.scatter(data['distance'], data['arrival_delay'], alpha=0.2)\n    ax.set_xlabel('Distance')\n    ax.set_ylabel('Arrival Delay')\n    ax.axhline(y=data['arrival_delay'].median(), color='r', linestyle='--', label='Median Arrival Delay: {:.2f}'.format(data['arrival_delay'].median()))\n    ax.legend()\n    plt.title('What is the relationship between flight distance and arrival delay?', wrap=True)\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-200k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['departure_delay'].hist(bins=50, color='blue', alpha=0.5)\n    plt.axvline(data['departure_delay'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['departure_delay'].mean():0.2f}\")\n    plt.axvline(data['departure_delay'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['departure_delay'].median():0.2f}\")\n    plt.legend()\n    plt.title(\"What is the distribution of flight delays?\", wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'departure_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'departure_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'departure_delay'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['flight_time'] = pd.to_datetime(data['flight_time'], format='%H:%M:%S', errors='coerce')\n    data['flight_time'] = data['flight_time'].dt.hour + data['flight_time'].dt.minute/60\n    avg_flight_time = data.groupby('airline')['flight_time'].mean().reset_index()\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(avg_flight_time['airline'], avg_flight_time['flight_time'], color='blue')\n    ax.set_xlabel('Airline')\n    ax.set_ylabel('Average Flight Time (hours)')\n    ax.set_title('What is the average flight time for different airlines?')\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'flight_time'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'flight_time'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'flight_time'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['time'] = pd.to_datetime(data['time'], format='%H:%M:%S', errors='coerce')\n    data['hour'] = data['time'].dt.hour\n    hour_counts = data.groupby('hour').size().reset_index(name='counts')\n    plt.plot(hour_counts['hour'], hour_counts['counts'])\n    plt.axvline(hour_counts['hour'].iloc[hour_counts['counts'].idxmax()], color='r', linestyle='--', label=f\"Busiest hour: {hour_counts['hour'].iloc[hour_counts['counts'].idxmax()]:.2f}\")\n    plt.legend()\n    plt.title('What is the busiest time of day for flights?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "attempt to get argmax of an empty sequence", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/series.py\", line 2404, in idxmax\n    i = self.argmax(axis, skipna, *args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/base.py\", line 657, in argmax\n    return nanops.nanargmax(  # type: ignore[return-value]\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/nanops.py\", line 93, in _f\n    return f(*args, **kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/nanops.py\", line 1096, in nanargmax\n    result = values.argmax(axis)  # type: ignore[var-annotated]\nValueError: attempt to get argmax of an empty sequence\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.hist(data['distance'], bins=50, color='blue', alpha=0.5)\n    ax.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label=f\"Mean: {data['distance'].mean():0.2f}\")\n    ax.axvline(data['distance'].median(), color='green', linestyle='dashed', linewidth=1, label=f\"Median: {data['distance'].median():0.2f}\")\n    ax.set_xlabel('Distance')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['arrival_delay'] = pd.to_numeric(data['arrival_delay'], errors='coerce')\n    data['distance'] = pd.to_numeric(data['distance'], errors='coerce')\n    data = data.dropna(subset=['arrival_delay', 'distance'])\n    fig, ax = plt.subplots()\n    ax.scatter(data['distance'], data['arrival_delay'], alpha=0.2)\n    ax.set_xlabel('Distance')\n    ax.set_ylabel('Arrival Delay')\n    ax.axhline(y=data['arrival_delay'].median(), color='r', linestyle='--', label='Median Arrival Delay: {:.2f}'.format(data['arrival_delay'].median()))\n    ax.legend()\n    plt.title('What is the relationship between flight distance and arrival delay?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'arrival_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'arrival_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'arrival_delay'\n"}}]]}