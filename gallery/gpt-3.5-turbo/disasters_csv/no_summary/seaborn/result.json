{"summary": {"file_name": "disasters.csv"}, "goals": [{"index": 0, "question": "What is the trend of natural disasters over the years?", "visualization": "line chart of number of disasters vs year", "rationale": "This visualization will help us understand if there is an increase or decrease in the number of natural disasters over time."}, {"index": 1, "question": "Which type of natural disaster is the most frequent?", "visualization": "bar chart of disaster type vs frequency", "rationale": "This visualization will help us identify the most common type of natural disaster and prioritize disaster management efforts accordingly."}, {"index": 2, "question": "What is the distribution of deaths caused by natural disasters?", "visualization": "histogram of number of deaths", "rationale": "This visualization will help us understand the severity of natural disasters and the impact they have on human lives."}, {"index": 3, "question": "Which countries are most affected by natural disasters?", "visualization": "choropleth map of disaster frequency by country", "rationale": "This visualization will help us identify the countries that are most vulnerable to natural disasters and allocate resources accordingly."}, {"index": 4, "question": "What is the economic impact of natural disasters?", "visualization": "stacked bar chart of disaster type vs economic damage", "rationale": "This visualization will help us understand the financial impact of natural disasters and prioritize disaster management efforts accordingly."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['Year'] = pd.to_datetime(data['Year'], format='%Y', errors='coerce')\n    data = data.groupby('Year').sum().reset_index()\n    chart = sns.lineplot(x='Year', y='Disasters', data=data)\n    chart.axhline(y=data['Disasters'].mean(), color='r', linestyle='--', label='Mean')\n    chart.legend()\n    plt.title('What is the trend of natural disasters over the years?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['count'] = 1\n    disaster_counts = data.groupby('Disaster Type')['count'].sum().reset_index()\n    disaster_counts = disaster_counts.sort_values(by='count', ascending=False)\n    sns.set_style(\"whitegrid\")\n    plt.figure(figsize=(10, 6))\n    ax = sns.barplot(x='Disaster Type', y='count', data=disaster_counts, palette='Blues_d')\n    plt.title('Which type of natural disaster is the most frequent?', wrap=True)\n    for p in ax.patches:\n        ax.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['Deaths'] = data['Deaths'].fillna(0)\n    sns.histplot(data=data, x='Deaths', kde=True, color='blue')\n    plt.axvline(data['Deaths'].median(), color='red', linestyle='dashed', linewidth=1, label='Median: {:.2f}'.format(data['Deaths'].median()))\n    plt.title('What is the distribution of deaths caused by natural disasters?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef plot(data: pd.DataFrame):\n    data['count'] = 1\n    data = data.groupby(['Country']).sum().reset_index()\n    fig, ax = plt.subplots(figsize=(12, 8))\n    sns.barplot(x='Country', y='count', data=data, ax=ax)\n    plt.title('Which countries are most affected by natural disasters?', wrap=True)\n    plt.xlabel('Country')\n    plt.ylabel('Disaster Frequency')\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['Year'] = pd.to_datetime(data['Year'], format='%Y', errors='coerce')\n    data = data.groupby(['Year', 'Disaster Type'])['Economic Damage (US$)'].sum().reset_index()\n    chart = sns.barplot(x='Year', y='Economic Damage (US$)', hue='Disaster Type', data=data, palette='bright')\n    chart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.title('What is the economic impact of natural disasters?', wrap=True)\n    return plt\n\nchart = plot(data)"]], "filename": "disasters.csv", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['Year'] = pd.to_datetime(data['Year'], format='%Y', errors='coerce')\n    data = data.groupby('Year').sum().reset_index()\n    chart = sns.lineplot(x='Year', y='Disasters', data=data)\n    chart.axhline(y=data['Disasters'].mean(), color='r', linestyle='--', label='Mean')\n    chart.legend()\n    plt.title('What is the trend of natural disasters over the years?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "Could not interpret value `Disasters` for parameter `y`", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_decorators.py\", line 46, in inner_f\n    return f(**kwargs)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 692, in lineplot\n    p = _LinePlotter(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/relational.py\", line 367, in __init__\n    super().__init__(data=data, variables=variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 605, in __init__\n    self.assign_variables(data, variables)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 668, in assign_variables\n    plot_data, variables = self._assign_variables_longform(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/seaborn/_core.py\", line 903, in _assign_variables_longform\n    raise ValueError(err)\nValueError: Could not interpret value `Disasters` for parameter `y`\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['count'] = 1\n    disaster_counts = data.groupby('Disaster Type')['count'].sum().reset_index()\n    disaster_counts = disaster_counts.sort_values(by='count', ascending=False)\n    sns.set_style(\"whitegrid\")\n    plt.figure(figsize=(10, 6))\n    ax = sns.barplot(x='Disaster Type', y='count', data=disaster_counts, palette='Blues_d')\n    plt.title('Which type of natural disaster is the most frequent?', wrap=True)\n    for p in ax.patches:\n        ax.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'Disaster Type'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 7718, in groupby\n    return DataFrameGroupBy(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 882, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 882, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'Disaster Type'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['Deaths'] = data['Deaths'].fillna(0)\n    sns.histplot(data=data, x='Deaths', kde=True, color='blue')\n    plt.axvline(data['Deaths'].median(), color='red', linestyle='dashed', linewidth=1, label='Median: {:.2f}'.format(data['Deaths'].median()))\n    plt.title('What is the distribution of deaths caused by natural disasters?', wrap=True)\n    plt.legend()\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef plot(data: pd.DataFrame):\n    data['count'] = 1\n    data = data.groupby(['Country']).sum().reset_index()\n    fig, ax = plt.subplots(figsize=(12, 8))\n    sns.barplot(x='Country', y='count', data=data, ax=ax)\n    plt.title('Which countries are most affected by natural disasters?', wrap=True)\n    plt.xlabel('Country')\n    plt.ylabel('Disaster Frequency')\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'Country'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 7718, in groupby\n    return DataFrameGroupBy(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 882, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 882, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'Country'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['Year'] = pd.to_datetime(data['Year'], format='%Y', errors='coerce')\n    data = data.groupby(['Year', 'Disaster Type'])['Economic Damage (US$)'].sum().reset_index()\n    chart = sns.barplot(x='Year', y='Economic Damage (US$)', hue='Disaster Type', data=data, palette='bright')\n    chart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.title('What is the economic impact of natural disasters?', wrap=True)\n    return plt\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'Disaster Type'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 7718, in groupby\n    return DataFrameGroupBy(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 882, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 882, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'Disaster Type'\n"}}]]}