{"summary": {"file_name": "disasters.csv"}, "goals": [{"index": 0, "question": "What is the trend of natural disasters over the years?", "visualization": "line chart of number of disasters vs year", "rationale": "This visualization will help us understand if there is an increase or decrease in the number of natural disasters over time."}, {"index": 1, "question": "Which type of natural disaster is the most frequent?", "visualization": "bar chart of disaster type vs frequency", "rationale": "This visualization will help us identify the most common type of natural disaster and prioritize disaster management efforts accordingly."}, {"index": 2, "question": "What is the distribution of deaths caused by natural disasters?", "visualization": "histogram of number of deaths", "rationale": "This visualization will help us understand the severity of natural disasters and the impact they have on human lives."}, {"index": 3, "question": "Which countries are most affected by natural disasters?", "visualization": "choropleth map of disaster frequency by country", "rationale": "This visualization will help us identify the countries that are most vulnerable to natural disasters and allocate resources accordingly."}, {"index": 4, "question": "What is the economic impact of natural disasters?", "visualization": "stacked bar chart of disaster type vs economic damage", "rationale": "This visualization will help us understand the financial impact of natural disasters and prioritize disaster management efforts accordingly."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['Year'] = pd.to_datetime(data['Year'], format='%Y', errors='coerce')\n    data = data.groupby(data['Year'].dt.year).sum()\n    plt.plot(data.index, data['Disasters'])\n    plt.title('What is the trend of natural disasters over the years?', wrap=True)\n    plt.xlabel('Year')\n    plt.ylabel('Number of Disasters')\n    return plt\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['count'] = 1\n    disaster_counts = data.groupby('Disaster Type')['count'].sum().sort_values(ascending=False)\n    plt.bar(disaster_counts.index, disaster_counts.values)\n    plt.title('Which type of natural disaster is the most frequent?', wrap=True)\n    plt.xlabel('Disaster Type')\n    plt.ylabel('Frequency')\n    return plt\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['Deaths'] = pd.to_numeric(data['Deaths'], errors='coerce')\n    data = data.dropna(subset=['Deaths'])\n    plt.hist(data['Deaths'], bins=20, color='blue', edgecolor='black')\n    plt.axvline(data['Deaths'].median(), color='red', linestyle='dashed', linewidth=1, label='Median: {:.2f}'.format(data['Deaths'].median()))\n    plt.xlabel('Number of Deaths')\n    plt.ylabel('Frequency')\n    plt.legend()\n    plt.title('What is the distribution of deaths caused by natural disasters?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport numpy as np\n\ndef plot(data: pd.DataFrame):\n    disasters = data.groupby(['Country']).size().reset_index(name='counts')\n    world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n    world = world[(world.pop_est>0) & (world.name!=\"Antarctica\")]\n    disasters = pd.merge(world, disasters, left_on='name', right_on='Country', how='left')\n    disasters['counts'] = disasters['counts'].fillna(0)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.set_aspect('equal')\n    disasters.plot(column='counts', cmap='OrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)\n    ax.axis('off')\n    plt.title('Which countries are most affected by natural disasters?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['year'] = pd.to_datetime(data['year'], format='%Y', errors='coerce')\n    data = data.groupby(['year', 'disaster_type'])['economic_damage'].sum().reset_index()\n    data = data.pivot(index='year', columns='disaster_type', values='economic_damage')\n    data.plot(kind='bar', stacked=True)\n    plt.title('What is the economic impact of natural disasters?', wrap=True)\n    return plt;\n\nchart = plot(data)"]], "filename": "disasters.csv", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['Year'] = pd.to_datetime(data['Year'], format='%Y', errors='coerce')\n    data = data.groupby(data['Year'].dt.year).sum()\n    plt.plot(data.index, data['Disasters'])\n    plt.title('What is the trend of natural disasters over the years?', wrap=True)\n    plt.xlabel('Year')\n    plt.ylabel('Number of Disasters')\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'Disasters'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Disasters'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 7, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Disasters'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['count'] = 1\n    disaster_counts = data.groupby('Disaster Type')['count'].sum().sort_values(ascending=False)\n    plt.bar(disaster_counts.index, disaster_counts.values)\n    plt.title('Which type of natural disaster is the most frequent?', wrap=True)\n    plt.xlabel('Disaster Type')\n    plt.ylabel('Frequency')\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'Disaster Type'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 7718, in groupby\n    return DataFrameGroupBy(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 882, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 882, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'Disaster Type'\n"}}], [{"spec": null, "status": true, "raster": "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O3fudG8zrvPw9mc9TJs2jVNOOYX169dz0UUXccwxx7j3yZ2pY39omsYTTzzBuHHjOOaYY5g2bZrXe8ZfnZ3ZXt566y0uueQSRo8ezYABA5g6dSqvvPKK1/i//vor06dPZ+TIkQwaNIgTTzyRW2+9FVD7wNGjRwOwaNEid7at93Nbt27lxhtvZMSIEe5t5YsvvvBYhmsd/PDDD9x1112MHj2a448/Hujce7V18wf/+7Btt9s7F/YhEnqHcI4Aw4YN47333uPnn39m5MiRgGryXDvfmpoaNm3aRN++fd3TMjMz6dq1q8c4a9as4dNPP+XCCy+kS5cu/Pvf/+bGG2/kq6++cs/766+/sm7dOk4++WSSk5PZuXMnr776Kpdccgkffvgh4eHhHHvssUybNo1///vfXHPNNWRmZgKQlZXV6de0efNmrr76anJycrjxxhuxWq1s377d6+vsth588EFuu+02Bg0axLnnngtAenq6xzyzZs0iNTWVm2++mQ0bNrBs2TLi4uL429/+5p7nySefZMGCBUyZMoWzzz6biooKli5dykUXXcS7775LdHS03xr++OMPpk+fTlxcHDfccAMtLS0sXLiQ+Pj4Dl/3okWLePrppznnnHMYNGgQtbW1rF+/nt9++40xY8Zw3nnnsWfPHlatWuVuBNp6++23aWpq4txzz8VqtRITE+O3MXE4HFx55ZUcc8wx/O1vf+Pbb79l4cKFOBwOdxPfWZ2prbXNmzdz0UUX0aVLF6688krMZjOvv/4606ZNY+nSpV47tXvvvZfo6GhmzpzJzp07efHFF7nnnnt49NFH213Of/7zH6666ipSU1OZOXMmjY2NLF26lAsuuIC3336b1NRUzjvvPJKSknjqqaeYNm0aAwcOJCEhwe+Ye/fu5ZJLLsHhcDBjxgzCw8N54403fB6JePfdd5kzZw55eXnccsstNDQ08Oqrr3LhhRfyzjvvkJqa6q6zqKiIs846i8TERDZv3swbb7zBli1beOONNzAYDPzpT3+isLCQDz74gFtvvdX9voyLi3MvrzPv4zvvvJNPPvmEiy++mKysLCorK1mzZg1bt26lf//+fl93aWkpZ599NjU1NZx77rlkZmZSWlrKJ598QmNjI1arlaKiIj7//HNOOukkUlNTKSsr4/XXX+fiiy/mww8/JCkpqd311VZzczPTp0+nubmZiy++mISEBEpLS/n666+prq52H7Ht7Ht22bJl3HHHHe4PHEVFRVx77bXExMTQvXv3TtX03//+l/z8fKZNm4bVauXVV1/lyiuvZNmyZWRnZzNy5Ei6d+/O8uXL+dOf/uTx3OXLl5Oent6pC7A6s82/8847REREcPnllxMREcF3333HY489Rm1tLbNnzwbgmmuuoaamhpKSEnfz0qVLl0691rYqKyu56qqrOPnkkznttNPc+7XO1LE/FixYwJNPPsnxxx/P8ccfz2+//cYVV1zRYVPT2e3l1VdfpU+fPpx44omYzWa++uor7r77bjRN46KLLgKgvLyc6dOn07VrV2bMmEF0dDTFxcXuxj4uLo677rqLu+66iz/96U/ude364Lt582YuuOACkpKSuOqqq4iIiOCjjz7i+uuvZ+HChV7bxt13301cXBzXX3899fX1wP6/V5uamnj44YeJjY1lwoQJ+537QdHEYbd582YtOztbe/zxxzVN0zS73a4NHjxYe+eddzRN07TjjjtOW7p0qaZpmlZTU6Pl5uZqt912m8cY2dnZWv/+/bXt27e7H9u4caOWnZ2t/fvf/3Y/1tDQ4LX8devWadnZ2e7laZqmffTRR1p2drb23Xffdeo1PPbYY1p2drb7388//7yWnZ2tlZeXd+r5rQ0ePFibPXu232XceuutHo9ff/312ogRI9z/Li4u1nJzc7Unn3zSY74//vhD69evn9fjbV133XXawIEDtZ07d7of27Jli5abm+vxGjVN08aPH+9R62mnnabNmDGj3fHvvvtur3E0TdOKioq07OxsbejQoV65uaa99dZb7sdmz56tZWdna//85z/djzmdTm3GjBla//793WN89913PtelrzH91aZpaht77LHH3P++7rrrtP79+2s7duxwP1ZaWqoNGTJEu+iii9yPvfXWW1p2drZ22WWXaU6n0/34/fffr+Xm5mrV1dW+g/r/Tj/9dG306NHavn373I9t3LhR69u3r/b3v//d/ZjrdX700Uftjqdpmnbfffdp2dnZ2s8//+x+rLy8XBs2bJiWnZ2tFRUVaZqmabW1tdrw4cO93m979+7Vhg0b5vG4r/fWBx98oGVnZ2v//e9/3Y89++yzHstorbPv42HDhml33313h6+zrb///e9a3759tV9++cVrmmvdNDU1aQ6Hw2NaUVGRNmDAAG3RokXux1zrte3raLu9bdiwocP10tn3bHNzszZ69Gjt9NNP15qamtzzvf7661p2drZ28cUXd5hBdna2lp2drf3666/ux3bu3KkNHDhQu/76692PzZ8/XxswYIDH9lleXq7169fP433gy/5s8762m9tvv1075phjPF7jjBkztPHjx/tdVkfrQdM07eKLL9ays7O1V1991WucztYxe/Zsn3W0Vl5ervXv31+bMWOGx+t/+OGHtezsbI995oFsL/7qveKKK7QJEya4//3ZZ59p2dnZPrf31rW23be5XHrppdopp5zi8fqdTqd23nnnaZMmTXI/5loHF1xwgdbS0uIxxv68V+12u3bVVVdpAwYM0L7//vtOPedQkq+AdZCVlUVsbKz73L7ff/+d+vp69yfMIUOGuI+c/fTTTzgcDp/n/x133HEeR8v69u1LZGQkRUVF7sfCwsLc/99ut7Nv3z7S09OJjo5mw4YNh+w1uT6tf/HFF36PXh2otlc/Dx8+nMrKSmprawH47LPPcDqdTJkyhYqKCvf/EhIS6NmzZ7tfZTscDlauXMnEiRM9riDNysoiLy+vw9qio6PZvHkzhYWFB/bigEmTJnkcEeqI69MugMFg4KKLLsJut7N69eoDrqEjDoeDVatWMXHiRNLS0tyPd+vWjVNOOYU1a9a414fLueeei8FgcP97+PDhOByOdi802rNnDxs3buTMM88kNjbW/Xjfvn057rjj+Oabbw6o/m+++YbBgwczaNAg92NxcXGceuqpHvP95z//obq6mpNPPtljWzIajRxzzDEe21Lr91ZTUxMVFRXuo6Cd+WrWpTPv4+joaH7++WdKS0s7Pa7T6eTzzz9n/PjxDBw40Gu6a91YrVaMRvWnwOFwsG/fPiIiIujVq9cB7SMiIyMBWLlypc9TNaDz79n169dTXl7O+eef73H+7Zlnnrlf534OGTKEAQMGuP+dkpLChAkTWLlypfsrz9NPP53m5mY+/vhj93z5+fm0tLR0+ryszmzzrbeb2tpaKioqGD58OA0NDRQUFHT6NXWW1WrlrLPO8nr8UNbxn//8B7vdzsUXX+zx+i+99NIOn9uZ7aVtvTU1NVRUVDBixAiKiorcXxW7tomvv/56v79Orays5LvvvmPKlCnuPCoqKti3bx95eXkUFhZ6vf/OPfdcTCaTx2P7815dtGgRK1as4KGH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xcXFvP322/t1DmB2djbTp0/3uA0MqPd+W2eccQY33ngjwH7fWqkjQ4YMISYmhjlz5jBt2jQMBgPvvfeez1MG+vfvT35+PvPmzWPgwIFERERw4okndno9HKo6OiMuLo4rrriCp59+mquvvprjjz+eDRs2sGLFCq/bl7XVme1lzJgxWCwWrrnmGs4//3zq6upYtmwZ8fHx7N271z3WO++8w6uvvsrEiRNJT0+nrq6ON954g8jISPc3aWFhYfTu3ZuPPvqIjIwMYmNj6dOnD9nZ2dx5551ceOGFnHrqqZx77rmkpaVRVlbGTz/9RElJCe+//367r2V/36tTp07lzDPP5IEHHtjfyA8JaQB1NGzYMH788Uf69+/vdYLq0KFDee655+jSpct+XVDQ1j/+8Q+MRiPLly+nqamJoUOH8vzzz3PllVd6zJeYmMjdd9/N008/zT/+8Q8cDgcvvfRSpxvAE088kZ07d/LWW2+xb98+unbtyogRI7jhhhs6vFpvzpw53HHHHTz66KM0NjZy5pln7lcDCDBjxgwyMjJ44YUXePzxxwFITk5mzJgxHf6Qed++fVmyZAnz5s3jscceIzk5mRtuuIG9e/d22ABOmzaNL7/8klWrVtHc3ExKSgqzZs3yaDgnTZrEtGnT+PDDD3n//ffRNO2AG0CTycSzzz7LXXfdxf/93//RpUsXZs6cyfXXX+8x32233UZLSwuvvfYaVquVk046ib///e+ccsopHvPtT219+vTh5ZdfZv78+Tz99NNomsagQYP4v//7v/1eX+057rjjePbZZ3nsscd47LHHMJvNHHvssfztb3/brz/6rXXr1o2XXnqJe++9l2eeeYbY2FjOP/98unXrxj/+8Q+PeU899VS6devGM888w5IlS2hubiYpKYnhw4d7XE05f/58/vnPf/LKK6+gaRpjxoxh8eLFXucPDRo0iL/85S+89tprfPvttzidTr744otON4BhYWHum4t/+umnaJpGenq6+49Ve5KSknjjjTdYsGABy5cvp7a2lqSkJMaNG+c+N+yaa66hoaGB5cuXk5+fT79+/Xj66aeZP3++13gPPfQQd9xxB8888wzR0dGcffbZjBw5kssvv9w9T05ODnl5eXz11VeUlpYSHh5OTk4OixcvZvDgwe75OvuePe+883A4HCxZsoQHH3yQ7Oxs9z0EO+vYY49l8ODBPP744+zatYvevXszb948n/vW8ePHu+/Feajvy9a1a1eeeuop/vWvf/Hoo48SHR3NaaedxujRo70+pF544YVs3LiRt99+mxdeeIEePXq4c+nMejhUdXTWrFmzsFqtvPbaa3z//fcMGjSI5557jquvvrrd53Vme8nMzOSxxx7j0Ucf5V//+hcJCQlccMEFxMXFMXfuXPdYI0aM4NdffyU/P5+ysjKioqIYNGgQDz30kMe+49577+Wf//wn8+bNw263M3PmTLKzs+nduzdvvfUWixYt4p133qGyspK4uDj69evntY/15WDeq3owaEfyGdlCCCHEYdTS0sLYsWMZP36813mRQhxN5BxAIYQQ4v/7/PPPqaio4IwzztC7FCECSr4CFkIIEfJ+/vln/vjjD5544gn69eun6+05hDgcpAEUQggR8l599VXef/99+vbtq9tJ+UIcTnIOoBBCCCFEiJFzAIUQQgghQow0gEIIIYQQIUYaQCGEEEKIECMNYBCx79hB7S23YN+xQ+9SdGW32yktLfX5U12hRHJQJAdFclAkB0VyUCQH/6QBDCKO4mIi58/HcYA/2H20aGlpYe/evfv100dHI8lBkRwUyUGRHBTJQZEc/JMGMIiYe/ak9p57MPfsqXcpurJYLCQnJ2OxWPQuRVeSgyI5KJKDIjkokoMiOfgnt4ERQgghhAgxcgQwiDjKyqh78UUcZWV6l6Irh8NBVVUVDodD71J0JTkokoMiOSiSgyI5KJKDf9IABhH7pk10uewy7Js26V2KrpqbmykqKqK5uVnvUnQlOSiSgyI5KJKDIjkokoN/0gAKIYQQQoQY+S1gIYQQQcvhcHjc4qOpqQmn00lTUxMGg0HHyvQlOSjBlIPFYsFkMh225UkDKIQQIuhomkZJSQmVlZVej2uaxq5du474P/iBJDkowZZDbGwsycnJh6VWaQCDiCEigsZ+/TBEROhdiq4MBgNhYWFB8WYOJMlBkRyUUMvB1fx169aNiIgI9+t2Op3Y7XYsFgtGY+ie5SQ5KMGSg6Zp1NfXs2fPHgC6d+8e8GXKbWCEEEIEFYfDwaZNm+jWrRvx8fF6lyPEIVNeXs6ePXvIzs4O+NfBR247LIQQQvjgOucvIsS/DRFHH9c2fTh+uk4awCDSuHo1TquVxtWr9S5FVw0NDfz22280NDToXYquJAdFclBCMQdfX3c7nU4aGhpwOp06VHTkkByUYMvhcJ7CIQ1gMNE0jHY7yLf2yJkLiuSgSA6K5CCE6CxpAIUQQgidLFy4kJycHMaOHevzKNX5559PTk4Oc+bMOSTLe+GFF8jJyXH/+/vvvycnJ4dff/31kIx/oPLz87nhhhsYN24cOTk5LFmyxOd8mzZt4uqrr2bUqFEMHz6ciy66iO+++85rvrfeeouTTjqJQYMGceqpp7J06VKvef71r39x8sknM2TIEIYOHcqf//xnPvzww07VW1NTw9y5cxkxYgRDhgzhxhtvdF/A0dratWs577zzGDRoEOPHj+eZZ545Yj6oSQMohBBC6MhisbBv3z7++9//ejy+c+dOfvrpp4Ce69i/f39ef/11srKyAraMzvj4448pKirihBNO8DtPRUUFl112GZWVldx33308/PDDREREcNVVV/HHH3+458vPz2fu3LmMHTuWJ598kilTpvDAAw94NYF1dXWcc845LFiwgAULFpCbm8vNN9/M8uXLO6x31qxZrFq1irvuuouHHnqIbdu2cdVVV9HS0uKeZ/v27UyfPp3ExESefvppLr30Uh577DGee+65/Q8oAOQ2MEIIIYSOLBYLo0eP5sMPP2TkyJHuxz/88EP69OkT0NuXREZGMnjw4ICN31mPPvqo+3W+/vrrPudZvXo15eXlvPHGG6SmpgIwYsQIRowYweeff+4+svnYY48xadIk/vGPf+B0Ohk+fDh1dXUsXLiQ8847D4vFAsA999zjMf7YsWPZsmUL77zzDqeeeqrfWtetW8fKlStZsmQJeXl5APTq1YupU6fy6aefMnXqVACWLFlC165defjhh7FarYwePZqKigqeeuoppk2bhtVqPYjEDp40gEHEeswxFH7wAeVOJ4a1awO2nISEBNLT0wM2/sGy2Wz07t1b9zeP3iQHRXJQJAfFYDBgs9mC7n6Ip5xyCnfffTe33367u0H54IMPOOWUU8jPz/eaf+vWrTz00EP88MMPOBwORowYwW233ebedxsMBux2O3feeSefffYZNpuNs846y+u2Od9//z2XXHIJb775JgMHDgTgueee48MPP6SwsBCr1cqgQYOYM2cOvXr1cj9vzpw5rF+/nttvv5158+ZRWFhI7969ueuuuxgwYMB+v/7ONLmuK2OjoqLcj9lsNiwWi/tr1YaGBgoLC7nsssvcOdhsNvLy8nj55Zf56aefOPbYY/0uIzY2lrq6unbrWLFiBdHR0YwZM8b9WGZmJrm5uaxYscLdAK5YsYI//elPHu/JqVOn8vTTT7Nu3TqPZl8P0gAGkeLycnLPPpfGxvqALicsLII//th4xDaBRqORsLAwvcvQneSgSA6K5KAYDIaga/4Axo8fzz/+8Q9WrVrFCSecwJYtW/jjjz94/PHHvRrAoqIizj//fPr06cMDDzyAwWDgqaee4rLLLuPjjz/GarViMBi47bbb+Pbbb7nllltITU3llVde4YMPPuiwlpKSEi6++GJSUlKora3ltdde4/zzz+eTTz4hNjbWPd/evXu59957mTFjBlFRUcyfP5+ZM2fy2WefuZvYOXPm8M4773h8RXswGSUkJPDAAw9w0003YTabee655zAYDJx++ukANDc3o2mau+lybQ82mw1QjXPrBlDTNBwOB/X19Xz55ZesWrWK//u//2u3joKCAnr16uW1nWVmZlJQUABAfX09u3fvJjMz02seg8FAQUGBNICi88rXrmVhYz3/5FF2MDZAS9lIY+PFlJWVHbENYHNzM3v37iUxMTGkj3ZIDorkoEgOitPppKWlBbPZfET/8kNb4eHhnHjiiXz44YeccMIJfPDBBwwZMoS0tDSveRctWkRMTAzPP/+8u7EZOnQoEyZMYNmyZVx00UVs2rSJTz/9lH/+85+cc845AOTl5TFp0qQOa5k7d677/zscDsaMGcPo0aP55JNPOO+889zTqqqqWLp0KX369HG/hksuuYSff/6Z4cOHA+qDyaG6oXFMTAwvv/wyV199NWPHqr+BsbGxLF682J1TTEwMsbGx/PLLL5x11lnu7WHdunXumltbvXo1l19+OQBms5nbb7+dk046qd06qqurPY5Ctq5v/fr1gLpIBCA6OtpjHqvVSnh4uFcdepAGMIgY9+3jSuAJEtjBUL3L0Y3D4WDfvn3ExcXpXYquJAdFclAkh/9v926c27eD1QquBrBrV+jVCxobYcMG7+cM/f/70z/+gLZf/2VkQFwc7N0LRUWe06KioE8fcDjg55+he3f1vwN0yimn8Ne//pXGxkby8/OZNm2az/lWrVrF1KlTMZlM7osOoqOj6devn7sBWb9+PZqmMXHiRPfzTCYTEydO5IUXXmi3jp9++okFCxawYcMGj99aLiws9JivW7du7uYPoHfv3gCUlpa6H7v//vu5//77O3ztnVFeXs7MmTNJT09n7ty5mEwm3njjDa699lpefvll94UsF154IUuWLGHYsGHk5eXxww8/8O9//xvwvs/eoEGDePPNN6mtrWXFihXce++9mEwmd9N8NJMGUAghxFHD8MwzhLU5uZ+LLoKlS6G4GIYN836S67Ycl10GbW8p8u9/w8UXwxtvwMyZntMmTYJPPlFN47BhcOedcNddB1x7Xl4eFouFBQsWUFxczJQpU3zOt2/fPl588UVefPFFr2mur1737t2L2WwmJibGY3pHP523a9currjiCgYMGMDdd99Nt27dsFgsXH311TQ1NXnM2/bolmvZbec7VJ599lmqqqp4++233Ue5R48ezcknn8wTTzzB/PnzAbj66qvZsWMHf/vb39A0jfDwcP76179y7733kpiY6DFmZGSk+9zH0aNH43A4eOCBBzjrrLP8HrmMjo6mpKTE6/Gqqip33q4jhK4jgS7Nzc00NDR4rRc9SAMohBDiqKHNmEHT5MlYrdb/fQXctav6b2oqrFnj/8kvvOD7CCDAuefC6NGe01xfA3bposY9iKN/oBqoSZMm8cILLzB69GgSEhJ8zhcTE8Pxxx/PhRde6DWtS5cuACQmJtLS0kJVVRVdXa8fdRStPd9++y319fUsWrTI3eC5xtHbli1byMzM9DjFwWQykZOTw44dO9yPhYWFMX/+fP7xj3+wZ88eunXrRtH/P3p7zDHHtLuM/v378+KLL1JRUeHVLLpkZmayevVqNE3zOKK4bds2srOzAfWTbt27d3efE9h6Hk3TvM4N1IM0gEIIIY4e3bujxcWBzfa/r4BdwsL+93WvL61ukOwlMVH9zxeTqf1x98M555xDeXk55557rt95Ro8ezebNm+nXr5/fo1SuK3E///xz99eZDoeDzz//vN3lNzY2YjAYMJv/1x589NFHHve300tKSgpffPEFTU1N7nMfHQ4Hv//+O7m5uV7zx8XFERsbS1NTEy+//DLDhw/vsPFas2YNkZGRHk1zW+PGjeOJJ55g9erVHHfccYBq7DZs2MCVV17pMd8XX3zB3/72N/fR0fz8fKKjoxkyZMh+v/5DTRrAIOJMTGQeUEr7h/CPdmazmYSEBI8dVCiSHBTJQZEc/ieYMxg0aBBPPPFEu/PceOONnH322UyfPp1zzz2XhIQEysrK+OGHHxg+fDinnHIKvXv3ZsKECcybN4/m5mb3VcCuW6n4M2rUKABuvfVWzj//fDZv3szzzz/v9XVvZ82dO5d3332XDb7OvWxly5YtbNmyxf3vTZs28fHHHxMeHs7xxx8PqOb4zTff5LrrruOiiy7CZDLx+uuvs337du699173c7/55ht27NhB7969qays5P333+e///0vr776qnue33//nYceeoiTTjqJHj16UF9fz9dff82yZcu4+eabPbahfv36ccYZZ7jPZRwyZAh5eXnMnTuX2bNnY7PZeOSRR8jJyfG4yGb69OksX76cv/71r1xwwQVs2rSJJUuWcNNNNx0RF2oF77skBGkpKahrs7rpXIm+LBYLycnJepehO8lBkRwUyUExGo1BdfXvgejZsyfLli3j0Ucf5e6776a+vp7ExESOPfZY982QjUYjDzzwAPfccw8PPfQQVquVM888kxEjRvDggw/6HTsnJ4d58+axaNEirr76anJzc1mwYAGzZs06oFqdTicOh6PD+T766CMWLVrk/ve7777Lu+++S48ePfjyyy8BdVTz2Wef5YknnuDWW2/F6XTSu3dvnnnmGY9bu5jNZt588022b9+O2WxmxIgRXr92kpCQQHR0NE888QR79+4lKiqKzMxMFi1a5HHhDKijjG1/pu/RRx9l3rx53HHHHbS0tJCXl8dtt93m0Tj27NmTJUuW8MADDzBjxgzi4uK48cYbueKKK/YvxAAxaEfKj9KJDq35+mv+On48a1hBbcBuA7MWGMaaNWsYeoi+0jjUHA4HDQ0NhIeHH7LbCwQjyUGRHJRQyqGxsZFt27bRq1cvr3sfapqG0+nEaDQG5f0ADxXJQQm2HNrbtg+1o/tj0lHGvG0bXwN92NHRrEe15uZmCgsLaW5u1rsUXUkOiuSgSA6KpmnumwGHMslBkRz8kwZQCCGEECLESAMohBBCCBFipAEUQgghhAgx0gAGE4uFYsAe4hdvu+5RFQwn9AaS5KBIDorkIITYH6HdSQQZR79+qJ+77tPBnEe3sLAw+vbtq3cZupMcFMlBCcUcfJ3YbzQaCQ8P16GaI4vkoARbDofzYhU5AiiEECKouH5Vob6+XudKhDi0XNu0axsPJDkCGERMGzZQBExhM+s5Mu/Rdzg0NjZSWFhIRkZGwO+TdCSTHBTJQQmlHEwm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QugpoEcAX3rppUAOH3I0hwMrYMdJwLr2IKBpGpqmYTAYQvrXZCQHRXJQJAdFclAkB0Vy8C+gDeCIESMCOXzIMa9fTxMwlD9Yx3C9y9FNY2MjW7duJSsri/DwcL3L0Y3koEgOiuSgSA6K5KBIDv4dlpviNDc389tvv1FeXs7QoUPlrtxCCCGEEDoK+FmRL730Enl5eVx44YXccMMN/PHHHwBUVFQwcuRI3nzzzUCXIIQQQgghWgloA/jWW29x//33M3bsWO677z6Pn4OLi4tj1KhR5OfnH9DYdXV1jBs3jpycHH799VePacuWLWPy5MkMHDiQ0047ja+++srr+TU1NcydO5cRI0YwZMgQbrzxRvbs2XNAtQghhBBCBJOANoDPP/88EyZMYP78+YwfP95rev/+/dm8efMBjf3EE0/4vL/ghx9+yO23386UKVNYvHgxgwcPZubMmfz0008e882aNYtVq1Zx11138dBDD7Ft2zauuuoqWlpaDqgeIYQQQohgEdAGcPv27YwbN87v9NjYWCorK/d73K1bt/LKK69www03eE177LHHOPnkk5k1axajRo3innvuYeDAgTz++OPuedatW8fKlSu57777mDp1KhMmTGDBggX88ccffPrpp/tdz+HS0rcvqcB6eutdiq5sNhs5OTnYbDa9S9GV5KBIDorkoEgOiuSgSA7+BbQBjI6OZt++fX6nb9myhcTExP0e99577+X888+nV69eHo8XFRVRWFjIlClTPB6fOnUqq1evprm5GYAVK1YQHR3NmDFj3PNkZmaSm5vLihUr9ruew8Vgs7ETsGPRuxRdGY1GLBZLyN/YU3JQJAdFclAkB0VyUCQH/wKayLhx43jjjTeorq72mrZ582aWLVvGiSeeuF9jfvzxx2zatInrr7/ea1pBQQGAV2OYlZWF3W6nqKjIPV+vXr287gmUmZnpHuNIZCws5A2gF8V6l6Kr5uZmduzY4W7oQ5XkoEgOiuSgSA6K5KBIDv4F9DYws2bN4txzz+WUU05h/PjxGAwG3n33Xd566y0+/fRTEhMTue666zo9XkNDAw888AA33XQTkZGRXtOrqqoAdeSxNde/XdOrq6uJioryen5MTAzr16/vdD2+2O12r/MITSYTVqsVp9NJU1OT13Nc9yZqamrC6XR6TLNYLJjNZlpaWnCUl3MOMI+ag6pxfzQ0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", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['Deaths'] = pd.to_numeric(data['Deaths'], errors='coerce')\n    data = data.dropna(subset=['Deaths'])\n    plt.hist(data['Deaths'], bins=20, color='blue', edgecolor='black')\n    plt.axvline(data['Deaths'].median(), color='red', linestyle='dashed', linewidth=1, label='Median: {:.2f}'.format(data['Deaths'].median()))\n    plt.xlabel('Number of Deaths')\n    plt.ylabel('Frequency')\n    plt.legend()\n    plt.title('What is the distribution of deaths caused by natural disasters?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport numpy as np\n\ndef plot(data: pd.DataFrame):\n    disasters = data.groupby(['Country']).size().reset_index(name='counts')\n    world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n    world = world[(world.pop_est>0) & (world.name!=\"Antarctica\")]\n    disasters = pd.merge(world, disasters, left_on='name', right_on='Country', how='left')\n    disasters['counts'] = disasters['counts'].fillna(0)\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.set_aspect('equal')\n    disasters.plot(column='counts', cmap='OrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)\n    ax.axis('off')\n    plt.title('Which countries are most affected by natural disasters?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'Country'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 8, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 7718, in groupby\n    return DataFrameGroupBy(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/groupby.py\", line 882, in __init__\n    grouper, exclusions, obj = get_grouper(\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/groupby/grouper.py\", line 882, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'Country'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['year'] = pd.to_datetime(data['year'], format='%Y', errors='coerce')\n    data = data.groupby(['year', 'disaster_type'])['economic_damage'].sum().reset_index()\n    data = data.pivot(index='year', columns='disaster_type', values='economic_damage')\n    data.plot(kind='bar', stacked=True)\n    plt.title('What is the economic impact of natural disasters?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'year'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'year'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 11, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'year'\n"}}]]}