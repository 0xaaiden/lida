{"summary": {"name": "iowa-electricity.csv", "file_name": "iowa-electricity.csv", "dataset_description": "This dataset contains information about the net generation of electricity in Iowa from 2001 to 2017.", "field_names": ["year", "source", "net_generation"], "fields": [{"column": "year", "properties": {"dtype": "date", "min": "2001-01-01", "max": "2017-01-01", "samples": ["2010-01-01", "2002-01-01", "2006-01-01"], "num_unique_values": 17, "semantic_type": "date", "description": "The year in which the net generation of electricity was recorded."}}, {"column": "source", "properties": {"dtype": "category", "samples": ["Nuclear Energy", "Renewables", "Fossil Fuels"], "num_unique_values": 3, "semantic_type": "energy_source", "description": "The source of the net generation of electricity."}}, {"column": "net_generation", "properties": {"dtype": "number", "std": 14895.20021075351, "min": 1437, "max": 42750, "samples": [42750, 5282, 37014], "num_unique_values": 51, "semantic_type": "electricity_generation", "description": "The net generation of electricity in megawatt hours."}}]}, "goals": [{"index": 0, "question": "What is the trend in net generation of electricity in Iowa from 2001 to 2017?", "visualization": "line chart of net_generation over time", "rationale": "This visualization will help us understand if the net generation of electricity in Iowa has increased, decreased or remained constant over the years."}, {"index": 1, "question": "What is the contribution of each energy source to the net generation of electricity in Iowa?", "visualization": "stacked bar chart of net_generation by source", "rationale": "This visualization will help us understand the relative contribution of each energy source to the net generation of electricity in Iowa."}, {"index": 2, "question": "What is the distribution of net generation of electricity in Iowa?", "visualization": "histogram of net_generation", "rationale": "This visualization will help us understand the range and distribution of net generation of electricity in Iowa."}, {"index": 3, "question": "What is the trend in net generation of electricity for each energy source in Iowa?", "visualization": "line chart of net_generation over time by source", "rationale": "This visualization will help us understand if the net generation of electricity for each energy source in Iowa has increased, decreased or remained constant over the years."}, {"index": 4, "question": "What is the correlation between net generation of electricity and year?", "visualization": "scatter plot of net_generation against year", "rationale": "This visualization will help us understand if there is any correlation between the net generation of electricity and the year in which it was recorded."}], "code": [["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    data['year'] = pd.to_datetime(data['year'], format='%Y')\n    plt.figure(figsize=(6, 6))\n    plt.plot(data['year'], data['net_generation'])\n    plt.title('What is the trend in net generation of electricity in Iowa from 2001 to 2017?', wrap=True)\n    plt.xlabel('Year')\n    plt.ylabel('Net Generation (MWh)')\n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt\n\nchart = plot(data)"], ["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    data['year'] = pd.to_datetime(data['year'], format='%Y')\n    plt.figure(figsize=(6, 6))\n    ax = data.pivot_table(index='year', columns='source', values='net_generation', aggfunc='sum').plot(kind='bar', stacked=True)\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Net generation of electricity (MWh)')\n    ax.set_title('What is the contribution of each energy source to the net generation of electricity in Iowa?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45, ha='right')\n    return plt\n\nchart = plot(data)"], ["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    data['net_generation'] = pd.to_numeric(data['net_generation'], errors='coerce')\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['net_generation'], bins=50, color='blue', alpha=0.5)\n    plt.xlabel('Net Generation of Electricity (MWh)')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of net generation of electricity in Iowa?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.xticks(rotation=45)\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    else:\n        plt.xticks(rotation=45)\n    return plt\n\nchart = plot(data)"], ["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    data['year'] = pd.to_datetime(data['year'], format='%Y')\n    sources = data['source'].unique()\n    for source in sources:\n        source_data = data[data['source'] == source]\n        plt.plot(source_data['year'], source_data['net_generation'], label=source)\n    plt.title('What is the trend in net generation of electricity for each energy source in Iowa?', wrap=True)\n    plt.xlabel('Year')\n    plt.ylabel('Net Generation (MWh)')\n    plt.legend()\n    if len(plt.xticks()[0]) > 20:\n        plt.xticks(rotation=45, ha='right')\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    else:\n        plt.xticks(rotation=45, ha='right')\n    return plt\n\nchart = plot(data)"], ["import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    data['year'] = pd.to_datetime(data['year'], format='%Y')\n    plt.figure(figsize=(6, 6))\n    plt.scatter(data['year'], data['net_generation'])\n    plt.title('What is the correlation between net generation of electricity and year?', wrap=True)\n    plt.xlabel('Year')\n    plt.ylabel('Net Generation of Electricity (MWh)')\n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt\n\nchart = plot(data)"]], "filename": "iowa-electricity.csv", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    data['year'] = pd.to_datetime(data['year'], format='%Y')\n    plt.figure(figsize=(6, 6))\n    plt.plot(data['year'], data['net_generation'])\n    plt.title('What is the trend in net generation of electricity in Iowa from 2001 to 2017?', wrap=True)\n    plt.xlabel('Year')\n    plt.ylabel('Net Generation (MWh)')\n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": "unconverted data remains: -01-01"}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    data['year'] = pd.to_datetime(data['year'], format='%Y')\n    plt.figure(figsize=(6, 6))\n    ax = data.pivot_table(index='year', columns='source', values='net_generation', aggfunc='sum').plot(kind='bar', stacked=True)\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Net generation of electricity (MWh)')\n    ax.set_title('What is the contribution of each energy source to the net generation of electricity in Iowa?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45, ha='right')\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": "unconverted data remains: -01-01"}], [{"spec": null, "status": true, "raster": "", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    data['net_generation'] = pd.to_numeric(data['net_generation'], errors='coerce')\n    plt.figure(figsize=(6, 6))\n    plt.hist(data['net_generation'], bins=50, color='blue', alpha=0.5)\n    plt.xlabel('Net Generation of Electricity (MWh)')\n    plt.ylabel('Frequency')\n    plt.title('What is the distribution of net generation of electricity in Iowa?', wrap=True)\n    if len(plt.xticks()[0]) > 20:\n        plt.xticks(rotation=45)\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    else:\n        plt.xticks(rotation=45)\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    data['year'] = pd.to_datetime(data['year'], format='%Y')\n    sources = data['source'].unique()\n    for source in sources:\n        source_data = data[data['source'] == source]\n        plt.plot(source_data['year'], source_data['net_generation'], label=source)\n    plt.title('What is the trend in net generation of electricity for each energy source in Iowa?', wrap=True)\n    plt.xlabel('Year')\n    plt.ylabel('Net Generation (MWh)')\n    plt.legend()\n    if len(plt.xticks()[0]) > 20:\n        plt.xticks(rotation=45, ha='right')\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    else:\n        plt.xticks(rotation=45, ha='right')\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": "unconverted data remains: -01-01"}], [{"spec": null, "status": false, "raster": null, "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\ndef plot(data: pd.DataFrame):\n    data['year'] = pd.to_datetime(data['year'], format='%Y')\n    plt.figure(figsize=(6, 6))\n    plt.scatter(data['year'], data['net_generation'])\n    plt.title('What is the correlation between net generation of electricity and year?', wrap=True)\n    plt.xlabel('Year')\n    plt.ylabel('Net Generation of Electricity (MWh)')\n    plt.xticks(rotation=45)\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": "unconverted data remains: -01-01"}]]}