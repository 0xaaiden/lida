{"summary": {"file_name": "flights-20k.json"}, "goals": [{"index": 0, "question": "What is the distribution of flight delays?", "visualization": "Histogram of departure_delay", "rationale": "This tells us how many flights are delayed and by how much time. It can help us identify patterns and trends in flight delays."}, {"index": 1, "question": "What is the relationship between departure delay and arrival delay?", "visualization": "Scatter plot of departure_delay vs arrival_delay", "rationale": "This helps us understand if there is a correlation between departure delay and arrival delay. It can help us identify if a delay in departure leads to a delay in arrival."}, {"index": 2, "question": "What is the distribution of flight distances?", "visualization": "Histogram of distance", "rationale": "This tells us how far the flights are traveling. It can help us identify if there are any outliers or if most flights are traveling similar distances."}, {"index": 3, "question": "What is the distribution of flight cancellations?", "visualization": "Bar chart of cancelled vs not cancelled flights", "rationale": "This tells us how many flights were cancelled and how many were not. It can help us identify if there are any patterns or reasons for flight cancellations."}, {"index": 4, "question": "What is the distribution of airlines in the dataset?", "visualization": "Bar chart of airline vs number of flights", "rationale": "This tells us which airlines have the most flights in the dataset. It can help us identify if there are any airlines that are overrepresented or underrepresented in the dataset."}], "code": [["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['departure_delay'] = pd.to_numeric(data['departure_delay'], errors='coerce')\n    sns.histplot(data=data, x='departure_delay', kde=True, color='blue')\n    plt.axvline(x=data['departure_delay'].median(), color='red', label=f'Median: {data[\"departure_delay\"].median():.2f}')\n    plt.legend()\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['dep_delay'] = pd.to_numeric(data['dep_delay'], errors='coerce')\n    data['arr_delay'] = pd.to_numeric(data['arr_delay'], errors='coerce')\n    chart = sns.scatterplot(x='dep_delay', y='arr_delay', data=data)\n    plt.title('What is the relationship between departure delay and arrival delay?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    sns.histplot(data=data, x='distance', kde=True, color='blue')\n    plt.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean Distance: {:.2f}'.format(data['distance'].mean()))\n    plt.legend()\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['Cancelled'] = data['Cancelled'].astype(int)\n    sns.countplot(x='Cancelled', data=data)\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    plt.xlabel('Cancelled')\n    plt.ylabel('Count')\n    plt.legend(['Not Cancelled', 'Cancelled'])\n    return plt;\n\nchart = plot(data)"], ["import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['airline'].value_counts().plot(kind='bar')\n    plt.title('What is the distribution of airlines in the dataset?', wrap=True)\n    return plt;\n\nchart = plot(data)"]], "filename": "flights-20k.json", "chart": [[{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['departure_delay'] = pd.to_numeric(data['departure_delay'], errors='coerce')\n    sns.histplot(data=data, x='departure_delay', kde=True, color='blue')\n    plt.axvline(x=data['departure_delay'].median(), color='red', label=f'Median: {data[\"departure_delay\"].median():.2f}')\n    plt.legend()\n    plt.title('What is the distribution of flight delays?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'departure_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'departure_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'departure_delay'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['dep_delay'] = pd.to_numeric(data['dep_delay'], errors='coerce')\n    data['arr_delay'] = pd.to_numeric(data['arr_delay'], errors='coerce')\n    chart = sns.scatterplot(x='dep_delay', y='arr_delay', data=data)\n    plt.title('What is the relationship between departure delay and arrival delay?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'dep_delay'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'dep_delay'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'dep_delay'\n"}}], [{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['distance'] = data['distance'].astype(float)\n    sns.histplot(data=data, x='distance', kde=True, color='blue')\n    plt.axvline(data['distance'].mean(), color='red', linestyle='dashed', linewidth=1, label='Mean Distance: {:.2f}'.format(data['distance'].mean()))\n    plt.legend()\n    plt.title('What is the distribution of flight distances?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['Cancelled'] = data['Cancelled'].astype(int)\n    sns.countplot(x='Cancelled', data=data)\n    plt.title('What is the distribution of flight cancellations?', wrap=True)\n    plt.xlabel('Cancelled')\n    plt.ylabel('Count')\n    plt.legend(['Not Cancelled', 'Cancelled'])\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'Cancelled'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Cancelled'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Cancelled'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot(data: pd.DataFrame):\n    data['airline'].value_counts().plot(kind='bar')\n    plt.title('What is the distribution of airlines in the dataset?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": {"message": "'airline'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'airline'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 10, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'airline'\n"}}]]}