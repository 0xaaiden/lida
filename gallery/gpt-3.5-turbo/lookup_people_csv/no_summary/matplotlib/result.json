{"summary": {"file_name": "lookup_people.csv"}, "goals": [{"index": 0, "question": "What is the age distribution of the people in the dataset?", "visualization": "Histogram of age", "rationale": "This visualization will help us understand the age range of the people in the dataset and identify any outliers or patterns."}, {"index": 1, "question": "What is the gender distribution of the people in the dataset?", "visualization": "Bar chart of gender", "rationale": "This visualization will help us understand the gender balance of the people in the dataset and identify any gender-based patterns or biases."}, {"index": 2, "question": "What is the distribution of education levels among the people in the dataset?", "visualization": "Pie chart of education levels", "rationale": "This visualization will help us understand the educational background of the people in the dataset and identify any trends or patterns based on education level."}, {"index": 3, "question": "What is the distribution of income levels among the people in the dataset?", "visualization": "Box plot of income", "rationale": "This visualization will help us understand the income range of the people in the dataset and identify any outliers or patterns based on income level."}, {"index": 4, "question": "What is the relationship between age and income among the people in the dataset?", "visualization": "Scatter plot of age and income", "rationale": "This visualization will help us understand the correlation between age and income among the people in the dataset and identify any trends or patterns based on age and income level."}], "code": [["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['age'] = pd.to_datetime(data['age'], format='%Y-%m-%d', errors='coerce').dt.year\n    plt.hist(data['age'], bins=20, color='blue', edgecolor='black')\n    plt.axvline(data['age'].median(), color='red', linestyle='dashed', linewidth=1, label=f'Median Age: {data[\"age\"].median():.2f}')\n    plt.legend()\n    plt.title('What is the age distribution of the people in the dataset?', wrap=True)\n    plt.xlabel('Age')\n    plt.ylabel('Frequency')\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    gender_counts = data['gender'].value_counts()\n    plt.bar(gender_counts.index, gender_counts.values)\n    plt.title('What is the gender distribution of the people in the dataset?', wrap=True)\n    return plt\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    education_levels = data['education'].value_counts()\n    plt.pie(education_levels, labels=education_levels.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of education levels among the people in the dataset?', wrap=True)\n    return plt;\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['income'] = pd.to_numeric(data['income'], errors='coerce')\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.boxplot(data['income'], vert=False, showmeans=True, meanline=True, labels=['Income'])\n    ax.set_xlabel('Income')\n    ax.set_title('What is the distribution of income levels among the people in the dataset?')\n    ax.axvline(data['income'].median(), color='r', linestyle='--', label=f'Median: {data[\"income\"].median():,.2f}')\n    ax.legend()\n    return plt\n\nchart = plot(data)"], ["import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['age'] = pd.to_numeric(data['age'], errors='coerce')\n    data['income'] = pd.to_numeric(data['income'], errors='coerce')\n    plt.scatter(data['age'], data['income'])\n    plt.title('What is the relationship between age and income among the people in the dataset?', wrap=True)\n    plt.xlabel('Age')\n    plt.ylabel('Income')\n    return plt\n\nchart = plot(data)"]], "filename": "lookup_people.csv", "chart": [[{"spec": null, "status": true, "raster": "", "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    data['age'] = pd.to_datetime(data['age'], format='%Y-%m-%d', errors='coerce').dt.year\n    plt.hist(data['age'], bins=20, color='blue', edgecolor='black')\n    plt.axvline(data['age'].median(), color='red', linestyle='dashed', linewidth=1, label=f'Median Age: {data[\"age\"].median():.2f}')\n    plt.legend()\n    plt.title('What is the age distribution of the people in the dataset?', wrap=True)\n    plt.xlabel('Age')\n    plt.ylabel('Frequency')\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    gender_counts = data['gender'].value_counts()\n    plt.bar(gender_counts.index, gender_counts.values)\n    plt.title('What is the gender distribution of the people in the dataset?', wrap=True)\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'gender'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'gender'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 10, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'gender'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\ndef plot(data: pd.DataFrame):\n    education_levels = data['education'].value_counts()\n    plt.pie(education_levels, labels=education_levels.index, autopct='%1.1f%%')\n    plt.title('What is the distribution of education levels among the people in the dataset?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'education'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'education'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 9, in <module>\n  File \"<string>\", line 4, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'education'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['income'] = pd.to_numeric(data['income'], errors='coerce')\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.boxplot(data['income'], vert=False, showmeans=True, meanline=True, labels=['Income'])\n    ax.set_xlabel('Income')\n    ax.set_title('What is the distribution of income levels among the people in the dataset?')\n    ax.axvline(data['income'].median(), color='r', linestyle='--', label=f'Median: {data[\"income\"].median():,.2f}')\n    ax.legend()\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'income'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'income'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 5, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'income'\n"}}], [{"spec": null, "status": false, "raster": null, "code": "import matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['age'] = pd.to_numeric(data['age'], errors='coerce')\n    data['income'] = pd.to_numeric(data['income'], errors='coerce')\n    plt.scatter(data['age'], data['income'])\n    plt.title('What is the relationship between age and income among the people in the dataset?', wrap=True)\n    plt.xlabel('Age')\n    plt.ylabel('Income')\n    return plt\n\nchart = plot(data)", "library": "matplotlib", "error": {"message": "'income'", "traceback": "Traceback (most recent call last):\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'income'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/victordibia/projects/projectlida/lida/lib/lida/modules/executor.py\", line 139, in execute\n    exec(code, ex_locals)\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 6, in plot\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/victordibia/.local/lib/python3.9/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'income'\n"}}]]}