{"summary": {"name": "monarchs.json", "file_name": "monarchs.json", "dataset_description": "A dataset of monarchs", "field_names": ["name", "start", "end", "index", "commonwealth"], "fields": [{"column": "name", "properties": {"dtype": "string", "samples": ["Cromwell"], "num_unique_values": 1, "semantic_type": "person_name", "description": "The name of the monarch"}}, {"column": "start", "properties": {"dtype": "date", "min": 1649, "max": 1649, "samples": [1649], "num_unique_values": 1, "semantic_type": "date", "description": "The start date of the monarch's reign"}}, {"column": "end", "properties": {"dtype": "date", "min": 1660, "max": 1660, "samples": [1660], "num_unique_values": 1, "semantic_type": "date", "description": "The end date of the monarch's reign"}}, {"column": "index", "properties": {"dtype": "number", "std": "NaN", "min": 3, "max": 3, "samples": [3], "num_unique_values": 1, "semantic_type": "identifier", "description": "The index of the monarch"}}, {"column": "commonwealth", "properties": {"dtype": "number", "std": "NaN", "min": 1.0, "max": 1.0, "samples": [1.0], "num_unique_values": 1, "semantic_type": "category", "description": "Whether the monarch was part of the Commonwealth"}}]}, "goals": [{"index": 0, "question": "What is the distribution of monarchs by their reign start year?", "visualization": "bar chart of start year", "rationale": "This will help us understand the frequency of monarchs by their reign start year and identify any patterns or trends."}, {"index": 1, "question": "What is the average length of a monarch's reign?", "visualization": "box plot of reign length", "rationale": "This will help us understand the typical length of a monarch's reign and identify any outliers or anomalies."}, {"index": 2, "question": "What is the most common name among the monarchs?", "visualization": "word cloud of monarch names", "rationale": "This will help us identify any patterns or trends in the names of the monarchs and understand the most common names among them."}, {"index": 3, "question": "What is the distribution of monarchs by their affiliation with the Commonwealth?", "visualization": "pie chart of Commonwealth affiliation", "rationale": "This will help us understand the proportion of monarchs who were part of the Commonwealth and identify any patterns or trends."}, {"index": 4, "question": "What is the distribution of monarchs by their reign end year?", "visualization": "line chart of end year", "rationale": "This will help us understand the frequency of monarchs by their reign end year and identify any patterns or trends."}], "code": [["import seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['start'] = pd.to_datetime(data['start'], format='%Y', errors='ignore')\n    plt.figure(figsize=(6, 6))\n    ax = sns.countplot(x='start', data=data)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n    if len(plt.xticks()[0]) > 20:\n        ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title(\"What is the distribution of monarchs by their reign start year?\", wrap=True)\n    return plt;\n\nchart = plot(data)"], ["```python\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport numpy as np\n\ndef plot(data: pd.DataFrame):\n    data['start'] = pd.to_datetime(data['start'], format='%Y', errors='ignore')\n    data['end'] = pd.to_datetime(data['end'], format='%Y', errors='ignore')\n    data['reign_length'] = (data['end'] - data['start']).dt.days / 365.25\n\n    plt.figure(figsize=(6, 6))\n    sns.boxplot(data=data, y='reign_length')\n    plt.title(\"What is the average length of a monarch's reign?\", wrap=True)\n\n    avg_reign_length = np.mean(data['reign_length'])\n    plt.axhline(avg_reign_length, color='r', linestyle='--', label=f'Average: {avg_reign_length:.2f} years')\n    plt.legend()\n\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    return plt;\n\nchart = plot(data)\n```"], ["```python\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nfrom wordcloud import WordCloud\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    names = ' '.join(data['name'].tolist())\n    wordcloud = WordCloud(width=480, height=480, margin=0).generate(names)\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.title(\"What is the most common name among the monarchs?\", wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()\n```\n"], ["```python\nimport seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    data['start'] = pd.to_datetime(data['start'], format='%Y', errors='ignore')\n    data['end'] = pd.to_datetime(data['end'], format='%Y', errors='ignore')\n    commonwealth_counts = data['commonwealth'].value_counts()\n    labels = ['Commonwealth' if x == 1 else 'Not Commonwealth' for x in commonwealth_counts.index]\n    plt.pie(commonwealth_counts, labels=labels, autopct='%.2f%%')\n    plt.title('What is the distribution of monarchs by their affiliation with the Commonwealth?', wrap=True)\n    return plt;\n\nchart = plot(data)\nchart.show()\n```"], ["```python\nimport seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['end'] = pd.to_datetime(data['end'], format='%Y', errors='ignore')\n    data['end_year'] = data['end'].dt.year\n    year_counts = data['end_year'].value_counts().reset_index().rename(columns={'index': 'year', 'end_year': 'count'})\n    \n    plt.figure(figsize=(6, 6))\n    sns.lineplot(x='year', y='count', data=year_counts)\n    \n    ax = plt.gca()\n    if len(plt.xticks()[0]) > 20:\n        ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    \n    plt.title('What is the distribution of monarchs by their reign end year?', wrap=True)\n    return plt\n\nchart = plot(data)\n```"]], "filename": "monarchs.json", "chart": [[{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['start'] = pd.to_datetime(data['start'], format='%Y', errors='ignore')\n    plt.figure(figsize=(6, 6))\n    ax = sns.countplot(x='start', data=data)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n    if len(plt.xticks()[0]) > 20:\n        ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.title(\"What is the distribution of monarchs by their reign start year?\", wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport numpy as np\n\ndef plot(data: pd.DataFrame):\n    data['start'] = pd.to_datetime(data['start'], format='%Y', errors='ignore')\n    data['end'] = pd.to_datetime(data['end'], format='%Y', errors='ignore')\n    data['reign_length'] = (data['end'] - data['start']).dt.days / 365.25\n\n    plt.figure(figsize=(6, 6))\n    sns.boxplot(data=data, y='reign_length')\n    plt.title(\"What is the average length of a monarch's reign?\", wrap=True)\n\n    avg_reign_length = np.mean(data['reign_length'])\n    plt.axhline(avg_reign_length, color='r', linestyle='--', label=f'Average: {avg_reign_length:.2f} years')\n    plt.legend()\n\n    if len(plt.xticks()[0]) > 20:\n        plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": "Can only use .dt accessor with datetimelike values"}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nfrom wordcloud import WordCloud\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    names = ' '.join(data['name'].tolist())\n    wordcloud = WordCloud(width=480, height=480, margin=0).generate(names)\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.title(\"What is the most common name among the monarchs?\", wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": "name 'WordCloud' is not defined"}], [{"spec": null, "status": true, "raster": "", "code": "import seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    plt.figure(figsize=(6, 6))\n    data['start'] = pd.to_datetime(data['start'], format='%Y', errors='ignore')\n    data['end'] = pd.to_datetime(data['end'], format='%Y', errors='ignore')\n    commonwealth_counts = data['commonwealth'].value_counts()\n    labels = ['Commonwealth' if x == 1 else 'Not Commonwealth' for x in commonwealth_counts.index]\n    plt.pie(commonwealth_counts, labels=labels, autopct='%.2f%%')\n    plt.title('What is the distribution of monarchs by their affiliation with the Commonwealth?', wrap=True)\n    return plt;\n\nchart = plot(data)", "library": "seaborn", "error": null}], [{"spec": null, "status": false, "raster": null, "code": "import seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef plot(data: pd.DataFrame):\n    data['end'] = pd.to_datetime(data['end'], format='%Y', errors='ignore')\n    data['end_year'] = data['end'].dt.year\n    year_counts = data['end_year'].value_counts().reset_index().rename(columns={'index': 'year', 'end_year': 'count'})\n    \n    plt.figure(figsize=(6, 6))\n    sns.lineplot(x='year', y='count', data=year_counts)\n    \n    ax = plt.gca()\n    if len(plt.xticks()[0]) > 20:\n        ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n    plt.xticks(rotation=45)\n    \n    plt.title('What is the distribution of monarchs by their reign end year?', wrap=True)\n    return plt\n\nchart = plot(data)", "library": "seaborn", "error": "Can only use .dt accessor with datetimelike values"}]]}